name: CI

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  GO_VERSION: "^1.19"
  GOFLAGS: "-mod=readonly"
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  REPO_NAME: hellohq/hqservice
  PKG_NAME: core

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.0
          args: --timeout=3m --issues-exit-code=0 ./...
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          failure-threshold: error
          verbose: true
          dockerfile: ./Dockerfile

  test:
    if: github.actor != 'dependabot[bot]'
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/bin
            ~/go/pkg
            ~/go/src
            ~/.cache/go-build
            ~/.cache/golangci-lint
            .gobincache
          key: v3-test-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v3-test-${{ runner.os }}-

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2

      - name: Test CLI
        run: doppler --version
      
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Run test
        env:
          DOPPLER_TOKEN: ${{ secrets.STAGING_TOKEN }}
        run: 
          task scripts:test PROFILE=dev

  build:
    if: github.actor != 'dependabot[bot]'
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg
            ~/.cache/go-build
          key: v1-build-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v1-build-${{ runner.os }}-

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2

      - name: Test CLI
        run: doppler --version        

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Build image
        env:
          DOPPLER_TOKEN: ${{ secrets.STAGING_TOKEN }}
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.PKG_NAME }}:latest
        run: 
          task scripts:build:container

      - name: Push image
        run: |
          export CR_PAT=${{ secrets.GITHUB_TOKEN }}
          echo $CR_PAT | docker login ${{ env.REGISTRY }} -u ${{ github.repository }} --password-stdin
          docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.PKG_NAME }}:latest \
