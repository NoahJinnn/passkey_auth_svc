name: CI/CD

on:
  push:
    branches: [main]
    tags: [v*]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  GO_VERSION: "^1.19"
  GOFLAGS: "-mod=readonly"
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  REPO_NAME: HelloHQ/hqservice
  PKG_NAME: core


jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.0
          args: --timeout=3m --issues-exit-code=0 ./...

  test:
    runs-on: "ubuntu-latest"
    timeout-minutes: 30
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/bin
            ~/go/pkg
            ~/go/src
            ~/.cache/go-build
            ~/.cache/golangci-lint
            .gobincache
          key: v3-test-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v3-test-${{ runner.os }}-

      - uses: dopplerhq/cli-action@v2
      - name: Test CLI
        run: doppler --version
      - name: Install tools
        run: |
          sudo apt update
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d
          ./bin/task scripts:install:gotools

      - name: Run test
        run: ./bin/task scripts:test

      - name: Report code coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        if: env.COVERALLS_TOKEN
        run: |
          scripts/cover
          .gobincache/goveralls -coverprofile=cover.out -service=GitHub

  build:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push'
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v3

      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg
            ~/.cache/go-build
          key: v1-build-${{ runner.os }}-${{ hashFiles('go.mod') }}
          restore-keys: |
            v1-build-${{ runner.os }}-

      - name: task scripts:build:binary
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d
          ./bin/task scripts:build:binary

  release:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: go
          default-branch: main
          pull-request-header: "Bot (:robot:) requested to create a new release on ${{ github.ref_name }}"
          commit-search-depth: 100

  build_package:
    if: ${{ needs.release.outputs.build == 'true' }}
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push image for app
        id: build-and-push-app
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.PKG_NAME }}:latest, ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.PKG_NAME }}:${{ needs.release.outputs.tag_name }}
