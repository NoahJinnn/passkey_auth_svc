// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hellohq/hqservice/ent/privateshare"
	"github.com/hellohq/hqservice/ent/user"
)

// PrivateShare is the model entity for the PrivateShare schema.
type PrivateShare struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CompanyName holds the value of the "company_name" field.
	CompanyName string `json:"company_name,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int32 `json:"quantity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrivateShareQuery when eager-loading is set.
	Edges PrivateShareEdges `json:"edges"`
}

// PrivateShareEdges holds the relations/edges for other nodes in the graph.
type PrivateShareEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateShareEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrivateShare) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case privateshare.FieldID, privateshare.FieldUserID, privateshare.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case privateshare.FieldName, privateshare.FieldCompanyName:
			values[i] = new(sql.NullString)
		case privateshare.FieldCreatedAt, privateshare.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PrivateShare", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrivateShare fields.
func (ps *PrivateShare) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case privateshare.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = uint(value.Int64)
		case privateshare.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ps.UserID = uint(value.Int64)
			}
		case privateshare.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case privateshare.FieldCompanyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_name", values[i])
			} else if value.Valid {
				ps.CompanyName = value.String
			}
		case privateshare.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ps.Quantity = int32(value.Int64)
			}
		case privateshare.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case privateshare.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the PrivateShare entity.
func (ps *PrivateShare) QueryUser() *UserQuery {
	return NewPrivateShareClient(ps.config).QueryUser(ps)
}

// Update returns a builder for updating this PrivateShare.
// Note that you need to call PrivateShare.Unwrap() before calling this method if this PrivateShare
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PrivateShare) Update() *PrivateShareUpdateOne {
	return NewPrivateShareClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PrivateShare entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PrivateShare) Unwrap() *PrivateShare {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrivateShare is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PrivateShare) String() string {
	var builder strings.Builder
	builder.WriteString("PrivateShare(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", ")
	builder.WriteString("company_name=")
	builder.WriteString(ps.CompanyName)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ps.Quantity))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrivateShares is a parsable slice of PrivateShare.
type PrivateShares []*PrivateShare
