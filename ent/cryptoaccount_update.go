// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/cryptoaccount"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// CryptoAccountUpdate is the builder for updating CryptoAccount entities.
type CryptoAccountUpdate struct {
	config
	hooks    []Hook
	mutation *CryptoAccountMutation
}

// Where appends a list predicates to the CryptoAccountUpdate builder.
func (cau *CryptoAccountUpdate) Where(ps ...predicate.CryptoAccount) *CryptoAccountUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetUserID sets the "user_id" field.
func (cau *CryptoAccountUpdate) SetUserID(u uint) *CryptoAccountUpdate {
	cau.mutation.SetUserID(u)
	return cau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cau *CryptoAccountUpdate) SetNillableUserID(u *uint) *CryptoAccountUpdate {
	if u != nil {
		cau.SetUserID(*u)
	}
	return cau
}

// ClearUserID clears the value of the "user_id" field.
func (cau *CryptoAccountUpdate) ClearUserID() *CryptoAccountUpdate {
	cau.mutation.ClearUserID()
	return cau
}

// SetAssetInfoID sets the "asset_info_id" field.
func (cau *CryptoAccountUpdate) SetAssetInfoID(u uint) *CryptoAccountUpdate {
	cau.mutation.ResetAssetInfoID()
	cau.mutation.SetAssetInfoID(u)
	return cau
}

// AddAssetInfoID adds u to the "asset_info_id" field.
func (cau *CryptoAccountUpdate) AddAssetInfoID(u int) *CryptoAccountUpdate {
	cau.mutation.AddAssetInfoID(u)
	return cau
}

// SetCreatedAt sets the "created_at" field.
func (cau *CryptoAccountUpdate) SetCreatedAt(t time.Time) *CryptoAccountUpdate {
	cau.mutation.SetCreatedAt(t)
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CryptoAccountUpdate) SetUpdatedAt(t time.Time) *CryptoAccountUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetUser sets the "user" edge to the User entity.
func (cau *CryptoAccountUpdate) SetUser(u *User) *CryptoAccountUpdate {
	return cau.SetUserID(u.ID)
}

// Mutation returns the CryptoAccountMutation object of the builder.
func (cau *CryptoAccountUpdate) Mutation() *CryptoAccountMutation {
	return cau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cau *CryptoAccountUpdate) ClearUser() *CryptoAccountUpdate {
	cau.mutation.ClearUser()
	return cau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CryptoAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CryptoAccountMutation](ctx, cau.sqlSave, cau.mutation, cau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CryptoAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CryptoAccountUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CryptoAccountUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cau *CryptoAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cryptoaccount.Table, cryptoaccount.Columns, sqlgraph.NewFieldSpec(cryptoaccount.FieldID, field.TypeUint))
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.AssetInfoID(); ok {
		_spec.SetField(cryptoaccount.FieldAssetInfoID, field.TypeUint, value)
	}
	if value, ok := cau.mutation.AddedAssetInfoID(); ok {
		_spec.AddField(cryptoaccount.FieldAssetInfoID, field.TypeUint, value)
	}
	if value, ok := cau.mutation.CreatedAt(); ok {
		_spec.SetField(cryptoaccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.SetField(cryptoaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if cau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cryptoaccount.UserTable,
			Columns: []string{cryptoaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cryptoaccount.UserTable,
			Columns: []string{cryptoaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cryptoaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cau.mutation.done = true
	return n, nil
}

// CryptoAccountUpdateOne is the builder for updating a single CryptoAccount entity.
type CryptoAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CryptoAccountMutation
}

// SetUserID sets the "user_id" field.
func (cauo *CryptoAccountUpdateOne) SetUserID(u uint) *CryptoAccountUpdateOne {
	cauo.mutation.SetUserID(u)
	return cauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cauo *CryptoAccountUpdateOne) SetNillableUserID(u *uint) *CryptoAccountUpdateOne {
	if u != nil {
		cauo.SetUserID(*u)
	}
	return cauo
}

// ClearUserID clears the value of the "user_id" field.
func (cauo *CryptoAccountUpdateOne) ClearUserID() *CryptoAccountUpdateOne {
	cauo.mutation.ClearUserID()
	return cauo
}

// SetAssetInfoID sets the "asset_info_id" field.
func (cauo *CryptoAccountUpdateOne) SetAssetInfoID(u uint) *CryptoAccountUpdateOne {
	cauo.mutation.ResetAssetInfoID()
	cauo.mutation.SetAssetInfoID(u)
	return cauo
}

// AddAssetInfoID adds u to the "asset_info_id" field.
func (cauo *CryptoAccountUpdateOne) AddAssetInfoID(u int) *CryptoAccountUpdateOne {
	cauo.mutation.AddAssetInfoID(u)
	return cauo
}

// SetCreatedAt sets the "created_at" field.
func (cauo *CryptoAccountUpdateOne) SetCreatedAt(t time.Time) *CryptoAccountUpdateOne {
	cauo.mutation.SetCreatedAt(t)
	return cauo
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CryptoAccountUpdateOne) SetUpdatedAt(t time.Time) *CryptoAccountUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetUser sets the "user" edge to the User entity.
func (cauo *CryptoAccountUpdateOne) SetUser(u *User) *CryptoAccountUpdateOne {
	return cauo.SetUserID(u.ID)
}

// Mutation returns the CryptoAccountMutation object of the builder.
func (cauo *CryptoAccountUpdateOne) Mutation() *CryptoAccountMutation {
	return cauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cauo *CryptoAccountUpdateOne) ClearUser() *CryptoAccountUpdateOne {
	cauo.mutation.ClearUser()
	return cauo
}

// Where appends a list predicates to the CryptoAccountUpdate builder.
func (cauo *CryptoAccountUpdateOne) Where(ps ...predicate.CryptoAccount) *CryptoAccountUpdateOne {
	cauo.mutation.Where(ps...)
	return cauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CryptoAccountUpdateOne) Select(field string, fields ...string) *CryptoAccountUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CryptoAccount entity.
func (cauo *CryptoAccountUpdateOne) Save(ctx context.Context) (*CryptoAccount, error) {
	return withHooks[*CryptoAccount, CryptoAccountMutation](ctx, cauo.sqlSave, cauo.mutation, cauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CryptoAccountUpdateOne) SaveX(ctx context.Context) *CryptoAccount {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CryptoAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CryptoAccountUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cauo *CryptoAccountUpdateOne) sqlSave(ctx context.Context) (_node *CryptoAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(cryptoaccount.Table, cryptoaccount.Columns, sqlgraph.NewFieldSpec(cryptoaccount.FieldID, field.TypeUint))
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CryptoAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cryptoaccount.FieldID)
		for _, f := range fields {
			if !cryptoaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cryptoaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.AssetInfoID(); ok {
		_spec.SetField(cryptoaccount.FieldAssetInfoID, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.AddedAssetInfoID(); ok {
		_spec.AddField(cryptoaccount.FieldAssetInfoID, field.TypeUint, value)
	}
	if value, ok := cauo.mutation.CreatedAt(); ok {
		_spec.SetField(cryptoaccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.SetField(cryptoaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if cauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cryptoaccount.UserTable,
			Columns: []string{cryptoaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cryptoaccount.UserTable,
			Columns: []string{cryptoaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CryptoAccount{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cryptoaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauo.mutation.done = true
	return _node, nil
}
