// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/webauthnsessiondata"
)

// WebauthnSessionData is the model entity for the WebauthnSessionData schema.
type WebauthnSessionData struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Challenge holds the value of the "challenge" field.
	Challenge string `json:"challenge,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// UserVerification holds the value of the "user_verification" field.
	UserVerification string `json:"user_verification,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation string `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebauthnSessionDataQuery when eager-loading is set.
	Edges WebauthnSessionDataEdges `json:"edges"`
}

// WebauthnSessionDataEdges holds the relations/edges for other nodes in the graph.
type WebauthnSessionDataEdges struct {
	// WebauthnSessionDataAllowedCredentials holds the value of the webauthn_session_data_allowed_credentials edge.
	WebauthnSessionDataAllowedCredentials []*WebauthnSessionDataAllowedCredential `json:"webauthn_session_data_allowed_credentials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WebauthnSessionDataAllowedCredentialsOrErr returns the WebauthnSessionDataAllowedCredentials value or an error if the edge
// was not loaded in eager-loading.
func (e WebauthnSessionDataEdges) WebauthnSessionDataAllowedCredentialsOrErr() ([]*WebauthnSessionDataAllowedCredential, error) {
	if e.loadedTypes[0] {
		return e.WebauthnSessionDataAllowedCredentials, nil
	}
	return nil, &NotLoadedError{edge: "webauthn_session_data_allowed_credentials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebauthnSessionData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webauthnsessiondata.FieldChallenge, webauthnsessiondata.FieldUserVerification, webauthnsessiondata.FieldOperation:
			values[i] = new(sql.NullString)
		case webauthnsessiondata.FieldCreatedAt, webauthnsessiondata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case webauthnsessiondata.FieldID, webauthnsessiondata.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WebauthnSessionData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebauthnSessionData fields.
func (wsd *WebauthnSessionData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webauthnsessiondata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wsd.ID = *value
			}
		case webauthnsessiondata.FieldChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field challenge", values[i])
			} else if value.Valid {
				wsd.Challenge = value.String
			}
		case webauthnsessiondata.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				wsd.UserID = *value
			}
		case webauthnsessiondata.FieldUserVerification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_verification", values[i])
			} else if value.Valid {
				wsd.UserVerification = value.String
			}
		case webauthnsessiondata.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				wsd.Operation = value.String
			}
		case webauthnsessiondata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wsd.CreatedAt = value.Time
			}
		case webauthnsessiondata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wsd.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryWebauthnSessionDataAllowedCredentials queries the "webauthn_session_data_allowed_credentials" edge of the WebauthnSessionData entity.
func (wsd *WebauthnSessionData) QueryWebauthnSessionDataAllowedCredentials() *WebauthnSessionDataAllowedCredentialQuery {
	return NewWebauthnSessionDataClient(wsd.config).QueryWebauthnSessionDataAllowedCredentials(wsd)
}

// Update returns a builder for updating this WebauthnSessionData.
// Note that you need to call WebauthnSessionData.Unwrap() before calling this method if this WebauthnSessionData
// was returned from a transaction, and the transaction was committed or rolled back.
func (wsd *WebauthnSessionData) Update() *WebauthnSessionDataUpdateOne {
	return NewWebauthnSessionDataClient(wsd.config).UpdateOne(wsd)
}

// Unwrap unwraps the WebauthnSessionData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wsd *WebauthnSessionData) Unwrap() *WebauthnSessionData {
	_tx, ok := wsd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebauthnSessionData is not a transactional entity")
	}
	wsd.config.driver = _tx.drv
	return wsd
}

// String implements the fmt.Stringer.
func (wsd *WebauthnSessionData) String() string {
	var builder strings.Builder
	builder.WriteString("WebauthnSessionData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wsd.ID))
	builder.WriteString("challenge=")
	builder.WriteString(wsd.Challenge)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wsd.UserID))
	builder.WriteString(", ")
	builder.WriteString("user_verification=")
	builder.WriteString(wsd.UserVerification)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(wsd.Operation)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wsd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wsd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WebauthnSessionDataSlice is a parsable slice of WebauthnSessionData.
type WebauthnSessionDataSlice []*WebauthnSessionData
