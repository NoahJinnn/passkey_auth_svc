// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/assetinfo"
	"github.com/hellohq/hqservice/ent/predicate"
)

// AssetInfoUpdate is the builder for updating AssetInfo entities.
type AssetInfoUpdate struct {
	config
	hooks    []Hook
	mutation *AssetInfoMutation
}

// Where appends a list predicates to the AssetInfoUpdate builder.
func (aiu *AssetInfoUpdate) Where(ps ...predicate.AssetInfo) *AssetInfoUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetAccountInfo sets the "account_info" field.
func (aiu *AssetInfoUpdate) SetAccountInfo(s struct{}) *AssetInfoUpdate {
	aiu.mutation.SetAccountInfo(s)
	return aiu
}

// SetInstitutionInfo sets the "institution_info" field.
func (aiu *AssetInfoUpdate) SetInstitutionInfo(s struct{}) *AssetInfoUpdate {
	aiu.mutation.SetInstitutionInfo(s)
	return aiu
}

// SetAssetInfo sets the "asset_info" field.
func (aiu *AssetInfoUpdate) SetAssetInfo(s struct{}) *AssetInfoUpdate {
	aiu.mutation.SetAssetInfo(s)
	return aiu
}

// SetSensibleData sets the "sensible_data" field.
func (aiu *AssetInfoUpdate) SetSensibleData(s string) *AssetInfoUpdate {
	aiu.mutation.SetSensibleData(s)
	return aiu
}

// SetDescriptions sets the "descriptions" field.
func (aiu *AssetInfoUpdate) SetDescriptions(s string) *AssetInfoUpdate {
	aiu.mutation.SetDescriptions(s)
	return aiu
}

// SetCreatedAt sets the "created_at" field.
func (aiu *AssetInfoUpdate) SetCreatedAt(t time.Time) *AssetInfoUpdate {
	aiu.mutation.SetCreatedAt(t)
	return aiu
}

// SetUpdatedAt sets the "updated_at" field.
func (aiu *AssetInfoUpdate) SetUpdatedAt(t time.Time) *AssetInfoUpdate {
	aiu.mutation.SetUpdatedAt(t)
	return aiu
}

// Mutation returns the AssetInfoMutation object of the builder.
func (aiu *AssetInfoUpdate) Mutation() *AssetInfoMutation {
	return aiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AssetInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AssetInfoMutation](ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AssetInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AssetInfoUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AssetInfoUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiu *AssetInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetinfo.Table, assetinfo.Columns, sqlgraph.NewFieldSpec(assetinfo.FieldID, field.TypeUint))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.AccountInfo(); ok {
		_spec.SetField(assetinfo.FieldAccountInfo, field.TypeJSON, value)
	}
	if value, ok := aiu.mutation.InstitutionInfo(); ok {
		_spec.SetField(assetinfo.FieldInstitutionInfo, field.TypeJSON, value)
	}
	if value, ok := aiu.mutation.AssetInfo(); ok {
		_spec.SetField(assetinfo.FieldAssetInfo, field.TypeJSON, value)
	}
	if value, ok := aiu.mutation.SensibleData(); ok {
		_spec.SetField(assetinfo.FieldSensibleData, field.TypeString, value)
	}
	if value, ok := aiu.mutation.Descriptions(); ok {
		_spec.SetField(assetinfo.FieldDescriptions, field.TypeString, value)
	}
	if value, ok := aiu.mutation.CreatedAt(); ok {
		_spec.SetField(assetinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// AssetInfoUpdateOne is the builder for updating a single AssetInfo entity.
type AssetInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetInfoMutation
}

// SetAccountInfo sets the "account_info" field.
func (aiuo *AssetInfoUpdateOne) SetAccountInfo(s struct{}) *AssetInfoUpdateOne {
	aiuo.mutation.SetAccountInfo(s)
	return aiuo
}

// SetInstitutionInfo sets the "institution_info" field.
func (aiuo *AssetInfoUpdateOne) SetInstitutionInfo(s struct{}) *AssetInfoUpdateOne {
	aiuo.mutation.SetInstitutionInfo(s)
	return aiuo
}

// SetAssetInfo sets the "asset_info" field.
func (aiuo *AssetInfoUpdateOne) SetAssetInfo(s struct{}) *AssetInfoUpdateOne {
	aiuo.mutation.SetAssetInfo(s)
	return aiuo
}

// SetSensibleData sets the "sensible_data" field.
func (aiuo *AssetInfoUpdateOne) SetSensibleData(s string) *AssetInfoUpdateOne {
	aiuo.mutation.SetSensibleData(s)
	return aiuo
}

// SetDescriptions sets the "descriptions" field.
func (aiuo *AssetInfoUpdateOne) SetDescriptions(s string) *AssetInfoUpdateOne {
	aiuo.mutation.SetDescriptions(s)
	return aiuo
}

// SetCreatedAt sets the "created_at" field.
func (aiuo *AssetInfoUpdateOne) SetCreatedAt(t time.Time) *AssetInfoUpdateOne {
	aiuo.mutation.SetCreatedAt(t)
	return aiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (aiuo *AssetInfoUpdateOne) SetUpdatedAt(t time.Time) *AssetInfoUpdateOne {
	aiuo.mutation.SetUpdatedAt(t)
	return aiuo
}

// Mutation returns the AssetInfoMutation object of the builder.
func (aiuo *AssetInfoUpdateOne) Mutation() *AssetInfoMutation {
	return aiuo.mutation
}

// Where appends a list predicates to the AssetInfoUpdate builder.
func (aiuo *AssetInfoUpdateOne) Where(ps ...predicate.AssetInfo) *AssetInfoUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AssetInfoUpdateOne) Select(field string, fields ...string) *AssetInfoUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated AssetInfo entity.
func (aiuo *AssetInfoUpdateOne) Save(ctx context.Context) (*AssetInfo, error) {
	return withHooks[*AssetInfo, AssetInfoMutation](ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AssetInfoUpdateOne) SaveX(ctx context.Context) *AssetInfo {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AssetInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AssetInfoUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aiuo *AssetInfoUpdateOne) sqlSave(ctx context.Context) (_node *AssetInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetinfo.Table, assetinfo.Columns, sqlgraph.NewFieldSpec(assetinfo.FieldID, field.TypeUint))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetinfo.FieldID)
		for _, f := range fields {
			if !assetinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.AccountInfo(); ok {
		_spec.SetField(assetinfo.FieldAccountInfo, field.TypeJSON, value)
	}
	if value, ok := aiuo.mutation.InstitutionInfo(); ok {
		_spec.SetField(assetinfo.FieldInstitutionInfo, field.TypeJSON, value)
	}
	if value, ok := aiuo.mutation.AssetInfo(); ok {
		_spec.SetField(assetinfo.FieldAssetInfo, field.TypeJSON, value)
	}
	if value, ok := aiuo.mutation.SensibleData(); ok {
		_spec.SetField(assetinfo.FieldSensibleData, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.Descriptions(); ok {
		_spec.SetField(assetinfo.FieldDescriptions, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.CreatedAt(); ok {
		_spec.SetField(assetinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AssetInfo{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
