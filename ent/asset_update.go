// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/asset"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AssetUpdate) SetUserID(u uuid.UUID) *AssetUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableUserID(u *uuid.UUID) *AssetUpdate {
	if u != nil {
		au.SetUserID(*u)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AssetUpdate) ClearUserID() *AssetUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetSheet sets the "sheet" field.
func (au *AssetUpdate) SetSheet(i int32) *AssetUpdate {
	au.mutation.ResetSheet()
	au.mutation.SetSheet(i)
	return au
}

// SetNillableSheet sets the "sheet" field if the given value is not nil.
func (au *AssetUpdate) SetNillableSheet(i *int32) *AssetUpdate {
	if i != nil {
		au.SetSheet(*i)
	}
	return au
}

// AddSheet adds i to the "sheet" field.
func (au *AssetUpdate) AddSheet(i int32) *AssetUpdate {
	au.mutation.AddSheet(i)
	return au
}

// ClearSheet clears the value of the "sheet" field.
func (au *AssetUpdate) ClearSheet() *AssetUpdate {
	au.mutation.ClearSheet()
	return au
}

// SetSection sets the "section" field.
func (au *AssetUpdate) SetSection(i int32) *AssetUpdate {
	au.mutation.ResetSection()
	au.mutation.SetSection(i)
	return au
}

// SetNillableSection sets the "section" field if the given value is not nil.
func (au *AssetUpdate) SetNillableSection(i *int32) *AssetUpdate {
	if i != nil {
		au.SetSection(*i)
	}
	return au
}

// AddSection adds i to the "section" field.
func (au *AssetUpdate) AddSection(i int32) *AssetUpdate {
	au.mutation.AddSection(i)
	return au
}

// ClearSection clears the value of the "section" field.
func (au *AssetUpdate) ClearSection() *AssetUpdate {
	au.mutation.ClearSection()
	return au
}

// SetType sets the "type" field.
func (au *AssetUpdate) SetType(s string) *AssetUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableType(s *string) *AssetUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// SetProviderName sets the "provider_name" field.
func (au *AssetUpdate) SetProviderName(s string) *AssetUpdate {
	au.mutation.SetProviderName(s)
	return au
}

// SetNillableProviderName sets the "provider_name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableProviderName(s *string) *AssetUpdate {
	if s != nil {
		au.SetProviderName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AssetUpdate) SetDescription(s string) *AssetUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AssetUpdate) SetNillableDescription(s *string) *AssetUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AssetUpdate) ClearDescription() *AssetUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetCurrency sets the "currency" field.
func (au *AssetUpdate) SetCurrency(s string) *AssetUpdate {
	au.mutation.SetCurrency(s)
	return au
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (au *AssetUpdate) SetNillableCurrency(s *string) *AssetUpdate {
	if s != nil {
		au.SetCurrency(*s)
	}
	return au
}

// SetValue sets the "value" field.
func (au *AssetUpdate) SetValue(f float64) *AssetUpdate {
	au.mutation.ResetValue()
	au.mutation.SetValue(f)
	return au
}

// AddValue adds f to the "value" field.
func (au *AssetUpdate) AddValue(f float64) *AssetUpdate {
	au.mutation.AddValue(f)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssetUpdate) SetUpdatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AssetUpdate) SetUser(u *User) *AssetUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AssetUpdate) ClearUser() *AssetUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssetUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := asset.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Sheet(); ok {
		_spec.SetField(asset.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedSheet(); ok {
		_spec.AddField(asset.FieldSheet, field.TypeInt32, value)
	}
	if au.mutation.SheetCleared() {
		_spec.ClearField(asset.FieldSheet, field.TypeInt32)
	}
	if value, ok := au.mutation.Section(); ok {
		_spec.SetField(asset.FieldSection, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedSection(); ok {
		_spec.AddField(asset.FieldSection, field.TypeInt32, value)
	}
	if au.mutation.SectionCleared() {
		_spec.ClearField(asset.FieldSection, field.TypeInt32)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
	}
	if value, ok := au.mutation.ProviderName(); ok {
		_spec.SetField(asset.FieldProviderName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(asset.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Currency(); ok {
		_spec.SetField(asset.FieldCurrency, field.TypeString, value)
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.SetField(asset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedValue(); ok {
		_spec.AddField(asset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.UserTable,
			Columns: []string{asset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.UserTable,
			Columns: []string{asset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetUserID sets the "user_id" field.
func (auo *AssetUpdateOne) SetUserID(u uuid.UUID) *AssetUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableUserID(u *uuid.UUID) *AssetUpdateOne {
	if u != nil {
		auo.SetUserID(*u)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AssetUpdateOne) ClearUserID() *AssetUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetSheet sets the "sheet" field.
func (auo *AssetUpdateOne) SetSheet(i int32) *AssetUpdateOne {
	auo.mutation.ResetSheet()
	auo.mutation.SetSheet(i)
	return auo
}

// SetNillableSheet sets the "sheet" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableSheet(i *int32) *AssetUpdateOne {
	if i != nil {
		auo.SetSheet(*i)
	}
	return auo
}

// AddSheet adds i to the "sheet" field.
func (auo *AssetUpdateOne) AddSheet(i int32) *AssetUpdateOne {
	auo.mutation.AddSheet(i)
	return auo
}

// ClearSheet clears the value of the "sheet" field.
func (auo *AssetUpdateOne) ClearSheet() *AssetUpdateOne {
	auo.mutation.ClearSheet()
	return auo
}

// SetSection sets the "section" field.
func (auo *AssetUpdateOne) SetSection(i int32) *AssetUpdateOne {
	auo.mutation.ResetSection()
	auo.mutation.SetSection(i)
	return auo
}

// SetNillableSection sets the "section" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableSection(i *int32) *AssetUpdateOne {
	if i != nil {
		auo.SetSection(*i)
	}
	return auo
}

// AddSection adds i to the "section" field.
func (auo *AssetUpdateOne) AddSection(i int32) *AssetUpdateOne {
	auo.mutation.AddSection(i)
	return auo
}

// ClearSection clears the value of the "section" field.
func (auo *AssetUpdateOne) ClearSection() *AssetUpdateOne {
	auo.mutation.ClearSection()
	return auo
}

// SetType sets the "type" field.
func (auo *AssetUpdateOne) SetType(s string) *AssetUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableType(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// SetProviderName sets the "provider_name" field.
func (auo *AssetUpdateOne) SetProviderName(s string) *AssetUpdateOne {
	auo.mutation.SetProviderName(s)
	return auo
}

// SetNillableProviderName sets the "provider_name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableProviderName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetProviderName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AssetUpdateOne) SetDescription(s string) *AssetUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableDescription(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AssetUpdateOne) ClearDescription() *AssetUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetCurrency sets the "currency" field.
func (auo *AssetUpdateOne) SetCurrency(s string) *AssetUpdateOne {
	auo.mutation.SetCurrency(s)
	return auo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableCurrency(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetCurrency(*s)
	}
	return auo
}

// SetValue sets the "value" field.
func (auo *AssetUpdateOne) SetValue(f float64) *AssetUpdateOne {
	auo.mutation.ResetValue()
	auo.mutation.SetValue(f)
	return auo
}

// AddValue adds f to the "value" field.
func (auo *AssetUpdateOne) AddValue(f float64) *AssetUpdateOne {
	auo.mutation.AddValue(f)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssetUpdateOne) SetUpdatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AssetUpdateOne) SetUser(u *User) *AssetUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AssetUpdateOne) ClearUser() *AssetUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssetUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := asset.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Sheet(); ok {
		_spec.SetField(asset.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedSheet(); ok {
		_spec.AddField(asset.FieldSheet, field.TypeInt32, value)
	}
	if auo.mutation.SheetCleared() {
		_spec.ClearField(asset.FieldSheet, field.TypeInt32)
	}
	if value, ok := auo.mutation.Section(); ok {
		_spec.SetField(asset.FieldSection, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedSection(); ok {
		_spec.AddField(asset.FieldSection, field.TypeInt32, value)
	}
	if auo.mutation.SectionCleared() {
		_spec.ClearField(asset.FieldSection, field.TypeInt32)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
	}
	if value, ok := auo.mutation.ProviderName(); ok {
		_spec.SetField(asset.FieldProviderName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(asset.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Currency(); ok {
		_spec.SetField(asset.FieldCurrency, field.TypeString, value)
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.SetField(asset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedValue(); ok {
		_spec.AddField(asset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.UserTable,
			Columns: []string{asset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.UserTable,
			Columns: []string{asset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
