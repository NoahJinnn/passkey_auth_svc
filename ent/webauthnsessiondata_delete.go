// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NoahJinnn/passkey_auth_svc/ent/predicate"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthnsessiondata"
)

// WebauthnSessionDataDelete is the builder for deleting a WebauthnSessionData entity.
type WebauthnSessionDataDelete struct {
	config
	hooks    []Hook
	mutation *WebauthnSessionDataMutation
}

// Where appends a list predicates to the WebauthnSessionDataDelete builder.
func (wsdd *WebauthnSessionDataDelete) Where(ps ...predicate.WebauthnSessionData) *WebauthnSessionDataDelete {
	wsdd.mutation.Where(ps...)
	return wsdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wsdd *WebauthnSessionDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wsdd.sqlExec, wsdd.mutation, wsdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wsdd *WebauthnSessionDataDelete) ExecX(ctx context.Context) int {
	n, err := wsdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wsdd *WebauthnSessionDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(webauthnsessiondata.Table, sqlgraph.NewFieldSpec(webauthnsessiondata.FieldID, field.TypeUUID))
	if ps := wsdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wsdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wsdd.mutation.done = true
	return affected, err
}

// WebauthnSessionDataDeleteOne is the builder for deleting a single WebauthnSessionData entity.
type WebauthnSessionDataDeleteOne struct {
	wsdd *WebauthnSessionDataDelete
}

// Where appends a list predicates to the WebauthnSessionDataDelete builder.
func (wsddo *WebauthnSessionDataDeleteOne) Where(ps ...predicate.WebauthnSessionData) *WebauthnSessionDataDeleteOne {
	wsddo.wsdd.mutation.Where(ps...)
	return wsddo
}

// Exec executes the deletion query.
func (wsddo *WebauthnSessionDataDeleteOne) Exec(ctx context.Context) error {
	n, err := wsddo.wsdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{webauthnsessiondata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wsddo *WebauthnSessionDataDeleteOne) ExecX(ctx context.Context) {
	if err := wsddo.Exec(ctx); err != nil {
		panic(err)
	}
}
