// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/changeset"
	"github.com/hellohq/hqservice/ent/user"
)

// Changeset is the model entity for the Changeset schema.
type Changeset struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SiteID holds the value of the "site_id" field.
	SiteID string `json:"site_id,omitempty"`
	// DbVersion holds the value of the "db_version" field.
	DbVersion int32 `json:"db_version,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChangesetQuery when eager-loading is set.
	Edges        ChangesetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChangesetEdges holds the relations/edges for other nodes in the graph.
type ChangesetEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChangesetEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Changeset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case changeset.FieldDbVersion:
			values[i] = new(sql.NullInt64)
		case changeset.FieldSiteID:
			values[i] = new(sql.NullString)
		case changeset.FieldCreatedAt, changeset.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case changeset.FieldID, changeset.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Changeset fields.
func (c *Changeset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case changeset.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case changeset.FieldSiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_id", values[i])
			} else if value.Valid {
				c.SiteID = value.String
			}
		case changeset.FieldDbVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field db_version", values[i])
			} else if value.Valid {
				c.DbVersion = int32(value.Int64)
			}
		case changeset.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				c.UserID = *value
			}
		case changeset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case changeset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Changeset.
// This includes values selected through modifiers, order, etc.
func (c *Changeset) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Changeset entity.
func (c *Changeset) QueryUser() *UserQuery {
	return NewChangesetClient(c.config).QueryUser(c)
}

// Update returns a builder for updating this Changeset.
// Note that you need to call Changeset.Unwrap() before calling this method if this Changeset
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Changeset) Update() *ChangesetUpdateOne {
	return NewChangesetClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Changeset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Changeset) Unwrap() *Changeset {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Changeset is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Changeset) String() string {
	var builder strings.Builder
	builder.WriteString("Changeset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("site_id=")
	builder.WriteString(c.SiteID)
	builder.WriteString(", ")
	builder.WriteString("db_version=")
	builder.WriteString(fmt.Sprintf("%v", c.DbVersion))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Changesets is a parsable slice of Changeset.
type Changesets []*Changeset
