// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/collectible"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// CollectibleUpdate is the builder for updating Collectible entities.
type CollectibleUpdate struct {
	config
	hooks    []Hook
	mutation *CollectibleMutation
}

// Where appends a list predicates to the CollectibleUpdate builder.
func (cu *CollectibleUpdate) Where(ps ...predicate.Collectible) *CollectibleUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CollectibleUpdate) SetUserID(u uint) *CollectibleUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CollectibleUpdate) SetNillableUserID(u *uint) *CollectibleUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CollectibleUpdate) ClearUserID() *CollectibleUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetName sets the "name" field.
func (cu *CollectibleUpdate) SetName(s string) *CollectibleUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CollectibleUpdate) SetDescription(s string) *CollectibleUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CollectibleUpdate) SetCreatedAt(t time.Time) *CollectibleUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectibleUpdate) SetUpdatedAt(t time.Time) *CollectibleUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CollectibleUpdate) SetUser(u *User) *CollectibleUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the CollectibleMutation object of the builder.
func (cu *CollectibleUpdate) Mutation() *CollectibleMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CollectibleUpdate) ClearUser() *CollectibleUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectibleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CollectibleMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectibleUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectibleUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectibleUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CollectibleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(collectible.Table, collectible.Columns, sqlgraph.NewFieldSpec(collectible.FieldID, field.TypeUint))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(collectible.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(collectible.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(collectible.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(collectible.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectible.UserTable,
			Columns: []string{collectible.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectible.UserTable,
			Columns: []string{collectible.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectible.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectibleUpdateOne is the builder for updating a single Collectible entity.
type CollectibleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectibleMutation
}

// SetUserID sets the "user_id" field.
func (cuo *CollectibleUpdateOne) SetUserID(u uint) *CollectibleUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CollectibleUpdateOne) SetNillableUserID(u *uint) *CollectibleUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CollectibleUpdateOne) ClearUserID() *CollectibleUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CollectibleUpdateOne) SetName(s string) *CollectibleUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CollectibleUpdateOne) SetDescription(s string) *CollectibleUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CollectibleUpdateOne) SetCreatedAt(t time.Time) *CollectibleUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectibleUpdateOne) SetUpdatedAt(t time.Time) *CollectibleUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CollectibleUpdateOne) SetUser(u *User) *CollectibleUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the CollectibleMutation object of the builder.
func (cuo *CollectibleUpdateOne) Mutation() *CollectibleMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CollectibleUpdateOne) ClearUser() *CollectibleUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Where appends a list predicates to the CollectibleUpdate builder.
func (cuo *CollectibleUpdateOne) Where(ps ...predicate.Collectible) *CollectibleUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectibleUpdateOne) Select(field string, fields ...string) *CollectibleUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collectible entity.
func (cuo *CollectibleUpdateOne) Save(ctx context.Context) (*Collectible, error) {
	return withHooks[*Collectible, CollectibleMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectibleUpdateOne) SaveX(ctx context.Context) *Collectible {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectibleUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectibleUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CollectibleUpdateOne) sqlSave(ctx context.Context) (_node *Collectible, err error) {
	_spec := sqlgraph.NewUpdateSpec(collectible.Table, collectible.Columns, sqlgraph.NewFieldSpec(collectible.FieldID, field.TypeUint))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collectible.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collectible.FieldID)
		for _, f := range fields {
			if !collectible.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collectible.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(collectible.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(collectible.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(collectible.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(collectible.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectible.UserTable,
			Columns: []string{collectible.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectible.UserTable,
			Columns: []string{collectible.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collectible{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectible.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
