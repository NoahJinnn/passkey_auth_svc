// Code generated by ent, DO NOT EDIT.

package bankaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldUserID, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldAccountID, v))
}

// SensibleData applies equality check predicate on the "sensible_data" field. It's identical to SensibleDataEQ.
func SensibleData(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldSensibleData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotNull(FieldUserID))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContains(FieldAccountID, v))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasPrefix(FieldAccountID, v))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasSuffix(FieldAccountID, v))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEqualFold(FieldAccountID, v))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContainsFold(FieldAccountID, v))
}

// SensibleDataEQ applies the EQ predicate on the "sensible_data" field.
func SensibleDataEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldSensibleData, v))
}

// SensibleDataNEQ applies the NEQ predicate on the "sensible_data" field.
func SensibleDataNEQ(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldSensibleData, v))
}

// SensibleDataIn applies the In predicate on the "sensible_data" field.
func SensibleDataIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldSensibleData, vs...))
}

// SensibleDataNotIn applies the NotIn predicate on the "sensible_data" field.
func SensibleDataNotIn(vs ...string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldSensibleData, vs...))
}

// SensibleDataGT applies the GT predicate on the "sensible_data" field.
func SensibleDataGT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldSensibleData, v))
}

// SensibleDataGTE applies the GTE predicate on the "sensible_data" field.
func SensibleDataGTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldSensibleData, v))
}

// SensibleDataLT applies the LT predicate on the "sensible_data" field.
func SensibleDataLT(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldSensibleData, v))
}

// SensibleDataLTE applies the LTE predicate on the "sensible_data" field.
func SensibleDataLTE(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldSensibleData, v))
}

// SensibleDataContains applies the Contains predicate on the "sensible_data" field.
func SensibleDataContains(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContains(FieldSensibleData, v))
}

// SensibleDataHasPrefix applies the HasPrefix predicate on the "sensible_data" field.
func SensibleDataHasPrefix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasPrefix(FieldSensibleData, v))
}

// SensibleDataHasSuffix applies the HasSuffix predicate on the "sensible_data" field.
func SensibleDataHasSuffix(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldHasSuffix(FieldSensibleData, v))
}

// SensibleDataEqualFold applies the EqualFold predicate on the "sensible_data" field.
func SensibleDataEqualFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEqualFold(FieldSensibleData, v))
}

// SensibleDataContainsFold applies the ContainsFold predicate on the "sensible_data" field.
func SensibleDataContainsFold(v string) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldContainsFold(FieldSensibleData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BankAccount {
	return predicate.BankAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BankAccount) predicate.BankAccount {
	return predicate.BankAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
