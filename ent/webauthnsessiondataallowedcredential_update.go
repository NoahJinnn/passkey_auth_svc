// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/webauthnsessiondataallowedcredential"
	"github.com/hellohq/hqservice/ent/webauthnsessiondatum"
)

// WebauthnSessionDataAllowedCredentialUpdate is the builder for updating WebauthnSessionDataAllowedCredential entities.
type WebauthnSessionDataAllowedCredentialUpdate struct {
	config
	hooks    []Hook
	mutation *WebauthnSessionDataAllowedCredentialMutation
}

// Where appends a list predicates to the WebauthnSessionDataAllowedCredentialUpdate builder.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) Where(ps ...predicate.WebauthnSessionDataAllowedCredential) *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.Where(ps...)
	return wsdacu
}

// SetCredentialID sets the "credential_id" field.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetCredentialID(s string) *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.SetCredentialID(s)
	return wsdacu
}

// SetWebauthnSessionDataID sets the "webauthn_session_data_id" field.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetWebauthnSessionDataID(u uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.SetWebauthnSessionDataID(u)
	return wsdacu
}

// SetNillableWebauthnSessionDataID sets the "webauthn_session_data_id" field if the given value is not nil.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetNillableWebauthnSessionDataID(u *uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdate {
	if u != nil {
		wsdacu.SetWebauthnSessionDataID(*u)
	}
	return wsdacu
}

// ClearWebauthnSessionDataID clears the value of the "webauthn_session_data_id" field.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) ClearWebauthnSessionDataID() *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.ClearWebauthnSessionDataID()
	return wsdacu
}

// SetCreatedAt sets the "created_at" field.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetCreatedAt(t time.Time) *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.SetCreatedAt(t)
	return wsdacu
}

// SetUpdatedAt sets the "updated_at" field.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetUpdatedAt(t time.Time) *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.SetUpdatedAt(t)
	return wsdacu
}

// SetWebauthnSessionDatumID sets the "webauthn_session_datum" edge to the WebauthnSessionDatum entity by ID.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetWebauthnSessionDatumID(id uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.SetWebauthnSessionDatumID(id)
	return wsdacu
}

// SetNillableWebauthnSessionDatumID sets the "webauthn_session_datum" edge to the WebauthnSessionDatum entity by ID if the given value is not nil.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetNillableWebauthnSessionDatumID(id *uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdate {
	if id != nil {
		wsdacu = wsdacu.SetWebauthnSessionDatumID(*id)
	}
	return wsdacu
}

// SetWebauthnSessionDatum sets the "webauthn_session_datum" edge to the WebauthnSessionDatum entity.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SetWebauthnSessionDatum(w *WebauthnSessionDatum) *WebauthnSessionDataAllowedCredentialUpdate {
	return wsdacu.SetWebauthnSessionDatumID(w.ID)
}

// Mutation returns the WebauthnSessionDataAllowedCredentialMutation object of the builder.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) Mutation() *WebauthnSessionDataAllowedCredentialMutation {
	return wsdacu.mutation
}

// ClearWebauthnSessionDatum clears the "webauthn_session_datum" edge to the WebauthnSessionDatum entity.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) ClearWebauthnSessionDatum() *WebauthnSessionDataAllowedCredentialUpdate {
	wsdacu.mutation.ClearWebauthnSessionDatum()
	return wsdacu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WebauthnSessionDataAllowedCredentialMutation](ctx, wsdacu.sqlSave, wsdacu.mutation, wsdacu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := wsdacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) Exec(ctx context.Context) error {
	_, err := wsdacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) ExecX(ctx context.Context) {
	if err := wsdacu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wsdacu *WebauthnSessionDataAllowedCredentialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(webauthnsessiondataallowedcredential.Table, webauthnsessiondataallowedcredential.Columns, sqlgraph.NewFieldSpec(webauthnsessiondataallowedcredential.FieldID, field.TypeUUID))
	if ps := wsdacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsdacu.mutation.CredentialID(); ok {
		_spec.SetField(webauthnsessiondataallowedcredential.FieldCredentialID, field.TypeString, value)
	}
	if value, ok := wsdacu.mutation.CreatedAt(); ok {
		_spec.SetField(webauthnsessiondataallowedcredential.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wsdacu.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthnsessiondataallowedcredential.FieldUpdatedAt, field.TypeTime, value)
	}
	if wsdacu.mutation.WebauthnSessionDatumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthnsessiondataallowedcredential.WebauthnSessionDatumTable,
			Columns: []string{webauthnsessiondataallowedcredential.WebauthnSessionDatumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondatum.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsdacu.mutation.WebauthnSessionDatumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthnsessiondataallowedcredential.WebauthnSessionDatumTable,
			Columns: []string{webauthnsessiondataallowedcredential.WebauthnSessionDatumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondatum.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsdacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthnsessiondataallowedcredential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsdacu.mutation.done = true
	return n, nil
}

// WebauthnSessionDataAllowedCredentialUpdateOne is the builder for updating a single WebauthnSessionDataAllowedCredential entity.
type WebauthnSessionDataAllowedCredentialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebauthnSessionDataAllowedCredentialMutation
}

// SetCredentialID sets the "credential_id" field.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetCredentialID(s string) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.SetCredentialID(s)
	return wsdacuo
}

// SetWebauthnSessionDataID sets the "webauthn_session_data_id" field.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetWebauthnSessionDataID(u uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.SetWebauthnSessionDataID(u)
	return wsdacuo
}

// SetNillableWebauthnSessionDataID sets the "webauthn_session_data_id" field if the given value is not nil.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetNillableWebauthnSessionDataID(u *uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdateOne {
	if u != nil {
		wsdacuo.SetWebauthnSessionDataID(*u)
	}
	return wsdacuo
}

// ClearWebauthnSessionDataID clears the value of the "webauthn_session_data_id" field.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) ClearWebauthnSessionDataID() *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.ClearWebauthnSessionDataID()
	return wsdacuo
}

// SetCreatedAt sets the "created_at" field.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetCreatedAt(t time.Time) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.SetCreatedAt(t)
	return wsdacuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetUpdatedAt(t time.Time) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.SetUpdatedAt(t)
	return wsdacuo
}

// SetWebauthnSessionDatumID sets the "webauthn_session_datum" edge to the WebauthnSessionDatum entity by ID.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetWebauthnSessionDatumID(id uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.SetWebauthnSessionDatumID(id)
	return wsdacuo
}

// SetNillableWebauthnSessionDatumID sets the "webauthn_session_datum" edge to the WebauthnSessionDatum entity by ID if the given value is not nil.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetNillableWebauthnSessionDatumID(id *uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdateOne {
	if id != nil {
		wsdacuo = wsdacuo.SetWebauthnSessionDatumID(*id)
	}
	return wsdacuo
}

// SetWebauthnSessionDatum sets the "webauthn_session_datum" edge to the WebauthnSessionDatum entity.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SetWebauthnSessionDatum(w *WebauthnSessionDatum) *WebauthnSessionDataAllowedCredentialUpdateOne {
	return wsdacuo.SetWebauthnSessionDatumID(w.ID)
}

// Mutation returns the WebauthnSessionDataAllowedCredentialMutation object of the builder.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) Mutation() *WebauthnSessionDataAllowedCredentialMutation {
	return wsdacuo.mutation
}

// ClearWebauthnSessionDatum clears the "webauthn_session_datum" edge to the WebauthnSessionDatum entity.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) ClearWebauthnSessionDatum() *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.ClearWebauthnSessionDatum()
	return wsdacuo
}

// Where appends a list predicates to the WebauthnSessionDataAllowedCredentialUpdate builder.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) Where(ps ...predicate.WebauthnSessionDataAllowedCredential) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.mutation.Where(ps...)
	return wsdacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) Select(field string, fields ...string) *WebauthnSessionDataAllowedCredentialUpdateOne {
	wsdacuo.fields = append([]string{field}, fields...)
	return wsdacuo
}

// Save executes the query and returns the updated WebauthnSessionDataAllowedCredential entity.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) Save(ctx context.Context) (*WebauthnSessionDataAllowedCredential, error) {
	return withHooks[*WebauthnSessionDataAllowedCredential, WebauthnSessionDataAllowedCredentialMutation](ctx, wsdacuo.sqlSave, wsdacuo.mutation, wsdacuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) SaveX(ctx context.Context) *WebauthnSessionDataAllowedCredential {
	node, err := wsdacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := wsdacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) ExecX(ctx context.Context) {
	if err := wsdacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wsdacuo *WebauthnSessionDataAllowedCredentialUpdateOne) sqlSave(ctx context.Context) (_node *WebauthnSessionDataAllowedCredential, err error) {
	_spec := sqlgraph.NewUpdateSpec(webauthnsessiondataallowedcredential.Table, webauthnsessiondataallowedcredential.Columns, sqlgraph.NewFieldSpec(webauthnsessiondataallowedcredential.FieldID, field.TypeUUID))
	id, ok := wsdacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WebauthnSessionDataAllowedCredential.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsdacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webauthnsessiondataallowedcredential.FieldID)
		for _, f := range fields {
			if !webauthnsessiondataallowedcredential.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webauthnsessiondataallowedcredential.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsdacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsdacuo.mutation.CredentialID(); ok {
		_spec.SetField(webauthnsessiondataallowedcredential.FieldCredentialID, field.TypeString, value)
	}
	if value, ok := wsdacuo.mutation.CreatedAt(); ok {
		_spec.SetField(webauthnsessiondataallowedcredential.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wsdacuo.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthnsessiondataallowedcredential.FieldUpdatedAt, field.TypeTime, value)
	}
	if wsdacuo.mutation.WebauthnSessionDatumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthnsessiondataallowedcredential.WebauthnSessionDatumTable,
			Columns: []string{webauthnsessiondataallowedcredential.WebauthnSessionDatumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondatum.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsdacuo.mutation.WebauthnSessionDatumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthnsessiondataallowedcredential.WebauthnSessionDatumTable,
			Columns: []string{webauthnsessiondataallowedcredential.WebauthnSessionDatumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondatum.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WebauthnSessionDataAllowedCredential{config: wsdacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsdacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthnsessiondataallowedcredential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsdacuo.mutation.done = true
	return _node, nil
}
