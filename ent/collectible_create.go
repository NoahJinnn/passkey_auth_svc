// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/collectible"
	"github.com/hellohq/hqservice/ent/user"
)

// CollectibleCreate is the builder for creating a Collectible entity.
type CollectibleCreate struct {
	config
	mutation *CollectibleMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (cc *CollectibleCreate) SetUserID(u uint) *CollectibleCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CollectibleCreate) SetNillableUserID(u *uint) *CollectibleCreate {
	if u != nil {
		cc.SetUserID(*u)
	}
	return cc
}

// SetAssetInfoID sets the "asset_info_id" field.
func (cc *CollectibleCreate) SetAssetInfoID(u uint) *CollectibleCreate {
	cc.mutation.SetAssetInfoID(u)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CollectibleCreate) SetCreatedAt(t time.Time) *CollectibleCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CollectibleCreate) SetUpdatedAt(t time.Time) *CollectibleCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetID sets the "id" field.
func (cc *CollectibleCreate) SetID(u uint) *CollectibleCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CollectibleCreate) SetUser(u *User) *CollectibleCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the CollectibleMutation object of the builder.
func (cc *CollectibleCreate) Mutation() *CollectibleMutation {
	return cc.mutation
}

// Save creates the Collectible in the database.
func (cc *CollectibleCreate) Save(ctx context.Context) (*Collectible, error) {
	return withHooks[*Collectible, CollectibleMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CollectibleCreate) SaveX(ctx context.Context) *Collectible {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CollectibleCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CollectibleCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CollectibleCreate) check() error {
	switch cc.driver.Dialect() {
	case dialect.MySQL, dialect.SQLite:
		if _, ok := cc.mutation.AssetInfoID(); !ok {
			return &ValidationError{Name: "asset_info_id", err: errors.New(`ent: missing required field "Collectible.asset_info_id"`)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Collectible.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Collectible.updated_at"`)}
	}
	return nil
}

func (cc *CollectibleCreate) sqlSave(ctx context.Context) (*Collectible, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CollectibleCreate) createSpec() (*Collectible, *sqlgraph.CreateSpec) {
	var (
		_node = &Collectible{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(collectible.Table, sqlgraph.NewFieldSpec(collectible.FieldID, field.TypeUint))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.AssetInfoID(); ok {
		_spec.SetField(collectible.FieldAssetInfoID, field.TypeUint, value)
		_node.AssetInfoID = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(collectible.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(collectible.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectible.UserTable,
			Columns: []string{collectible.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CollectibleCreateBulk is the builder for creating many Collectible entities in bulk.
type CollectibleCreateBulk struct {
	config
	builders []*CollectibleCreate
}

// Save creates the Collectible entities in the database.
func (ccb *CollectibleCreateBulk) Save(ctx context.Context) ([]*Collectible, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Collectible, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollectibleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CollectibleCreateBulk) SaveX(ctx context.Context) []*Collectible {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CollectibleCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CollectibleCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
