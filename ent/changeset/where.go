// Code generated by ent, DO NOT EDIT.

package changeset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/NoahJinnn/passkey_auth_svc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldLTE(FieldID, id))
}

// SiteID applies equality check predicate on the "site_id" field. It's identical to SiteIDEQ.
func SiteID(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldSiteID, v))
}

// DbVersion applies equality check predicate on the "db_version" field. It's identical to DbVersionEQ.
func DbVersion(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldDbVersion, v))
}

// FirstLaunch applies equality check predicate on the "first_launch" field. It's identical to FirstLaunchEQ.
func FirstLaunch(v bool) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldFirstLaunch, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldUpdatedAt, v))
}

// SiteIDEQ applies the EQ predicate on the "site_id" field.
func SiteIDEQ(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldSiteID, v))
}

// SiteIDNEQ applies the NEQ predicate on the "site_id" field.
func SiteIDNEQ(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldSiteID, v))
}

// SiteIDIn applies the In predicate on the "site_id" field.
func SiteIDIn(vs ...string) predicate.Changeset {
	return predicate.Changeset(sql.FieldIn(FieldSiteID, vs...))
}

// SiteIDNotIn applies the NotIn predicate on the "site_id" field.
func SiteIDNotIn(vs ...string) predicate.Changeset {
	return predicate.Changeset(sql.FieldNotIn(FieldSiteID, vs...))
}

// SiteIDGT applies the GT predicate on the "site_id" field.
func SiteIDGT(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldGT(FieldSiteID, v))
}

// SiteIDGTE applies the GTE predicate on the "site_id" field.
func SiteIDGTE(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldGTE(FieldSiteID, v))
}

// SiteIDLT applies the LT predicate on the "site_id" field.
func SiteIDLT(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldLT(FieldSiteID, v))
}

// SiteIDLTE applies the LTE predicate on the "site_id" field.
func SiteIDLTE(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldLTE(FieldSiteID, v))
}

// SiteIDContains applies the Contains predicate on the "site_id" field.
func SiteIDContains(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldContains(FieldSiteID, v))
}

// SiteIDHasPrefix applies the HasPrefix predicate on the "site_id" field.
func SiteIDHasPrefix(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldHasPrefix(FieldSiteID, v))
}

// SiteIDHasSuffix applies the HasSuffix predicate on the "site_id" field.
func SiteIDHasSuffix(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldHasSuffix(FieldSiteID, v))
}

// SiteIDEqualFold applies the EqualFold predicate on the "site_id" field.
func SiteIDEqualFold(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldEqualFold(FieldSiteID, v))
}

// SiteIDContainsFold applies the ContainsFold predicate on the "site_id" field.
func SiteIDContainsFold(v string) predicate.Changeset {
	return predicate.Changeset(sql.FieldContainsFold(FieldSiteID, v))
}

// DbVersionEQ applies the EQ predicate on the "db_version" field.
func DbVersionEQ(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldDbVersion, v))
}

// DbVersionNEQ applies the NEQ predicate on the "db_version" field.
func DbVersionNEQ(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldDbVersion, v))
}

// DbVersionIn applies the In predicate on the "db_version" field.
func DbVersionIn(vs ...int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldIn(FieldDbVersion, vs...))
}

// DbVersionNotIn applies the NotIn predicate on the "db_version" field.
func DbVersionNotIn(vs ...int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldNotIn(FieldDbVersion, vs...))
}

// DbVersionGT applies the GT predicate on the "db_version" field.
func DbVersionGT(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldGT(FieldDbVersion, v))
}

// DbVersionGTE applies the GTE predicate on the "db_version" field.
func DbVersionGTE(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldGTE(FieldDbVersion, v))
}

// DbVersionLT applies the LT predicate on the "db_version" field.
func DbVersionLT(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldLT(FieldDbVersion, v))
}

// DbVersionLTE applies the LTE predicate on the "db_version" field.
func DbVersionLTE(v int32) predicate.Changeset {
	return predicate.Changeset(sql.FieldLTE(FieldDbVersion, v))
}

// FirstLaunchEQ applies the EQ predicate on the "first_launch" field.
func FirstLaunchEQ(v bool) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldFirstLaunch, v))
}

// FirstLaunchNEQ applies the NEQ predicate on the "first_launch" field.
func FirstLaunchNEQ(v bool) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldFirstLaunch, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Changeset {
	return predicate.Changeset(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Changeset {
	return predicate.Changeset(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Changeset {
	return predicate.Changeset(sql.FieldNotNull(FieldUserID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Changeset {
	return predicate.Changeset(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Changeset {
	return predicate.Changeset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Changeset {
	return predicate.Changeset(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Changeset) predicate.Changeset {
	return predicate.Changeset(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Changeset) predicate.Changeset {
	return predicate.Changeset(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Changeset) predicate.Changeset {
	return predicate.Changeset(func(s *sql.Selector) {
		p(s.Not())
	})
}
