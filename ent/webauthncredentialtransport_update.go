// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/webauthncredential"
	"github.com/hellohq/hqservice/ent/webauthncredentialtransport"
)

// WebauthnCredentialTransportUpdate is the builder for updating WebauthnCredentialTransport entities.
type WebauthnCredentialTransportUpdate struct {
	config
	hooks    []Hook
	mutation *WebauthnCredentialTransportMutation
}

// Where appends a list predicates to the WebauthnCredentialTransportUpdate builder.
func (wctu *WebauthnCredentialTransportUpdate) Where(ps ...predicate.WebauthnCredentialTransport) *WebauthnCredentialTransportUpdate {
	wctu.mutation.Where(ps...)
	return wctu
}

// SetName sets the "name" field.
func (wctu *WebauthnCredentialTransportUpdate) SetName(s string) *WebauthnCredentialTransportUpdate {
	wctu.mutation.SetName(s)
	return wctu
}

// SetWebauthnCredentialID sets the "webauthn_credential_id" field.
func (wctu *WebauthnCredentialTransportUpdate) SetWebauthnCredentialID(s string) *WebauthnCredentialTransportUpdate {
	wctu.mutation.SetWebauthnCredentialID(s)
	return wctu
}

// SetNillableWebauthnCredentialID sets the "webauthn_credential_id" field if the given value is not nil.
func (wctu *WebauthnCredentialTransportUpdate) SetNillableWebauthnCredentialID(s *string) *WebauthnCredentialTransportUpdate {
	if s != nil {
		wctu.SetWebauthnCredentialID(*s)
	}
	return wctu
}

// ClearWebauthnCredentialID clears the value of the "webauthn_credential_id" field.
func (wctu *WebauthnCredentialTransportUpdate) ClearWebauthnCredentialID() *WebauthnCredentialTransportUpdate {
	wctu.mutation.ClearWebauthnCredentialID()
	return wctu
}

// SetWebauthnCredential sets the "webauthn_credential" edge to the WebauthnCredential entity.
func (wctu *WebauthnCredentialTransportUpdate) SetWebauthnCredential(w *WebauthnCredential) *WebauthnCredentialTransportUpdate {
	return wctu.SetWebauthnCredentialID(w.ID)
}

// Mutation returns the WebauthnCredentialTransportMutation object of the builder.
func (wctu *WebauthnCredentialTransportUpdate) Mutation() *WebauthnCredentialTransportMutation {
	return wctu.mutation
}

// ClearWebauthnCredential clears the "webauthn_credential" edge to the WebauthnCredential entity.
func (wctu *WebauthnCredentialTransportUpdate) ClearWebauthnCredential() *WebauthnCredentialTransportUpdate {
	wctu.mutation.ClearWebauthnCredential()
	return wctu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wctu *WebauthnCredentialTransportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WebauthnCredentialTransportMutation](ctx, wctu.sqlSave, wctu.mutation, wctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wctu *WebauthnCredentialTransportUpdate) SaveX(ctx context.Context) int {
	affected, err := wctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wctu *WebauthnCredentialTransportUpdate) Exec(ctx context.Context) error {
	_, err := wctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wctu *WebauthnCredentialTransportUpdate) ExecX(ctx context.Context) {
	if err := wctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wctu *WebauthnCredentialTransportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(webauthncredentialtransport.Table, webauthncredentialtransport.Columns, sqlgraph.NewFieldSpec(webauthncredentialtransport.FieldID, field.TypeString))
	if ps := wctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wctu.mutation.Name(); ok {
		_spec.SetField(webauthncredentialtransport.FieldName, field.TypeString, value)
	}
	if wctu.mutation.WebauthnCredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredentialtransport.WebauthnCredentialTable,
			Columns: []string{webauthncredentialtransport.WebauthnCredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: webauthncredential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wctu.mutation.WebauthnCredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredentialtransport.WebauthnCredentialTable,
			Columns: []string{webauthncredentialtransport.WebauthnCredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthncredentialtransport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wctu.mutation.done = true
	return n, nil
}

// WebauthnCredentialTransportUpdateOne is the builder for updating a single WebauthnCredentialTransport entity.
type WebauthnCredentialTransportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebauthnCredentialTransportMutation
}

// SetName sets the "name" field.
func (wctuo *WebauthnCredentialTransportUpdateOne) SetName(s string) *WebauthnCredentialTransportUpdateOne {
	wctuo.mutation.SetName(s)
	return wctuo
}

// SetWebauthnCredentialID sets the "webauthn_credential_id" field.
func (wctuo *WebauthnCredentialTransportUpdateOne) SetWebauthnCredentialID(s string) *WebauthnCredentialTransportUpdateOne {
	wctuo.mutation.SetWebauthnCredentialID(s)
	return wctuo
}

// SetNillableWebauthnCredentialID sets the "webauthn_credential_id" field if the given value is not nil.
func (wctuo *WebauthnCredentialTransportUpdateOne) SetNillableWebauthnCredentialID(s *string) *WebauthnCredentialTransportUpdateOne {
	if s != nil {
		wctuo.SetWebauthnCredentialID(*s)
	}
	return wctuo
}

// ClearWebauthnCredentialID clears the value of the "webauthn_credential_id" field.
func (wctuo *WebauthnCredentialTransportUpdateOne) ClearWebauthnCredentialID() *WebauthnCredentialTransportUpdateOne {
	wctuo.mutation.ClearWebauthnCredentialID()
	return wctuo
}

// SetWebauthnCredential sets the "webauthn_credential" edge to the WebauthnCredential entity.
func (wctuo *WebauthnCredentialTransportUpdateOne) SetWebauthnCredential(w *WebauthnCredential) *WebauthnCredentialTransportUpdateOne {
	return wctuo.SetWebauthnCredentialID(w.ID)
}

// Mutation returns the WebauthnCredentialTransportMutation object of the builder.
func (wctuo *WebauthnCredentialTransportUpdateOne) Mutation() *WebauthnCredentialTransportMutation {
	return wctuo.mutation
}

// ClearWebauthnCredential clears the "webauthn_credential" edge to the WebauthnCredential entity.
func (wctuo *WebauthnCredentialTransportUpdateOne) ClearWebauthnCredential() *WebauthnCredentialTransportUpdateOne {
	wctuo.mutation.ClearWebauthnCredential()
	return wctuo
}

// Where appends a list predicates to the WebauthnCredentialTransportUpdate builder.
func (wctuo *WebauthnCredentialTransportUpdateOne) Where(ps ...predicate.WebauthnCredentialTransport) *WebauthnCredentialTransportUpdateOne {
	wctuo.mutation.Where(ps...)
	return wctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wctuo *WebauthnCredentialTransportUpdateOne) Select(field string, fields ...string) *WebauthnCredentialTransportUpdateOne {
	wctuo.fields = append([]string{field}, fields...)
	return wctuo
}

// Save executes the query and returns the updated WebauthnCredentialTransport entity.
func (wctuo *WebauthnCredentialTransportUpdateOne) Save(ctx context.Context) (*WebauthnCredentialTransport, error) {
	return withHooks[*WebauthnCredentialTransport, WebauthnCredentialTransportMutation](ctx, wctuo.sqlSave, wctuo.mutation, wctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wctuo *WebauthnCredentialTransportUpdateOne) SaveX(ctx context.Context) *WebauthnCredentialTransport {
	node, err := wctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wctuo *WebauthnCredentialTransportUpdateOne) Exec(ctx context.Context) error {
	_, err := wctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wctuo *WebauthnCredentialTransportUpdateOne) ExecX(ctx context.Context) {
	if err := wctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wctuo *WebauthnCredentialTransportUpdateOne) sqlSave(ctx context.Context) (_node *WebauthnCredentialTransport, err error) {
	_spec := sqlgraph.NewUpdateSpec(webauthncredentialtransport.Table, webauthncredentialtransport.Columns, sqlgraph.NewFieldSpec(webauthncredentialtransport.FieldID, field.TypeString))
	id, ok := wctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WebauthnCredentialTransport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webauthncredentialtransport.FieldID)
		for _, f := range fields {
			if !webauthncredentialtransport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webauthncredentialtransport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wctuo.mutation.Name(); ok {
		_spec.SetField(webauthncredentialtransport.FieldName, field.TypeString, value)
	}
	if wctuo.mutation.WebauthnCredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredentialtransport.WebauthnCredentialTable,
			Columns: []string{webauthncredentialtransport.WebauthnCredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: webauthncredential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wctuo.mutation.WebauthnCredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredentialtransport.WebauthnCredentialTable,
			Columns: []string{webauthncredentialtransport.WebauthnCredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WebauthnCredentialTransport{config: wctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthncredentialtransport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wctuo.mutation.done = true
	return _node, nil
}
