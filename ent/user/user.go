// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeEmails holds the string denoting the emails edge name in mutations.
	EdgeEmails = "emails"
	// EdgePasscodes holds the string denoting the passcodes edge name in mutations.
	EdgePasscodes = "passcodes"
	// EdgeWebauthnCredentials holds the string denoting the webauthn_credentials edge name in mutations.
	EdgeWebauthnCredentials = "webauthn_credentials"
	// EdgeAssetTables holds the string denoting the asset_tables edge name in mutations.
	EdgeAssetTables = "asset_tables"
	// EdgePrimaryEmail holds the string denoting the primary_email edge name in mutations.
	EdgePrimaryEmail = "primary_email"
	// EdgeFvSession holds the string denoting the fv_session edge name in mutations.
	EdgeFvSession = "fv_session"
	// Table holds the table name of the user in the database.
	Table = "users"
	// EmailsTable is the table that holds the emails relation/edge.
	EmailsTable = "emails"
	// EmailsInverseTable is the table name for the Email entity.
	// It exists in this package in order to avoid circular dependency with the "email" package.
	EmailsInverseTable = "emails"
	// EmailsColumn is the table column denoting the emails relation/edge.
	EmailsColumn = "user_id"
	// PasscodesTable is the table that holds the passcodes relation/edge.
	PasscodesTable = "passcodes"
	// PasscodesInverseTable is the table name for the Passcode entity.
	// It exists in this package in order to avoid circular dependency with the "passcode" package.
	PasscodesInverseTable = "passcodes"
	// PasscodesColumn is the table column denoting the passcodes relation/edge.
	PasscodesColumn = "user_id"
	// WebauthnCredentialsTable is the table that holds the webauthn_credentials relation/edge.
	WebauthnCredentialsTable = "webauthn_credentials"
	// WebauthnCredentialsInverseTable is the table name for the WebauthnCredential entity.
	// It exists in this package in order to avoid circular dependency with the "webauthncredential" package.
	WebauthnCredentialsInverseTable = "webauthn_credentials"
	// WebauthnCredentialsColumn is the table column denoting the webauthn_credentials relation/edge.
	WebauthnCredentialsColumn = "user_id"
	// AssetTablesTable is the table that holds the asset_tables relation/edge.
	AssetTablesTable = "asset_tables"
	// AssetTablesInverseTable is the table name for the AssetTable entity.
	// It exists in this package in order to avoid circular dependency with the "assettable" package.
	AssetTablesInverseTable = "asset_tables"
	// AssetTablesColumn is the table column denoting the asset_tables relation/edge.
	AssetTablesColumn = "user_id"
	// PrimaryEmailTable is the table that holds the primary_email relation/edge.
	PrimaryEmailTable = "primary_emails"
	// PrimaryEmailInverseTable is the table name for the PrimaryEmail entity.
	// It exists in this package in order to avoid circular dependency with the "primaryemail" package.
	PrimaryEmailInverseTable = "primary_emails"
	// PrimaryEmailColumn is the table column denoting the primary_email relation/edge.
	PrimaryEmailColumn = "user_id"
	// FvSessionTable is the table that holds the fv_session relation/edge.
	FvSessionTable = "fv_sessions"
	// FvSessionInverseTable is the table name for the FvSession entity.
	// It exists in this package in order to avoid circular dependency with the "fvsession" package.
	FvSessionInverseTable = "fv_sessions"
	// FvSessionColumn is the table column denoting the fv_session relation/edge.
	FvSessionColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmailsCount orders the results by emails count.
func ByEmailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmailsStep(), opts...)
	}
}

// ByEmails orders the results by emails terms.
func ByEmails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPasscodesCount orders the results by passcodes count.
func ByPasscodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPasscodesStep(), opts...)
	}
}

// ByPasscodes orders the results by passcodes terms.
func ByPasscodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPasscodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWebauthnCredentialsCount orders the results by webauthn_credentials count.
func ByWebauthnCredentialsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWebauthnCredentialsStep(), opts...)
	}
}

// ByWebauthnCredentials orders the results by webauthn_credentials terms.
func ByWebauthnCredentials(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebauthnCredentialsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssetTablesCount orders the results by asset_tables count.
func ByAssetTablesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetTablesStep(), opts...)
	}
}

// ByAssetTables orders the results by asset_tables terms.
func ByAssetTables(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetTablesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrimaryEmailField orders the results by primary_email field.
func ByPrimaryEmailField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrimaryEmailStep(), sql.OrderByField(field, opts...))
	}
}

// ByFvSessionField orders the results by fv_session field.
func ByFvSessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFvSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newEmailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmailsTable, EmailsColumn),
	)
}
func newPasscodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PasscodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PasscodesTable, PasscodesColumn),
	)
}
func newWebauthnCredentialsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebauthnCredentialsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WebauthnCredentialsTable, WebauthnCredentialsColumn),
	)
}
func newAssetTablesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetTablesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetTablesTable, AssetTablesColumn),
	)
}
func newPrimaryEmailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrimaryEmailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PrimaryEmailTable, PrimaryEmailColumn),
	)
}
func newFvSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FvSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, FvSessionTable, FvSessionColumn),
	)
}
