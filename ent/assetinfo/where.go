// Code generated by ent, DO NOT EDIT.

package assetinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLTE(FieldID, id))
}

// SensibleData applies equality check predicate on the "sensible_data" field. It's identical to SensibleDataEQ.
func SensibleData(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldSensibleData, v))
}

// Descriptions applies equality check predicate on the "descriptions" field. It's identical to DescriptionsEQ.
func Descriptions(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldDescriptions, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// SensibleDataEQ applies the EQ predicate on the "sensible_data" field.
func SensibleDataEQ(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldSensibleData, v))
}

// SensibleDataNEQ applies the NEQ predicate on the "sensible_data" field.
func SensibleDataNEQ(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNEQ(FieldSensibleData, v))
}

// SensibleDataIn applies the In predicate on the "sensible_data" field.
func SensibleDataIn(vs ...string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldIn(FieldSensibleData, vs...))
}

// SensibleDataNotIn applies the NotIn predicate on the "sensible_data" field.
func SensibleDataNotIn(vs ...string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNotIn(FieldSensibleData, vs...))
}

// SensibleDataGT applies the GT predicate on the "sensible_data" field.
func SensibleDataGT(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGT(FieldSensibleData, v))
}

// SensibleDataGTE applies the GTE predicate on the "sensible_data" field.
func SensibleDataGTE(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGTE(FieldSensibleData, v))
}

// SensibleDataLT applies the LT predicate on the "sensible_data" field.
func SensibleDataLT(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLT(FieldSensibleData, v))
}

// SensibleDataLTE applies the LTE predicate on the "sensible_data" field.
func SensibleDataLTE(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLTE(FieldSensibleData, v))
}

// SensibleDataContains applies the Contains predicate on the "sensible_data" field.
func SensibleDataContains(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldContains(FieldSensibleData, v))
}

// SensibleDataHasPrefix applies the HasPrefix predicate on the "sensible_data" field.
func SensibleDataHasPrefix(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldHasPrefix(FieldSensibleData, v))
}

// SensibleDataHasSuffix applies the HasSuffix predicate on the "sensible_data" field.
func SensibleDataHasSuffix(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldHasSuffix(FieldSensibleData, v))
}

// SensibleDataEqualFold applies the EqualFold predicate on the "sensible_data" field.
func SensibleDataEqualFold(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEqualFold(FieldSensibleData, v))
}

// SensibleDataContainsFold applies the ContainsFold predicate on the "sensible_data" field.
func SensibleDataContainsFold(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldContainsFold(FieldSensibleData, v))
}

// DescriptionsEQ applies the EQ predicate on the "descriptions" field.
func DescriptionsEQ(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldDescriptions, v))
}

// DescriptionsNEQ applies the NEQ predicate on the "descriptions" field.
func DescriptionsNEQ(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNEQ(FieldDescriptions, v))
}

// DescriptionsIn applies the In predicate on the "descriptions" field.
func DescriptionsIn(vs ...string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldIn(FieldDescriptions, vs...))
}

// DescriptionsNotIn applies the NotIn predicate on the "descriptions" field.
func DescriptionsNotIn(vs ...string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNotIn(FieldDescriptions, vs...))
}

// DescriptionsGT applies the GT predicate on the "descriptions" field.
func DescriptionsGT(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGT(FieldDescriptions, v))
}

// DescriptionsGTE applies the GTE predicate on the "descriptions" field.
func DescriptionsGTE(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGTE(FieldDescriptions, v))
}

// DescriptionsLT applies the LT predicate on the "descriptions" field.
func DescriptionsLT(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLT(FieldDescriptions, v))
}

// DescriptionsLTE applies the LTE predicate on the "descriptions" field.
func DescriptionsLTE(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLTE(FieldDescriptions, v))
}

// DescriptionsContains applies the Contains predicate on the "descriptions" field.
func DescriptionsContains(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldContains(FieldDescriptions, v))
}

// DescriptionsHasPrefix applies the HasPrefix predicate on the "descriptions" field.
func DescriptionsHasPrefix(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldHasPrefix(FieldDescriptions, v))
}

// DescriptionsHasSuffix applies the HasSuffix predicate on the "descriptions" field.
func DescriptionsHasSuffix(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldHasSuffix(FieldDescriptions, v))
}

// DescriptionsEqualFold applies the EqualFold predicate on the "descriptions" field.
func DescriptionsEqualFold(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEqualFold(FieldDescriptions, v))
}

// DescriptionsContainsFold applies the ContainsFold predicate on the "descriptions" field.
func DescriptionsContainsFold(v string) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldContainsFold(FieldDescriptions, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetInfo {
	return predicate.AssetInfo(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetInfo) predicate.AssetInfo {
	return predicate.AssetInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetInfo) predicate.AssetInfo {
	return predicate.AssetInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetInfo) predicate.AssetInfo {
	return predicate.AssetInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
