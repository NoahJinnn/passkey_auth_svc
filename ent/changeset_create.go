// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/NoahJinnn/passkey_auth_svc/ent/changeset"
	"github.com/NoahJinnn/passkey_auth_svc/ent/user"
)

// ChangesetCreate is the builder for creating a Changeset entity.
type ChangesetCreate struct {
	config
	mutation *ChangesetMutation
	hooks    []Hook
}

// SetSiteID sets the "site_id" field.
func (cc *ChangesetCreate) SetSiteID(s string) *ChangesetCreate {
	cc.mutation.SetSiteID(s)
	return cc
}

// SetDbVersion sets the "db_version" field.
func (cc *ChangesetCreate) SetDbVersion(i int32) *ChangesetCreate {
	cc.mutation.SetDbVersion(i)
	return cc
}

// SetFirstLaunch sets the "first_launch" field.
func (cc *ChangesetCreate) SetFirstLaunch(b bool) *ChangesetCreate {
	cc.mutation.SetFirstLaunch(b)
	return cc
}

// SetNillableFirstLaunch sets the "first_launch" field if the given value is not nil.
func (cc *ChangesetCreate) SetNillableFirstLaunch(b *bool) *ChangesetCreate {
	if b != nil {
		cc.SetFirstLaunch(*b)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ChangesetCreate) SetUserID(u uuid.UUID) *ChangesetCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *ChangesetCreate) SetNillableUserID(u *uuid.UUID) *ChangesetCreate {
	if u != nil {
		cc.SetUserID(*u)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChangesetCreate) SetCreatedAt(t time.Time) *ChangesetCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChangesetCreate) SetNillableCreatedAt(t *time.Time) *ChangesetCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChangesetCreate) SetUpdatedAt(t time.Time) *ChangesetCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChangesetCreate) SetNillableUpdatedAt(t *time.Time) *ChangesetCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChangesetCreate) SetID(u uuid.UUID) *ChangesetCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ChangesetCreate) SetNillableID(u *uuid.UUID) *ChangesetCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *ChangesetCreate) SetUser(u *User) *ChangesetCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the ChangesetMutation object of the builder.
func (cc *ChangesetCreate) Mutation() *ChangesetMutation {
	return cc.mutation
}

// Save creates the Changeset in the database.
func (cc *ChangesetCreate) Save(ctx context.Context) (*Changeset, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChangesetCreate) SaveX(ctx context.Context) *Changeset {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChangesetCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChangesetCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChangesetCreate) defaults() {
	if _, ok := cc.mutation.FirstLaunch(); !ok {
		v := changeset.DefaultFirstLaunch
		cc.mutation.SetFirstLaunch(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := changeset.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := changeset.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := changeset.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChangesetCreate) check() error {
	if _, ok := cc.mutation.SiteID(); !ok {
		return &ValidationError{Name: "site_id", err: errors.New(`ent: missing required field "Changeset.site_id"`)}
	}
	if _, ok := cc.mutation.DbVersion(); !ok {
		return &ValidationError{Name: "db_version", err: errors.New(`ent: missing required field "Changeset.db_version"`)}
	}
	if _, ok := cc.mutation.FirstLaunch(); !ok {
		return &ValidationError{Name: "first_launch", err: errors.New(`ent: missing required field "Changeset.first_launch"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Changeset.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Changeset.updated_at"`)}
	}
	return nil
}

func (cc *ChangesetCreate) sqlSave(ctx context.Context) (*Changeset, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChangesetCreate) createSpec() (*Changeset, *sqlgraph.CreateSpec) {
	var (
		_node = &Changeset{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(changeset.Table, sqlgraph.NewFieldSpec(changeset.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.SiteID(); ok {
		_spec.SetField(changeset.FieldSiteID, field.TypeString, value)
		_node.SiteID = value
	}
	if value, ok := cc.mutation.DbVersion(); ok {
		_spec.SetField(changeset.FieldDbVersion, field.TypeInt32, value)
		_node.DbVersion = value
	}
	if value, ok := cc.mutation.FirstLaunch(); ok {
		_spec.SetField(changeset.FieldFirstLaunch, field.TypeBool, value)
		_node.FirstLaunch = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(changeset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(changeset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   changeset.UserTable,
			Columns: []string{changeset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChangesetCreateBulk is the builder for creating many Changeset entities in bulk.
type ChangesetCreateBulk struct {
	config
	builders []*ChangesetCreate
}

// Save creates the Changeset entities in the database.
func (ccb *ChangesetCreateBulk) Save(ctx context.Context) ([]*Changeset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Changeset, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangesetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChangesetCreateBulk) SaveX(ctx context.Context) []*Changeset {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChangesetCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChangesetCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
