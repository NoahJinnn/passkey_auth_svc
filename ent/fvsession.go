// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/fvsession"
	"github.com/hellohq/hqservice/ent/user"
)

// FvSession is the model entity for the FvSession schema.
type FvSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// ExpiresIn holds the value of the "expires_in" field.
	ExpiresIn int32 `json:"expires_in,omitempty"`
	// IssuedAt holds the value of the "issued_at" field.
	IssuedAt string `json:"issued_at,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType string `json:"token_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FvSessionQuery when eager-loading is set.
	Edges        FvSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FvSessionEdges holds the relations/edges for other nodes in the graph.
type FvSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FvSessionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FvSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fvsession.FieldExpiresIn:
			values[i] = new(sql.NullInt64)
		case fvsession.FieldAccessToken, fvsession.FieldIssuedAt, fvsession.FieldTokenType:
			values[i] = new(sql.NullString)
		case fvsession.FieldCreatedAt, fvsession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fvsession.FieldID, fvsession.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FvSession fields.
func (fs *FvSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fvsession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fs.ID = *value
			}
		case fvsession.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				fs.UserID = *value
			}
		case fvsession.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				fs.AccessToken = value.String
			}
		case fvsession.FieldExpiresIn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expires_in", values[i])
			} else if value.Valid {
				fs.ExpiresIn = int32(value.Int64)
			}
		case fvsession.FieldIssuedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issued_at", values[i])
			} else if value.Valid {
				fs.IssuedAt = value.String
			}
		case fvsession.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				fs.TokenType = value.String
			}
		case fvsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fs.CreatedAt = value.Time
			}
		case fvsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fs.UpdatedAt = value.Time
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FvSession.
// This includes values selected through modifiers, order, etc.
func (fs *FvSession) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the FvSession entity.
func (fs *FvSession) QueryUser() *UserQuery {
	return NewFvSessionClient(fs.config).QueryUser(fs)
}

// Update returns a builder for updating this FvSession.
// Note that you need to call FvSession.Unwrap() before calling this method if this FvSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FvSession) Update() *FvSessionUpdateOne {
	return NewFvSessionClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FvSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FvSession) Unwrap() *FvSession {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FvSession is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FvSession) String() string {
	var builder strings.Builder
	builder.WriteString("FvSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", fs.UserID))
	builder.WriteString(", ")
	builder.WriteString("access_token=")
	builder.WriteString(fs.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("expires_in=")
	builder.WriteString(fmt.Sprintf("%v", fs.ExpiresIn))
	builder.WriteString(", ")
	builder.WriteString("issued_at=")
	builder.WriteString(fs.IssuedAt)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(fs.TokenType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fs.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FvSessions is a parsable slice of FvSession.
type FvSessions []*FvSession
