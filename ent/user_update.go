// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/bankaccount"
	"github.com/hellohq/hqservice/ent/car"
	"github.com/hellohq/hqservice/ent/collectible"
	"github.com/hellohq/hqservice/ent/cryptoaccount"
	"github.com/hellohq/hqservice/ent/loan"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/privateshare"
	"github.com/hellohq/hqservice/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// AddBankAccountIDs adds the "bank_accounts" edge to the BankAccount entity by IDs.
func (uu *UserUpdate) AddBankAccountIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddBankAccountIDs(ids...)
	return uu
}

// AddBankAccounts adds the "bank_accounts" edges to the BankAccount entity.
func (uu *UserUpdate) AddBankAccounts(b ...*BankAccount) *UserUpdate {
	ids := make([]uint, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBankAccountIDs(ids...)
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (uu *UserUpdate) AddCarIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddCarIDs(ids...)
	return uu
}

// AddCars adds the "cars" edges to the Car entity.
func (uu *UserUpdate) AddCars(c ...*Car) *UserUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCarIDs(ids...)
}

// AddCollectibleIDs adds the "collectibles" edge to the Collectible entity by IDs.
func (uu *UserUpdate) AddCollectibleIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddCollectibleIDs(ids...)
	return uu
}

// AddCollectibles adds the "collectibles" edges to the Collectible entity.
func (uu *UserUpdate) AddCollectibles(c ...*Collectible) *UserUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCollectibleIDs(ids...)
}

// AddCryptoAccountIDs adds the "crypto_accounts" edge to the CryptoAccount entity by IDs.
func (uu *UserUpdate) AddCryptoAccountIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddCryptoAccountIDs(ids...)
	return uu
}

// AddCryptoAccounts adds the "crypto_accounts" edges to the CryptoAccount entity.
func (uu *UserUpdate) AddCryptoAccounts(c ...*CryptoAccount) *UserUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCryptoAccountIDs(ids...)
}

// AddLoanIDs adds the "loans" edge to the Loan entity by IDs.
func (uu *UserUpdate) AddLoanIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddLoanIDs(ids...)
	return uu
}

// AddLoans adds the "loans" edges to the Loan entity.
func (uu *UserUpdate) AddLoans(l ...*Loan) *UserUpdate {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLoanIDs(ids...)
}

// AddPrivateShareIDs adds the "private_shares" edge to the PrivateShare entity by IDs.
func (uu *UserUpdate) AddPrivateShareIDs(ids ...uint) *UserUpdate {
	uu.mutation.AddPrivateShareIDs(ids...)
	return uu
}

// AddPrivateShares adds the "private_shares" edges to the PrivateShare entity.
func (uu *UserUpdate) AddPrivateShares(p ...*PrivateShare) *UserUpdate {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPrivateShareIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBankAccounts clears all "bank_accounts" edges to the BankAccount entity.
func (uu *UserUpdate) ClearBankAccounts() *UserUpdate {
	uu.mutation.ClearBankAccounts()
	return uu
}

// RemoveBankAccountIDs removes the "bank_accounts" edge to BankAccount entities by IDs.
func (uu *UserUpdate) RemoveBankAccountIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveBankAccountIDs(ids...)
	return uu
}

// RemoveBankAccounts removes "bank_accounts" edges to BankAccount entities.
func (uu *UserUpdate) RemoveBankAccounts(b ...*BankAccount) *UserUpdate {
	ids := make([]uint, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBankAccountIDs(ids...)
}

// ClearCars clears all "cars" edges to the Car entity.
func (uu *UserUpdate) ClearCars() *UserUpdate {
	uu.mutation.ClearCars()
	return uu
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (uu *UserUpdate) RemoveCarIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveCarIDs(ids...)
	return uu
}

// RemoveCars removes "cars" edges to Car entities.
func (uu *UserUpdate) RemoveCars(c ...*Car) *UserUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCarIDs(ids...)
}

// ClearCollectibles clears all "collectibles" edges to the Collectible entity.
func (uu *UserUpdate) ClearCollectibles() *UserUpdate {
	uu.mutation.ClearCollectibles()
	return uu
}

// RemoveCollectibleIDs removes the "collectibles" edge to Collectible entities by IDs.
func (uu *UserUpdate) RemoveCollectibleIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveCollectibleIDs(ids...)
	return uu
}

// RemoveCollectibles removes "collectibles" edges to Collectible entities.
func (uu *UserUpdate) RemoveCollectibles(c ...*Collectible) *UserUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCollectibleIDs(ids...)
}

// ClearCryptoAccounts clears all "crypto_accounts" edges to the CryptoAccount entity.
func (uu *UserUpdate) ClearCryptoAccounts() *UserUpdate {
	uu.mutation.ClearCryptoAccounts()
	return uu
}

// RemoveCryptoAccountIDs removes the "crypto_accounts" edge to CryptoAccount entities by IDs.
func (uu *UserUpdate) RemoveCryptoAccountIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveCryptoAccountIDs(ids...)
	return uu
}

// RemoveCryptoAccounts removes "crypto_accounts" edges to CryptoAccount entities.
func (uu *UserUpdate) RemoveCryptoAccounts(c ...*CryptoAccount) *UserUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCryptoAccountIDs(ids...)
}

// ClearLoans clears all "loans" edges to the Loan entity.
func (uu *UserUpdate) ClearLoans() *UserUpdate {
	uu.mutation.ClearLoans()
	return uu
}

// RemoveLoanIDs removes the "loans" edge to Loan entities by IDs.
func (uu *UserUpdate) RemoveLoanIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemoveLoanIDs(ids...)
	return uu
}

// RemoveLoans removes "loans" edges to Loan entities.
func (uu *UserUpdate) RemoveLoans(l ...*Loan) *UserUpdate {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLoanIDs(ids...)
}

// ClearPrivateShares clears all "private_shares" edges to the PrivateShare entity.
func (uu *UserUpdate) ClearPrivateShares() *UserUpdate {
	uu.mutation.ClearPrivateShares()
	return uu
}

// RemovePrivateShareIDs removes the "private_shares" edge to PrivateShare entities by IDs.
func (uu *UserUpdate) RemovePrivateShareIDs(ids ...uint) *UserUpdate {
	uu.mutation.RemovePrivateShareIDs(ids...)
	return uu
}

// RemovePrivateShares removes "private_shares" edges to PrivateShare entities.
func (uu *UserUpdate) RemovePrivateShares(p ...*PrivateShare) *UserUpdate {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePrivateShareIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uu.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !uu.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCarsIDs(); len(nodes) > 0 && !uu.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CollectiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectiblesTable,
			Columns: []string{user.CollectiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: collectible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCollectiblesIDs(); len(nodes) > 0 && !uu.mutation.CollectiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectiblesTable,
			Columns: []string{user.CollectiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: collectible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CollectiblesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectiblesTable,
			Columns: []string{user.CollectiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: collectible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CryptoAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CryptoAccountsTable,
			Columns: []string{user.CryptoAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: cryptoaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCryptoAccountsIDs(); len(nodes) > 0 && !uu.mutation.CryptoAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CryptoAccountsTable,
			Columns: []string{user.CryptoAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: cryptoaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CryptoAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CryptoAccountsTable,
			Columns: []string{user.CryptoAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: cryptoaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LoansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoansTable,
			Columns: []string{user.LoansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: loan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLoansIDs(); len(nodes) > 0 && !uu.mutation.LoansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoansTable,
			Columns: []string{user.LoansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: loan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LoansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoansTable,
			Columns: []string{user.LoansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: loan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PrivateSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrivateSharesTable,
			Columns: []string{user.PrivateSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: privateshare.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPrivateSharesIDs(); len(nodes) > 0 && !uu.mutation.PrivateSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrivateSharesTable,
			Columns: []string{user.PrivateSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: privateshare.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PrivateSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrivateSharesTable,
			Columns: []string{user.PrivateSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: privateshare.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// AddBankAccountIDs adds the "bank_accounts" edge to the BankAccount entity by IDs.
func (uuo *UserUpdateOne) AddBankAccountIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddBankAccountIDs(ids...)
	return uuo
}

// AddBankAccounts adds the "bank_accounts" edges to the BankAccount entity.
func (uuo *UserUpdateOne) AddBankAccounts(b ...*BankAccount) *UserUpdateOne {
	ids := make([]uint, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBankAccountIDs(ids...)
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (uuo *UserUpdateOne) AddCarIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddCarIDs(ids...)
	return uuo
}

// AddCars adds the "cars" edges to the Car entity.
func (uuo *UserUpdateOne) AddCars(c ...*Car) *UserUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCarIDs(ids...)
}

// AddCollectibleIDs adds the "collectibles" edge to the Collectible entity by IDs.
func (uuo *UserUpdateOne) AddCollectibleIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddCollectibleIDs(ids...)
	return uuo
}

// AddCollectibles adds the "collectibles" edges to the Collectible entity.
func (uuo *UserUpdateOne) AddCollectibles(c ...*Collectible) *UserUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCollectibleIDs(ids...)
}

// AddCryptoAccountIDs adds the "crypto_accounts" edge to the CryptoAccount entity by IDs.
func (uuo *UserUpdateOne) AddCryptoAccountIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddCryptoAccountIDs(ids...)
	return uuo
}

// AddCryptoAccounts adds the "crypto_accounts" edges to the CryptoAccount entity.
func (uuo *UserUpdateOne) AddCryptoAccounts(c ...*CryptoAccount) *UserUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCryptoAccountIDs(ids...)
}

// AddLoanIDs adds the "loans" edge to the Loan entity by IDs.
func (uuo *UserUpdateOne) AddLoanIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddLoanIDs(ids...)
	return uuo
}

// AddLoans adds the "loans" edges to the Loan entity.
func (uuo *UserUpdateOne) AddLoans(l ...*Loan) *UserUpdateOne {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLoanIDs(ids...)
}

// AddPrivateShareIDs adds the "private_shares" edge to the PrivateShare entity by IDs.
func (uuo *UserUpdateOne) AddPrivateShareIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.AddPrivateShareIDs(ids...)
	return uuo
}

// AddPrivateShares adds the "private_shares" edges to the PrivateShare entity.
func (uuo *UserUpdateOne) AddPrivateShares(p ...*PrivateShare) *UserUpdateOne {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPrivateShareIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBankAccounts clears all "bank_accounts" edges to the BankAccount entity.
func (uuo *UserUpdateOne) ClearBankAccounts() *UserUpdateOne {
	uuo.mutation.ClearBankAccounts()
	return uuo
}

// RemoveBankAccountIDs removes the "bank_accounts" edge to BankAccount entities by IDs.
func (uuo *UserUpdateOne) RemoveBankAccountIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveBankAccountIDs(ids...)
	return uuo
}

// RemoveBankAccounts removes "bank_accounts" edges to BankAccount entities.
func (uuo *UserUpdateOne) RemoveBankAccounts(b ...*BankAccount) *UserUpdateOne {
	ids := make([]uint, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBankAccountIDs(ids...)
}

// ClearCars clears all "cars" edges to the Car entity.
func (uuo *UserUpdateOne) ClearCars() *UserUpdateOne {
	uuo.mutation.ClearCars()
	return uuo
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (uuo *UserUpdateOne) RemoveCarIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveCarIDs(ids...)
	return uuo
}

// RemoveCars removes "cars" edges to Car entities.
func (uuo *UserUpdateOne) RemoveCars(c ...*Car) *UserUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCarIDs(ids...)
}

// ClearCollectibles clears all "collectibles" edges to the Collectible entity.
func (uuo *UserUpdateOne) ClearCollectibles() *UserUpdateOne {
	uuo.mutation.ClearCollectibles()
	return uuo
}

// RemoveCollectibleIDs removes the "collectibles" edge to Collectible entities by IDs.
func (uuo *UserUpdateOne) RemoveCollectibleIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveCollectibleIDs(ids...)
	return uuo
}

// RemoveCollectibles removes "collectibles" edges to Collectible entities.
func (uuo *UserUpdateOne) RemoveCollectibles(c ...*Collectible) *UserUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCollectibleIDs(ids...)
}

// ClearCryptoAccounts clears all "crypto_accounts" edges to the CryptoAccount entity.
func (uuo *UserUpdateOne) ClearCryptoAccounts() *UserUpdateOne {
	uuo.mutation.ClearCryptoAccounts()
	return uuo
}

// RemoveCryptoAccountIDs removes the "crypto_accounts" edge to CryptoAccount entities by IDs.
func (uuo *UserUpdateOne) RemoveCryptoAccountIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveCryptoAccountIDs(ids...)
	return uuo
}

// RemoveCryptoAccounts removes "crypto_accounts" edges to CryptoAccount entities.
func (uuo *UserUpdateOne) RemoveCryptoAccounts(c ...*CryptoAccount) *UserUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCryptoAccountIDs(ids...)
}

// ClearLoans clears all "loans" edges to the Loan entity.
func (uuo *UserUpdateOne) ClearLoans() *UserUpdateOne {
	uuo.mutation.ClearLoans()
	return uuo
}

// RemoveLoanIDs removes the "loans" edge to Loan entities by IDs.
func (uuo *UserUpdateOne) RemoveLoanIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemoveLoanIDs(ids...)
	return uuo
}

// RemoveLoans removes "loans" edges to Loan entities.
func (uuo *UserUpdateOne) RemoveLoans(l ...*Loan) *UserUpdateOne {
	ids := make([]uint, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLoanIDs(ids...)
}

// ClearPrivateShares clears all "private_shares" edges to the PrivateShare entity.
func (uuo *UserUpdateOne) ClearPrivateShares() *UserUpdateOne {
	uuo.mutation.ClearPrivateShares()
	return uuo
}

// RemovePrivateShareIDs removes the "private_shares" edge to PrivateShare entities by IDs.
func (uuo *UserUpdateOne) RemovePrivateShareIDs(ids ...uint) *UserUpdateOne {
	uuo.mutation.RemovePrivateShareIDs(ids...)
	return uuo
}

// RemovePrivateShares removes "private_shares" edges to PrivateShare entities.
func (uuo *UserUpdateOne) RemovePrivateShares(p ...*PrivateShare) *UserUpdateOne {
	ids := make([]uint, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePrivateShareIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uuo.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: bankaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBankAccountsIDs(); len(nodes) > 0 && !uuo.mutation.BankAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BankAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BankAccountsTable,
			Columns: []string{user.BankAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: bankaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCarsIDs(); len(nodes) > 0 && !uuo.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CollectiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectiblesTable,
			Columns: []string{user.CollectiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: collectible.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCollectiblesIDs(); len(nodes) > 0 && !uuo.mutation.CollectiblesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectiblesTable,
			Columns: []string{user.CollectiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: collectible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CollectiblesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CollectiblesTable,
			Columns: []string{user.CollectiblesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: collectible.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CryptoAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CryptoAccountsTable,
			Columns: []string{user.CryptoAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: cryptoaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCryptoAccountsIDs(); len(nodes) > 0 && !uuo.mutation.CryptoAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CryptoAccountsTable,
			Columns: []string{user.CryptoAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: cryptoaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CryptoAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CryptoAccountsTable,
			Columns: []string{user.CryptoAccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: cryptoaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LoansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoansTable,
			Columns: []string{user.LoansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: loan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLoansIDs(); len(nodes) > 0 && !uuo.mutation.LoansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoansTable,
			Columns: []string{user.LoansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: loan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LoansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoansTable,
			Columns: []string{user.LoansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: loan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PrivateSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrivateSharesTable,
			Columns: []string{user.PrivateSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: privateshare.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPrivateSharesIDs(); len(nodes) > 0 && !uuo.mutation.PrivateSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrivateSharesTable,
			Columns: []string{user.PrivateSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: privateshare.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PrivateSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PrivateSharesTable,
			Columns: []string{user.PrivateSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: privateshare.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
