// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/loan"
	"github.com/hellohq/hqservice/ent/user"
)

// LoanCreate is the builder for creating a Loan entity.
type LoanCreate struct {
	config
	mutation *LoanMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (lc *LoanCreate) SetUserID(u uint) *LoanCreate {
	lc.mutation.SetUserID(u)
	return lc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lc *LoanCreate) SetNillableUserID(u *uint) *LoanCreate {
	if u != nil {
		lc.SetUserID(*u)
	}
	return lc
}

// SetLenderName sets the "lender_name" field.
func (lc *LoanCreate) SetLenderName(s string) *LoanCreate {
	lc.mutation.SetLenderName(s)
	return lc
}

// SetLoanType sets the "loan_type" field.
func (lc *LoanCreate) SetLoanType(s string) *LoanCreate {
	lc.mutation.SetLoanType(s)
	return lc
}

// SetBalance sets the "balance" field.
func (lc *LoanCreate) SetBalance(f float64) *LoanCreate {
	lc.mutation.SetBalance(f)
	return lc
}

// SetInterestRate sets the "interest_rate" field.
func (lc *LoanCreate) SetInterestRate(f float64) *LoanCreate {
	lc.mutation.SetInterestRate(f)
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LoanCreate) SetCreatedAt(t time.Time) *LoanCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LoanCreate) SetUpdatedAt(t time.Time) *LoanCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetID sets the "id" field.
func (lc *LoanCreate) SetID(u uint) *LoanCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetUser sets the "user" edge to the User entity.
func (lc *LoanCreate) SetUser(u *User) *LoanCreate {
	return lc.SetUserID(u.ID)
}

// Mutation returns the LoanMutation object of the builder.
func (lc *LoanCreate) Mutation() *LoanMutation {
	return lc.mutation
}

// Save creates the Loan in the database.
func (lc *LoanCreate) Save(ctx context.Context) (*Loan, error) {
	return withHooks[*Loan, LoanMutation](ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LoanCreate) SaveX(ctx context.Context) *Loan {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LoanCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LoanCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LoanCreate) check() error {
	if _, ok := lc.mutation.LenderName(); !ok {
		return &ValidationError{Name: "lender_name", err: errors.New(`ent: missing required field "Loan.lender_name"`)}
	}
	if _, ok := lc.mutation.LoanType(); !ok {
		return &ValidationError{Name: "loan_type", err: errors.New(`ent: missing required field "Loan.loan_type"`)}
	}
	if _, ok := lc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Loan.balance"`)}
	}
	if _, ok := lc.mutation.InterestRate(); !ok {
		return &ValidationError{Name: "interest_rate", err: errors.New(`ent: missing required field "Loan.interest_rate"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Loan.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Loan.updated_at"`)}
	}
	return nil
}

func (lc *LoanCreate) sqlSave(ctx context.Context) (*Loan, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LoanCreate) createSpec() (*Loan, *sqlgraph.CreateSpec) {
	var (
		_node = &Loan{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(loan.Table, sqlgraph.NewFieldSpec(loan.FieldID, field.TypeUint))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.LenderName(); ok {
		_spec.SetField(loan.FieldLenderName, field.TypeString, value)
		_node.LenderName = value
	}
	if value, ok := lc.mutation.LoanType(); ok {
		_spec.SetField(loan.FieldLoanType, field.TypeString, value)
		_node.LoanType = value
	}
	if value, ok := lc.mutation.Balance(); ok {
		_spec.SetField(loan.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := lc.mutation.InterestRate(); ok {
		_spec.SetField(loan.FieldInterestRate, field.TypeFloat64, value)
		_node.InterestRate = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(loan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(loan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loan.UserTable,
			Columns: []string{loan.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoanCreateBulk is the builder for creating many Loan entities in bulk.
type LoanCreateBulk struct {
	config
	builders []*LoanCreate
}

// Save creates the Loan entities in the database.
func (lcb *LoanCreateBulk) Save(ctx context.Context) ([]*Loan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Loan, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LoanCreateBulk) SaveX(ctx context.Context) []*Loan {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LoanCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LoanCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
