// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/assetinfo"
	"github.com/hellohq/hqservice/ent/predicate"
)

// AssetInfoDelete is the builder for deleting a AssetInfo entity.
type AssetInfoDelete struct {
	config
	hooks    []Hook
	mutation *AssetInfoMutation
}

// Where appends a list predicates to the AssetInfoDelete builder.
func (aid *AssetInfoDelete) Where(ps ...predicate.AssetInfo) *AssetInfoDelete {
	aid.mutation.Where(ps...)
	return aid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aid *AssetInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, AssetInfoMutation](ctx, aid.sqlExec, aid.mutation, aid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aid *AssetInfoDelete) ExecX(ctx context.Context) int {
	n, err := aid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aid *AssetInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(assetinfo.Table, sqlgraph.NewFieldSpec(assetinfo.FieldID, field.TypeUint))
	if ps := aid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aid.mutation.done = true
	return affected, err
}

// AssetInfoDeleteOne is the builder for deleting a single AssetInfo entity.
type AssetInfoDeleteOne struct {
	aid *AssetInfoDelete
}

// Where appends a list predicates to the AssetInfoDelete builder.
func (aido *AssetInfoDeleteOne) Where(ps ...predicate.AssetInfo) *AssetInfoDeleteOne {
	aido.aid.mutation.Where(ps...)
	return aido
}

// Exec executes the deletion query.
func (aido *AssetInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := aido.aid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{assetinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aido *AssetInfoDeleteOne) ExecX(ctx context.Context) {
	if err := aido.Exec(ctx); err != nil {
		panic(err)
	}
}
