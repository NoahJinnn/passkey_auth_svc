// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/fvsession"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// FvSessionUpdate is the builder for updating FvSession entities.
type FvSessionUpdate struct {
	config
	hooks    []Hook
	mutation *FvSessionMutation
}

// Where appends a list predicates to the FvSessionUpdate builder.
func (fsu *FvSessionUpdate) Where(ps ...predicate.FvSession) *FvSessionUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetUserID sets the "user_id" field.
func (fsu *FvSessionUpdate) SetUserID(u uuid.UUID) *FvSessionUpdate {
	fsu.mutation.SetUserID(u)
	return fsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fsu *FvSessionUpdate) SetNillableUserID(u *uuid.UUID) *FvSessionUpdate {
	if u != nil {
		fsu.SetUserID(*u)
	}
	return fsu
}

// ClearUserID clears the value of the "user_id" field.
func (fsu *FvSessionUpdate) ClearUserID() *FvSessionUpdate {
	fsu.mutation.ClearUserID()
	return fsu
}

// SetAccessToken sets the "access_token" field.
func (fsu *FvSessionUpdate) SetAccessToken(s string) *FvSessionUpdate {
	fsu.mutation.SetAccessToken(s)
	return fsu
}

// SetExpiresIn sets the "expires_in" field.
func (fsu *FvSessionUpdate) SetExpiresIn(i int) *FvSessionUpdate {
	fsu.mutation.ResetExpiresIn()
	fsu.mutation.SetExpiresIn(i)
	return fsu
}

// AddExpiresIn adds i to the "expires_in" field.
func (fsu *FvSessionUpdate) AddExpiresIn(i int) *FvSessionUpdate {
	fsu.mutation.AddExpiresIn(i)
	return fsu
}

// SetIssuedAt sets the "issued_at" field.
func (fsu *FvSessionUpdate) SetIssuedAt(s string) *FvSessionUpdate {
	fsu.mutation.SetIssuedAt(s)
	return fsu
}

// SetTokenType sets the "token_type" field.
func (fsu *FvSessionUpdate) SetTokenType(s string) *FvSessionUpdate {
	fsu.mutation.SetTokenType(s)
	return fsu
}

// SetUpdatedAt sets the "updated_at" field.
func (fsu *FvSessionUpdate) SetUpdatedAt(t time.Time) *FvSessionUpdate {
	fsu.mutation.SetUpdatedAt(t)
	return fsu
}

// SetUser sets the "user" edge to the User entity.
func (fsu *FvSessionUpdate) SetUser(u *User) *FvSessionUpdate {
	return fsu.SetUserID(u.ID)
}

// Mutation returns the FvSessionMutation object of the builder.
func (fsu *FvSessionUpdate) Mutation() *FvSessionMutation {
	return fsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fsu *FvSessionUpdate) ClearUser() *FvSessionUpdate {
	fsu.mutation.ClearUser()
	return fsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FvSessionUpdate) Save(ctx context.Context) (int, error) {
	fsu.defaults()
	return withHooks(ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FvSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FvSessionUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FvSessionUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsu *FvSessionUpdate) defaults() {
	if _, ok := fsu.mutation.UpdatedAt(); !ok {
		v := fvsession.UpdateDefaultUpdatedAt()
		fsu.mutation.SetUpdatedAt(v)
	}
}

func (fsu *FvSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fvsession.Table, fvsession.Columns, sqlgraph.NewFieldSpec(fvsession.FieldID, field.TypeUUID))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.AccessToken(); ok {
		_spec.SetField(fvsession.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := fsu.mutation.ExpiresIn(); ok {
		_spec.SetField(fvsession.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.AddedExpiresIn(); ok {
		_spec.AddField(fvsession.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := fsu.mutation.IssuedAt(); ok {
		_spec.SetField(fvsession.FieldIssuedAt, field.TypeString, value)
	}
	if value, ok := fsu.mutation.TokenType(); ok {
		_spec.SetField(fvsession.FieldTokenType, field.TypeString, value)
	}
	if value, ok := fsu.mutation.UpdatedAt(); ok {
		_spec.SetField(fvsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if fsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fvsession.UserTable,
			Columns: []string{fvsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fvsession.UserTable,
			Columns: []string{fvsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fvsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FvSessionUpdateOne is the builder for updating a single FvSession entity.
type FvSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FvSessionMutation
}

// SetUserID sets the "user_id" field.
func (fsuo *FvSessionUpdateOne) SetUserID(u uuid.UUID) *FvSessionUpdateOne {
	fsuo.mutation.SetUserID(u)
	return fsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fsuo *FvSessionUpdateOne) SetNillableUserID(u *uuid.UUID) *FvSessionUpdateOne {
	if u != nil {
		fsuo.SetUserID(*u)
	}
	return fsuo
}

// ClearUserID clears the value of the "user_id" field.
func (fsuo *FvSessionUpdateOne) ClearUserID() *FvSessionUpdateOne {
	fsuo.mutation.ClearUserID()
	return fsuo
}

// SetAccessToken sets the "access_token" field.
func (fsuo *FvSessionUpdateOne) SetAccessToken(s string) *FvSessionUpdateOne {
	fsuo.mutation.SetAccessToken(s)
	return fsuo
}

// SetExpiresIn sets the "expires_in" field.
func (fsuo *FvSessionUpdateOne) SetExpiresIn(i int) *FvSessionUpdateOne {
	fsuo.mutation.ResetExpiresIn()
	fsuo.mutation.SetExpiresIn(i)
	return fsuo
}

// AddExpiresIn adds i to the "expires_in" field.
func (fsuo *FvSessionUpdateOne) AddExpiresIn(i int) *FvSessionUpdateOne {
	fsuo.mutation.AddExpiresIn(i)
	return fsuo
}

// SetIssuedAt sets the "issued_at" field.
func (fsuo *FvSessionUpdateOne) SetIssuedAt(s string) *FvSessionUpdateOne {
	fsuo.mutation.SetIssuedAt(s)
	return fsuo
}

// SetTokenType sets the "token_type" field.
func (fsuo *FvSessionUpdateOne) SetTokenType(s string) *FvSessionUpdateOne {
	fsuo.mutation.SetTokenType(s)
	return fsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fsuo *FvSessionUpdateOne) SetUpdatedAt(t time.Time) *FvSessionUpdateOne {
	fsuo.mutation.SetUpdatedAt(t)
	return fsuo
}

// SetUser sets the "user" edge to the User entity.
func (fsuo *FvSessionUpdateOne) SetUser(u *User) *FvSessionUpdateOne {
	return fsuo.SetUserID(u.ID)
}

// Mutation returns the FvSessionMutation object of the builder.
func (fsuo *FvSessionUpdateOne) Mutation() *FvSessionMutation {
	return fsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fsuo *FvSessionUpdateOne) ClearUser() *FvSessionUpdateOne {
	fsuo.mutation.ClearUser()
	return fsuo
}

// Where appends a list predicates to the FvSessionUpdate builder.
func (fsuo *FvSessionUpdateOne) Where(ps ...predicate.FvSession) *FvSessionUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FvSessionUpdateOne) Select(field string, fields ...string) *FvSessionUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FvSession entity.
func (fsuo *FvSessionUpdateOne) Save(ctx context.Context) (*FvSession, error) {
	fsuo.defaults()
	return withHooks(ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FvSessionUpdateOne) SaveX(ctx context.Context) *FvSession {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FvSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FvSessionUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsuo *FvSessionUpdateOne) defaults() {
	if _, ok := fsuo.mutation.UpdatedAt(); !ok {
		v := fvsession.UpdateDefaultUpdatedAt()
		fsuo.mutation.SetUpdatedAt(v)
	}
}

func (fsuo *FvSessionUpdateOne) sqlSave(ctx context.Context) (_node *FvSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(fvsession.Table, fvsession.Columns, sqlgraph.NewFieldSpec(fvsession.FieldID, field.TypeUUID))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FvSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fvsession.FieldID)
		for _, f := range fields {
			if !fvsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fvsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.AccessToken(); ok {
		_spec.SetField(fvsession.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.ExpiresIn(); ok {
		_spec.SetField(fvsession.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.AddedExpiresIn(); ok {
		_spec.AddField(fvsession.FieldExpiresIn, field.TypeInt, value)
	}
	if value, ok := fsuo.mutation.IssuedAt(); ok {
		_spec.SetField(fvsession.FieldIssuedAt, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.TokenType(); ok {
		_spec.SetField(fvsession.FieldTokenType, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fvsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if fsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fvsession.UserTable,
			Columns: []string{fvsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fvsession.UserTable,
			Columns: []string{fvsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FvSession{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fvsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
