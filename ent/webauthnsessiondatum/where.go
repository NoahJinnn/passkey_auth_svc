// Code generated by ent, DO NOT EDIT.

package webauthnsessiondatum

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldID, id))
}

// Challenge applies equality check predicate on the "challenge" field. It's identical to ChallengeEQ.
func Challenge(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldChallenge, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldUserID, v))
}

// UserVerification applies equality check predicate on the "user_verification" field. It's identical to UserVerificationEQ.
func UserVerification(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldUserVerification, v))
}

// Operation applies equality check predicate on the "operation" field. It's identical to OperationEQ.
func Operation(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldOperation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldUpdatedAt, v))
}

// ChallengeEQ applies the EQ predicate on the "challenge" field.
func ChallengeEQ(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldChallenge, v))
}

// ChallengeNEQ applies the NEQ predicate on the "challenge" field.
func ChallengeNEQ(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldChallenge, v))
}

// ChallengeIn applies the In predicate on the "challenge" field.
func ChallengeIn(vs ...string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldChallenge, vs...))
}

// ChallengeNotIn applies the NotIn predicate on the "challenge" field.
func ChallengeNotIn(vs ...string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldChallenge, vs...))
}

// ChallengeGT applies the GT predicate on the "challenge" field.
func ChallengeGT(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldChallenge, v))
}

// ChallengeGTE applies the GTE predicate on the "challenge" field.
func ChallengeGTE(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldChallenge, v))
}

// ChallengeLT applies the LT predicate on the "challenge" field.
func ChallengeLT(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldChallenge, v))
}

// ChallengeLTE applies the LTE predicate on the "challenge" field.
func ChallengeLTE(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldChallenge, v))
}

// ChallengeContains applies the Contains predicate on the "challenge" field.
func ChallengeContains(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldContains(FieldChallenge, v))
}

// ChallengeHasPrefix applies the HasPrefix predicate on the "challenge" field.
func ChallengeHasPrefix(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldHasPrefix(FieldChallenge, v))
}

// ChallengeHasSuffix applies the HasSuffix predicate on the "challenge" field.
func ChallengeHasSuffix(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldHasSuffix(FieldChallenge, v))
}

// ChallengeEqualFold applies the EqualFold predicate on the "challenge" field.
func ChallengeEqualFold(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEqualFold(FieldChallenge, v))
}

// ChallengeContainsFold applies the ContainsFold predicate on the "challenge" field.
func ChallengeContainsFold(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldContainsFold(FieldChallenge, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldUserID, v))
}

// UserVerificationEQ applies the EQ predicate on the "user_verification" field.
func UserVerificationEQ(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldUserVerification, v))
}

// UserVerificationNEQ applies the NEQ predicate on the "user_verification" field.
func UserVerificationNEQ(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldUserVerification, v))
}

// UserVerificationIn applies the In predicate on the "user_verification" field.
func UserVerificationIn(vs ...string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldUserVerification, vs...))
}

// UserVerificationNotIn applies the NotIn predicate on the "user_verification" field.
func UserVerificationNotIn(vs ...string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldUserVerification, vs...))
}

// UserVerificationGT applies the GT predicate on the "user_verification" field.
func UserVerificationGT(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldUserVerification, v))
}

// UserVerificationGTE applies the GTE predicate on the "user_verification" field.
func UserVerificationGTE(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldUserVerification, v))
}

// UserVerificationLT applies the LT predicate on the "user_verification" field.
func UserVerificationLT(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldUserVerification, v))
}

// UserVerificationLTE applies the LTE predicate on the "user_verification" field.
func UserVerificationLTE(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldUserVerification, v))
}

// UserVerificationContains applies the Contains predicate on the "user_verification" field.
func UserVerificationContains(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldContains(FieldUserVerification, v))
}

// UserVerificationHasPrefix applies the HasPrefix predicate on the "user_verification" field.
func UserVerificationHasPrefix(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldHasPrefix(FieldUserVerification, v))
}

// UserVerificationHasSuffix applies the HasSuffix predicate on the "user_verification" field.
func UserVerificationHasSuffix(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldHasSuffix(FieldUserVerification, v))
}

// UserVerificationEqualFold applies the EqualFold predicate on the "user_verification" field.
func UserVerificationEqualFold(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEqualFold(FieldUserVerification, v))
}

// UserVerificationContainsFold applies the ContainsFold predicate on the "user_verification" field.
func UserVerificationContainsFold(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldContainsFold(FieldUserVerification, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldOperation, vs...))
}

// OperationGT applies the GT predicate on the "operation" field.
func OperationGT(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldOperation, v))
}

// OperationGTE applies the GTE predicate on the "operation" field.
func OperationGTE(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldOperation, v))
}

// OperationLT applies the LT predicate on the "operation" field.
func OperationLT(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldOperation, v))
}

// OperationLTE applies the LTE predicate on the "operation" field.
func OperationLTE(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldOperation, v))
}

// OperationContains applies the Contains predicate on the "operation" field.
func OperationContains(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldContains(FieldOperation, v))
}

// OperationHasPrefix applies the HasPrefix predicate on the "operation" field.
func OperationHasPrefix(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldHasPrefix(FieldOperation, v))
}

// OperationHasSuffix applies the HasSuffix predicate on the "operation" field.
func OperationHasSuffix(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldHasSuffix(FieldOperation, v))
}

// OperationEqualFold applies the EqualFold predicate on the "operation" field.
func OperationEqualFold(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEqualFold(FieldOperation, v))
}

// OperationContainsFold applies the ContainsFold predicate on the "operation" field.
func OperationContainsFold(v string) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldContainsFold(FieldOperation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWebauthnSessionDataAllowedCredentials applies the HasEdge predicate on the "webauthn_session_data_allowed_credentials" edge.
func HasWebauthnSessionDataAllowedCredentials() predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebauthnSessionDataAllowedCredentialsTable, WebauthnSessionDataAllowedCredentialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebauthnSessionDataAllowedCredentialsWith applies the HasEdge predicate on the "webauthn_session_data_allowed_credentials" edge with a given conditions (other predicates).
func HasWebauthnSessionDataAllowedCredentialsWith(preds ...predicate.WebauthnSessionDataAllowedCredential) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WebauthnSessionDataAllowedCredentialsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebauthnSessionDataAllowedCredentialsTable, WebauthnSessionDataAllowedCredentialsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebauthnSessionDatum) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebauthnSessionDatum) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebauthnSessionDatum) predicate.WebauthnSessionDatum {
	return predicate.WebauthnSessionDatum(func(s *sql.Selector) {
		p(s.Not())
	})
}
