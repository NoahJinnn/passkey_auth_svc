// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/passwordcredential"
	"github.com/hellohq/hqservice/ent/user"
)

// PasswordCredentialCreate is the builder for creating a PasswordCredential entity.
type PasswordCredentialCreate struct {
	config
	mutation *PasswordCredentialMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pcc *PasswordCredentialCreate) SetUserID(u uuid.UUID) *PasswordCredentialCreate {
	pcc.mutation.SetUserID(u)
	return pcc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pcc *PasswordCredentialCreate) SetNillableUserID(u *uuid.UUID) *PasswordCredentialCreate {
	if u != nil {
		pcc.SetUserID(*u)
	}
	return pcc
}

// SetPassword sets the "password" field.
func (pcc *PasswordCredentialCreate) SetPassword(s string) *PasswordCredentialCreate {
	pcc.mutation.SetPassword(s)
	return pcc
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PasswordCredentialCreate) SetCreatedAt(t time.Time) *PasswordCredentialCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PasswordCredentialCreate) SetNillableCreatedAt(t *time.Time) *PasswordCredentialCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PasswordCredentialCreate) SetUpdatedAt(t time.Time) *PasswordCredentialCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PasswordCredentialCreate) SetNillableUpdatedAt(t *time.Time) *PasswordCredentialCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PasswordCredentialCreate) SetID(u uuid.UUID) *PasswordCredentialCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// SetUser sets the "user" edge to the User entity.
func (pcc *PasswordCredentialCreate) SetUser(u *User) *PasswordCredentialCreate {
	return pcc.SetUserID(u.ID)
}

// Mutation returns the PasswordCredentialMutation object of the builder.
func (pcc *PasswordCredentialCreate) Mutation() *PasswordCredentialMutation {
	return pcc.mutation
}

// Save creates the PasswordCredential in the database.
func (pcc *PasswordCredentialCreate) Save(ctx context.Context) (*PasswordCredential, error) {
	pcc.defaults()
	return withHooks[*PasswordCredential, PasswordCredentialMutation](ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PasswordCredentialCreate) SaveX(ctx context.Context) *PasswordCredential {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PasswordCredentialCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PasswordCredentialCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PasswordCredentialCreate) defaults() {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := passwordcredential.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := passwordcredential.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PasswordCredentialCreate) check() error {
	if _, ok := pcc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "PasswordCredential.password"`)}
	}
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PasswordCredential.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PasswordCredential.updated_at"`)}
	}
	return nil
}

func (pcc *PasswordCredentialCreate) sqlSave(ctx context.Context) (*PasswordCredential, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PasswordCredentialCreate) createSpec() (*PasswordCredential, *sqlgraph.CreateSpec) {
	var (
		_node = &PasswordCredential{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(passwordcredential.Table, sqlgraph.NewFieldSpec(passwordcredential.FieldID, field.TypeUUID))
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcc.mutation.Password(); ok {
		_spec.SetField(passwordcredential.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(passwordcredential.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(passwordcredential.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   passwordcredential.UserTable,
			Columns: []string{passwordcredential.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PasswordCredentialCreateBulk is the builder for creating many PasswordCredential entities in bulk.
type PasswordCredentialCreateBulk struct {
	config
	builders []*PasswordCredentialCreate
}

// Save creates the PasswordCredential entities in the database.
func (pccb *PasswordCredentialCreateBulk) Save(ctx context.Context) ([]*PasswordCredential, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PasswordCredential, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PasswordCredentialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PasswordCredentialCreateBulk) SaveX(ctx context.Context) []*PasswordCredential {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PasswordCredentialCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PasswordCredentialCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
