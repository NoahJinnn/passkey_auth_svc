// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/itemtable"
	"github.com/hellohq/hqservice/ent/user"
)

// ItemTableCreate is the builder for creating a ItemTable entity.
type ItemTableCreate struct {
	config
	mutation *ItemTableMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (itc *ItemTableCreate) SetUserID(u uuid.UUID) *ItemTableCreate {
	itc.mutation.SetUserID(u)
	return itc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (itc *ItemTableCreate) SetNillableUserID(u *uuid.UUID) *ItemTableCreate {
	if u != nil {
		itc.SetUserID(*u)
	}
	return itc
}

// SetSheet sets the "sheet" field.
func (itc *ItemTableCreate) SetSheet(i int32) *ItemTableCreate {
	itc.mutation.SetSheet(i)
	return itc
}

// SetSection sets the "section" field.
func (itc *ItemTableCreate) SetSection(i int32) *ItemTableCreate {
	itc.mutation.SetSection(i)
	return itc
}

// SetCategory sets the "category" field.
func (itc *ItemTableCreate) SetCategory(s string) *ItemTableCreate {
	itc.mutation.SetCategory(s)
	return itc
}

// SetDescription sets the "description" field.
func (itc *ItemTableCreate) SetDescription(s string) *ItemTableCreate {
	itc.mutation.SetDescription(s)
	return itc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (itc *ItemTableCreate) SetNillableDescription(s *string) *ItemTableCreate {
	if s != nil {
		itc.SetDescription(*s)
	}
	return itc
}

// SetCreatedAt sets the "created_at" field.
func (itc *ItemTableCreate) SetCreatedAt(t time.Time) *ItemTableCreate {
	itc.mutation.SetCreatedAt(t)
	return itc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itc *ItemTableCreate) SetNillableCreatedAt(t *time.Time) *ItemTableCreate {
	if t != nil {
		itc.SetCreatedAt(*t)
	}
	return itc
}

// SetUpdatedAt sets the "updated_at" field.
func (itc *ItemTableCreate) SetUpdatedAt(t time.Time) *ItemTableCreate {
	itc.mutation.SetUpdatedAt(t)
	return itc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (itc *ItemTableCreate) SetNillableUpdatedAt(t *time.Time) *ItemTableCreate {
	if t != nil {
		itc.SetUpdatedAt(*t)
	}
	return itc
}

// SetID sets the "id" field.
func (itc *ItemTableCreate) SetID(u uuid.UUID) *ItemTableCreate {
	itc.mutation.SetID(u)
	return itc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (itc *ItemTableCreate) SetNillableID(u *uuid.UUID) *ItemTableCreate {
	if u != nil {
		itc.SetID(*u)
	}
	return itc
}

// SetUser sets the "user" edge to the User entity.
func (itc *ItemTableCreate) SetUser(u *User) *ItemTableCreate {
	return itc.SetUserID(u.ID)
}

// Mutation returns the ItemTableMutation object of the builder.
func (itc *ItemTableCreate) Mutation() *ItemTableMutation {
	return itc.mutation
}

// Save creates the ItemTable in the database.
func (itc *ItemTableCreate) Save(ctx context.Context) (*ItemTable, error) {
	itc.defaults()
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *ItemTableCreate) SaveX(ctx context.Context) *ItemTable {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *ItemTableCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *ItemTableCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *ItemTableCreate) defaults() {
	if _, ok := itc.mutation.Description(); !ok {
		v := itemtable.DefaultDescription
		itc.mutation.SetDescription(v)
	}
	if _, ok := itc.mutation.CreatedAt(); !ok {
		v := itemtable.DefaultCreatedAt()
		itc.mutation.SetCreatedAt(v)
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		v := itemtable.DefaultUpdatedAt()
		itc.mutation.SetUpdatedAt(v)
	}
	if _, ok := itc.mutation.ID(); !ok {
		v := itemtable.DefaultID()
		itc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *ItemTableCreate) check() error {
	if _, ok := itc.mutation.Sheet(); !ok {
		return &ValidationError{Name: "sheet", err: errors.New(`ent: missing required field "ItemTable.sheet"`)}
	}
	if _, ok := itc.mutation.Section(); !ok {
		return &ValidationError{Name: "section", err: errors.New(`ent: missing required field "ItemTable.section"`)}
	}
	if _, ok := itc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "ItemTable.category"`)}
	}
	if _, ok := itc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ItemTable.created_at"`)}
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ItemTable.updated_at"`)}
	}
	return nil
}

func (itc *ItemTableCreate) sqlSave(ctx context.Context) (*ItemTable, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *ItemTableCreate) createSpec() (*ItemTable, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemTable{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(itemtable.Table, sqlgraph.NewFieldSpec(itemtable.FieldID, field.TypeUUID))
	)
	if id, ok := itc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := itc.mutation.Sheet(); ok {
		_spec.SetField(itemtable.FieldSheet, field.TypeInt32, value)
		_node.Sheet = value
	}
	if value, ok := itc.mutation.Section(); ok {
		_spec.SetField(itemtable.FieldSection, field.TypeInt32, value)
		_node.Section = value
	}
	if value, ok := itc.mutation.Category(); ok {
		_spec.SetField(itemtable.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := itc.mutation.Description(); ok {
		_spec.SetField(itemtable.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := itc.mutation.CreatedAt(); ok {
		_spec.SetField(itemtable.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := itc.mutation.UpdatedAt(); ok {
		_spec.SetField(itemtable.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := itc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemtable.UserTable,
			Columns: []string{itemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemTableCreateBulk is the builder for creating many ItemTable entities in bulk.
type ItemTableCreateBulk struct {
	config
	builders []*ItemTableCreate
}

// Save creates the ItemTable entities in the database.
func (itcb *ItemTableCreateBulk) Save(ctx context.Context) ([]*ItemTable, error) {
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*ItemTable, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *ItemTableCreateBulk) SaveX(ctx context.Context) []*ItemTable {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *ItemTableCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *ItemTableCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}
