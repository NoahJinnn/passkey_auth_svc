// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/webauthnsessiondataallowedcredential"
	"github.com/hellohq/hqservice/ent/webauthnsessiondatum"
)

// WebauthnSessionDatumUpdate is the builder for updating WebauthnSessionDatum entities.
type WebauthnSessionDatumUpdate struct {
	config
	hooks    []Hook
	mutation *WebauthnSessionDatumMutation
}

// Where appends a list predicates to the WebauthnSessionDatumUpdate builder.
func (wsdu *WebauthnSessionDatumUpdate) Where(ps ...predicate.WebauthnSessionDatum) *WebauthnSessionDatumUpdate {
	wsdu.mutation.Where(ps...)
	return wsdu
}

// SetChallenge sets the "challenge" field.
func (wsdu *WebauthnSessionDatumUpdate) SetChallenge(s string) *WebauthnSessionDatumUpdate {
	wsdu.mutation.SetChallenge(s)
	return wsdu
}

// SetUserID sets the "user_id" field.
func (wsdu *WebauthnSessionDatumUpdate) SetUserID(u uuid.UUID) *WebauthnSessionDatumUpdate {
	wsdu.mutation.SetUserID(u)
	return wsdu
}

// SetUserVerification sets the "user_verification" field.
func (wsdu *WebauthnSessionDatumUpdate) SetUserVerification(s string) *WebauthnSessionDatumUpdate {
	wsdu.mutation.SetUserVerification(s)
	return wsdu
}

// SetOperation sets the "operation" field.
func (wsdu *WebauthnSessionDatumUpdate) SetOperation(s string) *WebauthnSessionDatumUpdate {
	wsdu.mutation.SetOperation(s)
	return wsdu
}

// SetCreatedAt sets the "created_at" field.
func (wsdu *WebauthnSessionDatumUpdate) SetCreatedAt(t time.Time) *WebauthnSessionDatumUpdate {
	wsdu.mutation.SetCreatedAt(t)
	return wsdu
}

// SetUpdatedAt sets the "updated_at" field.
func (wsdu *WebauthnSessionDatumUpdate) SetUpdatedAt(t time.Time) *WebauthnSessionDatumUpdate {
	wsdu.mutation.SetUpdatedAt(t)
	return wsdu
}

// AddWebauthnSessionDataAllowedCredentialIDs adds the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity by IDs.
func (wsdu *WebauthnSessionDatumUpdate) AddWebauthnSessionDataAllowedCredentialIDs(ids ...uuid.UUID) *WebauthnSessionDatumUpdate {
	wsdu.mutation.AddWebauthnSessionDataAllowedCredentialIDs(ids...)
	return wsdu
}

// AddWebauthnSessionDataAllowedCredentials adds the "webauthn_session_data_allowed_credentials" edges to the WebauthnSessionDataAllowedCredential entity.
func (wsdu *WebauthnSessionDatumUpdate) AddWebauthnSessionDataAllowedCredentials(w ...*WebauthnSessionDataAllowedCredential) *WebauthnSessionDatumUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wsdu.AddWebauthnSessionDataAllowedCredentialIDs(ids...)
}

// Mutation returns the WebauthnSessionDatumMutation object of the builder.
func (wsdu *WebauthnSessionDatumUpdate) Mutation() *WebauthnSessionDatumMutation {
	return wsdu.mutation
}

// ClearWebauthnSessionDataAllowedCredentials clears all "webauthn_session_data_allowed_credentials" edges to the WebauthnSessionDataAllowedCredential entity.
func (wsdu *WebauthnSessionDatumUpdate) ClearWebauthnSessionDataAllowedCredentials() *WebauthnSessionDatumUpdate {
	wsdu.mutation.ClearWebauthnSessionDataAllowedCredentials()
	return wsdu
}

// RemoveWebauthnSessionDataAllowedCredentialIDs removes the "webauthn_session_data_allowed_credentials" edge to WebauthnSessionDataAllowedCredential entities by IDs.
func (wsdu *WebauthnSessionDatumUpdate) RemoveWebauthnSessionDataAllowedCredentialIDs(ids ...uuid.UUID) *WebauthnSessionDatumUpdate {
	wsdu.mutation.RemoveWebauthnSessionDataAllowedCredentialIDs(ids...)
	return wsdu
}

// RemoveWebauthnSessionDataAllowedCredentials removes "webauthn_session_data_allowed_credentials" edges to WebauthnSessionDataAllowedCredential entities.
func (wsdu *WebauthnSessionDatumUpdate) RemoveWebauthnSessionDataAllowedCredentials(w ...*WebauthnSessionDataAllowedCredential) *WebauthnSessionDatumUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wsdu.RemoveWebauthnSessionDataAllowedCredentialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsdu *WebauthnSessionDatumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WebauthnSessionDatumMutation](ctx, wsdu.sqlSave, wsdu.mutation, wsdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsdu *WebauthnSessionDatumUpdate) SaveX(ctx context.Context) int {
	affected, err := wsdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsdu *WebauthnSessionDatumUpdate) Exec(ctx context.Context) error {
	_, err := wsdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsdu *WebauthnSessionDatumUpdate) ExecX(ctx context.Context) {
	if err := wsdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wsdu *WebauthnSessionDatumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(webauthnsessiondatum.Table, webauthnsessiondatum.Columns, sqlgraph.NewFieldSpec(webauthnsessiondatum.FieldID, field.TypeUUID))
	if ps := wsdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsdu.mutation.Challenge(); ok {
		_spec.SetField(webauthnsessiondatum.FieldChallenge, field.TypeString, value)
	}
	if value, ok := wsdu.mutation.UserID(); ok {
		_spec.SetField(webauthnsessiondatum.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := wsdu.mutation.UserVerification(); ok {
		_spec.SetField(webauthnsessiondatum.FieldUserVerification, field.TypeString, value)
	}
	if value, ok := wsdu.mutation.Operation(); ok {
		_spec.SetField(webauthnsessiondatum.FieldOperation, field.TypeString, value)
	}
	if value, ok := wsdu.mutation.CreatedAt(); ok {
		_spec.SetField(webauthnsessiondatum.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wsdu.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthnsessiondatum.FieldUpdatedAt, field.TypeTime, value)
	}
	if wsdu.mutation.WebauthnSessionDataAllowedCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable,
			Columns: []string{webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondataallowedcredential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsdu.mutation.RemovedWebauthnSessionDataAllowedCredentialsIDs(); len(nodes) > 0 && !wsdu.mutation.WebauthnSessionDataAllowedCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable,
			Columns: []string{webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondataallowedcredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsdu.mutation.WebauthnSessionDataAllowedCredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable,
			Columns: []string{webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondataallowedcredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthnsessiondatum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsdu.mutation.done = true
	return n, nil
}

// WebauthnSessionDatumUpdateOne is the builder for updating a single WebauthnSessionDatum entity.
type WebauthnSessionDatumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebauthnSessionDatumMutation
}

// SetChallenge sets the "challenge" field.
func (wsduo *WebauthnSessionDatumUpdateOne) SetChallenge(s string) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.SetChallenge(s)
	return wsduo
}

// SetUserID sets the "user_id" field.
func (wsduo *WebauthnSessionDatumUpdateOne) SetUserID(u uuid.UUID) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.SetUserID(u)
	return wsduo
}

// SetUserVerification sets the "user_verification" field.
func (wsduo *WebauthnSessionDatumUpdateOne) SetUserVerification(s string) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.SetUserVerification(s)
	return wsduo
}

// SetOperation sets the "operation" field.
func (wsduo *WebauthnSessionDatumUpdateOne) SetOperation(s string) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.SetOperation(s)
	return wsduo
}

// SetCreatedAt sets the "created_at" field.
func (wsduo *WebauthnSessionDatumUpdateOne) SetCreatedAt(t time.Time) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.SetCreatedAt(t)
	return wsduo
}

// SetUpdatedAt sets the "updated_at" field.
func (wsduo *WebauthnSessionDatumUpdateOne) SetUpdatedAt(t time.Time) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.SetUpdatedAt(t)
	return wsduo
}

// AddWebauthnSessionDataAllowedCredentialIDs adds the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity by IDs.
func (wsduo *WebauthnSessionDatumUpdateOne) AddWebauthnSessionDataAllowedCredentialIDs(ids ...uuid.UUID) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.AddWebauthnSessionDataAllowedCredentialIDs(ids...)
	return wsduo
}

// AddWebauthnSessionDataAllowedCredentials adds the "webauthn_session_data_allowed_credentials" edges to the WebauthnSessionDataAllowedCredential entity.
func (wsduo *WebauthnSessionDatumUpdateOne) AddWebauthnSessionDataAllowedCredentials(w ...*WebauthnSessionDataAllowedCredential) *WebauthnSessionDatumUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wsduo.AddWebauthnSessionDataAllowedCredentialIDs(ids...)
}

// Mutation returns the WebauthnSessionDatumMutation object of the builder.
func (wsduo *WebauthnSessionDatumUpdateOne) Mutation() *WebauthnSessionDatumMutation {
	return wsduo.mutation
}

// ClearWebauthnSessionDataAllowedCredentials clears all "webauthn_session_data_allowed_credentials" edges to the WebauthnSessionDataAllowedCredential entity.
func (wsduo *WebauthnSessionDatumUpdateOne) ClearWebauthnSessionDataAllowedCredentials() *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.ClearWebauthnSessionDataAllowedCredentials()
	return wsduo
}

// RemoveWebauthnSessionDataAllowedCredentialIDs removes the "webauthn_session_data_allowed_credentials" edge to WebauthnSessionDataAllowedCredential entities by IDs.
func (wsduo *WebauthnSessionDatumUpdateOne) RemoveWebauthnSessionDataAllowedCredentialIDs(ids ...uuid.UUID) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.RemoveWebauthnSessionDataAllowedCredentialIDs(ids...)
	return wsduo
}

// RemoveWebauthnSessionDataAllowedCredentials removes "webauthn_session_data_allowed_credentials" edges to WebauthnSessionDataAllowedCredential entities.
func (wsduo *WebauthnSessionDatumUpdateOne) RemoveWebauthnSessionDataAllowedCredentials(w ...*WebauthnSessionDataAllowedCredential) *WebauthnSessionDatumUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wsduo.RemoveWebauthnSessionDataAllowedCredentialIDs(ids...)
}

// Where appends a list predicates to the WebauthnSessionDatumUpdate builder.
func (wsduo *WebauthnSessionDatumUpdateOne) Where(ps ...predicate.WebauthnSessionDatum) *WebauthnSessionDatumUpdateOne {
	wsduo.mutation.Where(ps...)
	return wsduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsduo *WebauthnSessionDatumUpdateOne) Select(field string, fields ...string) *WebauthnSessionDatumUpdateOne {
	wsduo.fields = append([]string{field}, fields...)
	return wsduo
}

// Save executes the query and returns the updated WebauthnSessionDatum entity.
func (wsduo *WebauthnSessionDatumUpdateOne) Save(ctx context.Context) (*WebauthnSessionDatum, error) {
	return withHooks[*WebauthnSessionDatum, WebauthnSessionDatumMutation](ctx, wsduo.sqlSave, wsduo.mutation, wsduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsduo *WebauthnSessionDatumUpdateOne) SaveX(ctx context.Context) *WebauthnSessionDatum {
	node, err := wsduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsduo *WebauthnSessionDatumUpdateOne) Exec(ctx context.Context) error {
	_, err := wsduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsduo *WebauthnSessionDatumUpdateOne) ExecX(ctx context.Context) {
	if err := wsduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wsduo *WebauthnSessionDatumUpdateOne) sqlSave(ctx context.Context) (_node *WebauthnSessionDatum, err error) {
	_spec := sqlgraph.NewUpdateSpec(webauthnsessiondatum.Table, webauthnsessiondatum.Columns, sqlgraph.NewFieldSpec(webauthnsessiondatum.FieldID, field.TypeUUID))
	id, ok := wsduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WebauthnSessionDatum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webauthnsessiondatum.FieldID)
		for _, f := range fields {
			if !webauthnsessiondatum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webauthnsessiondatum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsduo.mutation.Challenge(); ok {
		_spec.SetField(webauthnsessiondatum.FieldChallenge, field.TypeString, value)
	}
	if value, ok := wsduo.mutation.UserID(); ok {
		_spec.SetField(webauthnsessiondatum.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := wsduo.mutation.UserVerification(); ok {
		_spec.SetField(webauthnsessiondatum.FieldUserVerification, field.TypeString, value)
	}
	if value, ok := wsduo.mutation.Operation(); ok {
		_spec.SetField(webauthnsessiondatum.FieldOperation, field.TypeString, value)
	}
	if value, ok := wsduo.mutation.CreatedAt(); ok {
		_spec.SetField(webauthnsessiondatum.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wsduo.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthnsessiondatum.FieldUpdatedAt, field.TypeTime, value)
	}
	if wsduo.mutation.WebauthnSessionDataAllowedCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable,
			Columns: []string{webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondataallowedcredential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsduo.mutation.RemovedWebauthnSessionDataAllowedCredentialsIDs(); len(nodes) > 0 && !wsduo.mutation.WebauthnSessionDataAllowedCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable,
			Columns: []string{webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondataallowedcredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsduo.mutation.WebauthnSessionDataAllowedCredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable,
			Columns: []string{webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnsessiondataallowedcredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WebauthnSessionDatum{config: wsduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthnsessiondatum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsduo.mutation.done = true
	return _node, nil
}
