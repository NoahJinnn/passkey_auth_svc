// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/fvsession"
	"github.com/hellohq/hqservice/ent/user"
)

// FvSessionCreate is the builder for creating a FvSession entity.
type FvSessionCreate struct {
	config
	mutation *FvSessionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (fsc *FvSessionCreate) SetUserID(u uuid.UUID) *FvSessionCreate {
	fsc.mutation.SetUserID(u)
	return fsc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fsc *FvSessionCreate) SetNillableUserID(u *uuid.UUID) *FvSessionCreate {
	if u != nil {
		fsc.SetUserID(*u)
	}
	return fsc
}

// SetAccessToken sets the "access_token" field.
func (fsc *FvSessionCreate) SetAccessToken(s string) *FvSessionCreate {
	fsc.mutation.SetAccessToken(s)
	return fsc
}

// SetExpiresIn sets the "expires_in" field.
func (fsc *FvSessionCreate) SetExpiresIn(i int32) *FvSessionCreate {
	fsc.mutation.SetExpiresIn(i)
	return fsc
}

// SetIssuedAt sets the "issued_at" field.
func (fsc *FvSessionCreate) SetIssuedAt(s string) *FvSessionCreate {
	fsc.mutation.SetIssuedAt(s)
	return fsc
}

// SetTokenType sets the "token_type" field.
func (fsc *FvSessionCreate) SetTokenType(s string) *FvSessionCreate {
	fsc.mutation.SetTokenType(s)
	return fsc
}

// SetCreatedAt sets the "created_at" field.
func (fsc *FvSessionCreate) SetCreatedAt(t time.Time) *FvSessionCreate {
	fsc.mutation.SetCreatedAt(t)
	return fsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsc *FvSessionCreate) SetNillableCreatedAt(t *time.Time) *FvSessionCreate {
	if t != nil {
		fsc.SetCreatedAt(*t)
	}
	return fsc
}

// SetUpdatedAt sets the "updated_at" field.
func (fsc *FvSessionCreate) SetUpdatedAt(t time.Time) *FvSessionCreate {
	fsc.mutation.SetUpdatedAt(t)
	return fsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsc *FvSessionCreate) SetNillableUpdatedAt(t *time.Time) *FvSessionCreate {
	if t != nil {
		fsc.SetUpdatedAt(*t)
	}
	return fsc
}

// SetID sets the "id" field.
func (fsc *FvSessionCreate) SetID(u uuid.UUID) *FvSessionCreate {
	fsc.mutation.SetID(u)
	return fsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fsc *FvSessionCreate) SetNillableID(u *uuid.UUID) *FvSessionCreate {
	if u != nil {
		fsc.SetID(*u)
	}
	return fsc
}

// SetUser sets the "user" edge to the User entity.
func (fsc *FvSessionCreate) SetUser(u *User) *FvSessionCreate {
	return fsc.SetUserID(u.ID)
}

// Mutation returns the FvSessionMutation object of the builder.
func (fsc *FvSessionCreate) Mutation() *FvSessionMutation {
	return fsc.mutation
}

// Save creates the FvSession in the database.
func (fsc *FvSessionCreate) Save(ctx context.Context) (*FvSession, error) {
	fsc.defaults()
	return withHooks(ctx, fsc.sqlSave, fsc.mutation, fsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FvSessionCreate) SaveX(ctx context.Context) *FvSession {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FvSessionCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FvSessionCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FvSessionCreate) defaults() {
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		v := fvsession.DefaultCreatedAt()
		fsc.mutation.SetCreatedAt(v)
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		v := fvsession.DefaultUpdatedAt()
		fsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fsc.mutation.ID(); !ok {
		v := fvsession.DefaultID()
		fsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FvSessionCreate) check() error {
	if _, ok := fsc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "FvSession.access_token"`)}
	}
	if _, ok := fsc.mutation.ExpiresIn(); !ok {
		return &ValidationError{Name: "expires_in", err: errors.New(`ent: missing required field "FvSession.expires_in"`)}
	}
	if _, ok := fsc.mutation.IssuedAt(); !ok {
		return &ValidationError{Name: "issued_at", err: errors.New(`ent: missing required field "FvSession.issued_at"`)}
	}
	if _, ok := fsc.mutation.TokenType(); !ok {
		return &ValidationError{Name: "token_type", err: errors.New(`ent: missing required field "FvSession.token_type"`)}
	}
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FvSession.created_at"`)}
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FvSession.updated_at"`)}
	}
	return nil
}

func (fsc *FvSessionCreate) sqlSave(ctx context.Context) (*FvSession, error) {
	if err := fsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fsc.mutation.id = &_node.ID
	fsc.mutation.done = true
	return _node, nil
}

func (fsc *FvSessionCreate) createSpec() (*FvSession, *sqlgraph.CreateSpec) {
	var (
		_node = &FvSession{config: fsc.config}
		_spec = sqlgraph.NewCreateSpec(fvsession.Table, sqlgraph.NewFieldSpec(fvsession.FieldID, field.TypeUUID))
	)
	if id, ok := fsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fsc.mutation.AccessToken(); ok {
		_spec.SetField(fvsession.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := fsc.mutation.ExpiresIn(); ok {
		_spec.SetField(fvsession.FieldExpiresIn, field.TypeInt32, value)
		_node.ExpiresIn = value
	}
	if value, ok := fsc.mutation.IssuedAt(); ok {
		_spec.SetField(fvsession.FieldIssuedAt, field.TypeString, value)
		_node.IssuedAt = value
	}
	if value, ok := fsc.mutation.TokenType(); ok {
		_spec.SetField(fvsession.FieldTokenType, field.TypeString, value)
		_node.TokenType = value
	}
	if value, ok := fsc.mutation.CreatedAt(); ok {
		_spec.SetField(fvsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fsc.mutation.UpdatedAt(); ok {
		_spec.SetField(fvsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fvsession.UserTable,
			Columns: []string{fvsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FvSessionCreateBulk is the builder for creating many FvSession entities in bulk.
type FvSessionCreateBulk struct {
	config
	builders []*FvSessionCreate
}

// Save creates the FvSession entities in the database.
func (fscb *FvSessionCreateBulk) Save(ctx context.Context) ([]*FvSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FvSession, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FvSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FvSessionCreateBulk) SaveX(ctx context.Context) []*FvSession {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FvSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FvSessionCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
