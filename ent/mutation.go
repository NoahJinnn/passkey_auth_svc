// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/NoahJinnn/passkey_auth_svc/ent/changeset"
	"github.com/NoahJinnn/passkey_auth_svc/ent/email"
	"github.com/NoahJinnn/passkey_auth_svc/ent/jwk"
	"github.com/NoahJinnn/passkey_auth_svc/ent/passcode"
	"github.com/NoahJinnn/passkey_auth_svc/ent/predicate"
	"github.com/NoahJinnn/passkey_auth_svc/ent/primaryemail"
	"github.com/NoahJinnn/passkey_auth_svc/ent/user"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthncredential"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthncredentialtransport"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthnsessiondata"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthnsessiondataallowedcredential"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChangeset                            = "Changeset"
	TypeEmail                                = "Email"
	TypeJwk                                  = "Jwk"
	TypePasscode                             = "Passcode"
	TypePrimaryEmail                         = "PrimaryEmail"
	TypeUser                                 = "User"
	TypeWebauthnCredential                   = "WebauthnCredential"
	TypeWebauthnCredentialTransport          = "WebauthnCredentialTransport"
	TypeWebauthnSessionData                  = "WebauthnSessionData"
	TypeWebauthnSessionDataAllowedCredential = "WebauthnSessionDataAllowedCredential"
)

// ChangesetMutation represents an operation that mutates the Changeset nodes in the graph.
type ChangesetMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	site_id       *string
	db_version    *int32
	adddb_version *int32
	first_launch  *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Changeset, error)
	predicates    []predicate.Changeset
}

var _ ent.Mutation = (*ChangesetMutation)(nil)

// changesetOption allows management of the mutation configuration using functional options.
type changesetOption func(*ChangesetMutation)

// newChangesetMutation creates new mutation for the Changeset entity.
func newChangesetMutation(c config, op Op, opts ...changesetOption) *ChangesetMutation {
	m := &ChangesetMutation{
		config:        c,
		op:            op,
		typ:           TypeChangeset,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChangesetID sets the ID field of the mutation.
func withChangesetID(id uuid.UUID) changesetOption {
	return func(m *ChangesetMutation) {
		var (
			err   error
			once  sync.Once
			value *Changeset
		)
		m.oldValue = func(ctx context.Context) (*Changeset, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Changeset.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChangeset sets the old Changeset of the mutation.
func withChangeset(node *Changeset) changesetOption {
	return func(m *ChangesetMutation) {
		m.oldValue = func(context.Context) (*Changeset, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChangesetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChangesetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Changeset entities.
func (m *ChangesetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChangesetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChangesetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Changeset.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSiteID sets the "site_id" field.
func (m *ChangesetMutation) SetSiteID(s string) {
	m.site_id = &s
}

// SiteID returns the value of the "site_id" field in the mutation.
func (m *ChangesetMutation) SiteID() (r string, exists bool) {
	v := m.site_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteID returns the old "site_id" field's value of the Changeset entity.
// If the Changeset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesetMutation) OldSiteID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteID: %w", err)
	}
	return oldValue.SiteID, nil
}

// ResetSiteID resets all changes to the "site_id" field.
func (m *ChangesetMutation) ResetSiteID() {
	m.site_id = nil
}

// SetDbVersion sets the "db_version" field.
func (m *ChangesetMutation) SetDbVersion(i int32) {
	m.db_version = &i
	m.adddb_version = nil
}

// DbVersion returns the value of the "db_version" field in the mutation.
func (m *ChangesetMutation) DbVersion() (r int32, exists bool) {
	v := m.db_version
	if v == nil {
		return
	}
	return *v, true
}

// OldDbVersion returns the old "db_version" field's value of the Changeset entity.
// If the Changeset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesetMutation) OldDbVersion(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDbVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDbVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDbVersion: %w", err)
	}
	return oldValue.DbVersion, nil
}

// AddDbVersion adds i to the "db_version" field.
func (m *ChangesetMutation) AddDbVersion(i int32) {
	if m.adddb_version != nil {
		*m.adddb_version += i
	} else {
		m.adddb_version = &i
	}
}

// AddedDbVersion returns the value that was added to the "db_version" field in this mutation.
func (m *ChangesetMutation) AddedDbVersion() (r int32, exists bool) {
	v := m.adddb_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetDbVersion resets all changes to the "db_version" field.
func (m *ChangesetMutation) ResetDbVersion() {
	m.db_version = nil
	m.adddb_version = nil
}

// SetFirstLaunch sets the "first_launch" field.
func (m *ChangesetMutation) SetFirstLaunch(b bool) {
	m.first_launch = &b
}

// FirstLaunch returns the value of the "first_launch" field in the mutation.
func (m *ChangesetMutation) FirstLaunch() (r bool, exists bool) {
	v := m.first_launch
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstLaunch returns the old "first_launch" field's value of the Changeset entity.
// If the Changeset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesetMutation) OldFirstLaunch(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstLaunch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstLaunch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstLaunch: %w", err)
	}
	return oldValue.FirstLaunch, nil
}

// ResetFirstLaunch resets all changes to the "first_launch" field.
func (m *ChangesetMutation) ResetFirstLaunch() {
	m.first_launch = nil
}

// SetUserID sets the "user_id" field.
func (m *ChangesetMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ChangesetMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Changeset entity.
// If the Changeset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesetMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ChangesetMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[changeset.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ChangesetMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[changeset.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ChangesetMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, changeset.FieldUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *ChangesetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChangesetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Changeset entity.
// If the Changeset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChangesetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChangesetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChangesetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Changeset entity.
// If the Changeset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChangesetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChangesetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ChangesetMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ChangesetMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ChangesetMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ChangesetMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ChangesetMutation builder.
func (m *ChangesetMutation) Where(ps ...predicate.Changeset) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChangesetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChangesetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Changeset, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChangesetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChangesetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Changeset).
func (m *ChangesetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChangesetMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.site_id != nil {
		fields = append(fields, changeset.FieldSiteID)
	}
	if m.db_version != nil {
		fields = append(fields, changeset.FieldDbVersion)
	}
	if m.first_launch != nil {
		fields = append(fields, changeset.FieldFirstLaunch)
	}
	if m.user != nil {
		fields = append(fields, changeset.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, changeset.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, changeset.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChangesetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case changeset.FieldSiteID:
		return m.SiteID()
	case changeset.FieldDbVersion:
		return m.DbVersion()
	case changeset.FieldFirstLaunch:
		return m.FirstLaunch()
	case changeset.FieldUserID:
		return m.UserID()
	case changeset.FieldCreatedAt:
		return m.CreatedAt()
	case changeset.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChangesetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case changeset.FieldSiteID:
		return m.OldSiteID(ctx)
	case changeset.FieldDbVersion:
		return m.OldDbVersion(ctx)
	case changeset.FieldFirstLaunch:
		return m.OldFirstLaunch(ctx)
	case changeset.FieldUserID:
		return m.OldUserID(ctx)
	case changeset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case changeset.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Changeset field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChangesetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case changeset.FieldSiteID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteID(v)
		return nil
	case changeset.FieldDbVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDbVersion(v)
		return nil
	case changeset.FieldFirstLaunch:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstLaunch(v)
		return nil
	case changeset.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case changeset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case changeset.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Changeset field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChangesetMutation) AddedFields() []string {
	var fields []string
	if m.adddb_version != nil {
		fields = append(fields, changeset.FieldDbVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChangesetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case changeset.FieldDbVersion:
		return m.AddedDbVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChangesetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case changeset.FieldDbVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDbVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Changeset numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChangesetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(changeset.FieldUserID) {
		fields = append(fields, changeset.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChangesetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChangesetMutation) ClearField(name string) error {
	switch name {
	case changeset.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Changeset nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChangesetMutation) ResetField(name string) error {
	switch name {
	case changeset.FieldSiteID:
		m.ResetSiteID()
		return nil
	case changeset.FieldDbVersion:
		m.ResetDbVersion()
		return nil
	case changeset.FieldFirstLaunch:
		m.ResetFirstLaunch()
		return nil
	case changeset.FieldUserID:
		m.ResetUserID()
		return nil
	case changeset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case changeset.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Changeset field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChangesetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, changeset.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChangesetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case changeset.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChangesetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChangesetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChangesetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, changeset.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChangesetMutation) EdgeCleared(name string) bool {
	switch name {
	case changeset.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChangesetMutation) ClearEdge(name string) error {
	switch name {
	case changeset.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Changeset unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChangesetMutation) ResetEdge(name string) error {
	switch name {
	case changeset.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Changeset edge %s", name)
}

// EmailMutation represents an operation that mutates the Email nodes in the graph.
type EmailMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	address              *string
	verified             *bool
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	user                 *uuid.UUID
	cleareduser          bool
	passcodes            map[uuid.UUID]struct{}
	removedpasscodes     map[uuid.UUID]struct{}
	clearedpasscodes     bool
	primary_email        *uuid.UUID
	clearedprimary_email bool
	done                 bool
	oldValue             func(context.Context) (*Email, error)
	predicates           []predicate.Email
}

var _ ent.Mutation = (*EmailMutation)(nil)

// emailOption allows management of the mutation configuration using functional options.
type emailOption func(*EmailMutation)

// newEmailMutation creates new mutation for the Email entity.
func newEmailMutation(c config, op Op, opts ...emailOption) *EmailMutation {
	m := &EmailMutation{
		config:        c,
		op:            op,
		typ:           TypeEmail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailID sets the ID field of the mutation.
func withEmailID(id uuid.UUID) emailOption {
	return func(m *EmailMutation) {
		var (
			err   error
			once  sync.Once
			value *Email
		)
		m.oldValue = func(ctx context.Context) (*Email, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Email.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmail sets the old Email of the mutation.
func withEmail(node *Email) emailOption {
	return func(m *EmailMutation) {
		m.oldValue = func(context.Context) (*Email, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Email entities.
func (m *EmailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Email.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *EmailMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *EmailMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldUserID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *EmailMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[email.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *EmailMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[email.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *EmailMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, email.FieldUserID)
}

// SetAddress sets the "address" field.
func (m *EmailMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *EmailMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *EmailMutation) ResetAddress() {
	m.address = nil
}

// SetVerified sets the "verified" field.
func (m *EmailMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *EmailMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ResetVerified resets all changes to the "verified" field.
func (m *EmailMutation) ResetVerified() {
	m.verified = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EmailMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmailMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmailMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmailMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmailMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Email entity.
// If the Email object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmailMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *EmailMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *EmailMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EmailMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EmailMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddPasscodeIDs adds the "passcodes" edge to the Passcode entity by ids.
func (m *EmailMutation) AddPasscodeIDs(ids ...uuid.UUID) {
	if m.passcodes == nil {
		m.passcodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.passcodes[ids[i]] = struct{}{}
	}
}

// ClearPasscodes clears the "passcodes" edge to the Passcode entity.
func (m *EmailMutation) ClearPasscodes() {
	m.clearedpasscodes = true
}

// PasscodesCleared reports if the "passcodes" edge to the Passcode entity was cleared.
func (m *EmailMutation) PasscodesCleared() bool {
	return m.clearedpasscodes
}

// RemovePasscodeIDs removes the "passcodes" edge to the Passcode entity by IDs.
func (m *EmailMutation) RemovePasscodeIDs(ids ...uuid.UUID) {
	if m.removedpasscodes == nil {
		m.removedpasscodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.passcodes, ids[i])
		m.removedpasscodes[ids[i]] = struct{}{}
	}
}

// RemovedPasscodes returns the removed IDs of the "passcodes" edge to the Passcode entity.
func (m *EmailMutation) RemovedPasscodesIDs() (ids []uuid.UUID) {
	for id := range m.removedpasscodes {
		ids = append(ids, id)
	}
	return
}

// PasscodesIDs returns the "passcodes" edge IDs in the mutation.
func (m *EmailMutation) PasscodesIDs() (ids []uuid.UUID) {
	for id := range m.passcodes {
		ids = append(ids, id)
	}
	return
}

// ResetPasscodes resets all changes to the "passcodes" edge.
func (m *EmailMutation) ResetPasscodes() {
	m.passcodes = nil
	m.clearedpasscodes = false
	m.removedpasscodes = nil
}

// SetPrimaryEmailID sets the "primary_email" edge to the PrimaryEmail entity by id.
func (m *EmailMutation) SetPrimaryEmailID(id uuid.UUID) {
	m.primary_email = &id
}

// ClearPrimaryEmail clears the "primary_email" edge to the PrimaryEmail entity.
func (m *EmailMutation) ClearPrimaryEmail() {
	m.clearedprimary_email = true
}

// PrimaryEmailCleared reports if the "primary_email" edge to the PrimaryEmail entity was cleared.
func (m *EmailMutation) PrimaryEmailCleared() bool {
	return m.clearedprimary_email
}

// PrimaryEmailID returns the "primary_email" edge ID in the mutation.
func (m *EmailMutation) PrimaryEmailID() (id uuid.UUID, exists bool) {
	if m.primary_email != nil {
		return *m.primary_email, true
	}
	return
}

// PrimaryEmailIDs returns the "primary_email" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrimaryEmailID instead. It exists only for internal usage by the builders.
func (m *EmailMutation) PrimaryEmailIDs() (ids []uuid.UUID) {
	if id := m.primary_email; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrimaryEmail resets all changes to the "primary_email" edge.
func (m *EmailMutation) ResetPrimaryEmail() {
	m.primary_email = nil
	m.clearedprimary_email = false
}

// Where appends a list predicates to the EmailMutation builder.
func (m *EmailMutation) Where(ps ...predicate.Email) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Email, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Email).
func (m *EmailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user != nil {
		fields = append(fields, email.FieldUserID)
	}
	if m.address != nil {
		fields = append(fields, email.FieldAddress)
	}
	if m.verified != nil {
		fields = append(fields, email.FieldVerified)
	}
	if m.created_at != nil {
		fields = append(fields, email.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, email.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case email.FieldUserID:
		return m.UserID()
	case email.FieldAddress:
		return m.Address()
	case email.FieldVerified:
		return m.Verified()
	case email.FieldCreatedAt:
		return m.CreatedAt()
	case email.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case email.FieldUserID:
		return m.OldUserID(ctx)
	case email.FieldAddress:
		return m.OldAddress(ctx)
	case email.FieldVerified:
		return m.OldVerified(ctx)
	case email.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case email.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Email field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case email.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case email.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case email.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	case email.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case email.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Email field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Email numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(email.FieldUserID) {
		fields = append(fields, email.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailMutation) ClearField(name string) error {
	switch name {
	case email.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Email nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailMutation) ResetField(name string) error {
	switch name {
	case email.FieldUserID:
		m.ResetUserID()
		return nil
	case email.FieldAddress:
		m.ResetAddress()
		return nil
	case email.FieldVerified:
		m.ResetVerified()
		return nil
	case email.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case email.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Email field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, email.EdgeUser)
	}
	if m.passcodes != nil {
		edges = append(edges, email.EdgePasscodes)
	}
	if m.primary_email != nil {
		edges = append(edges, email.EdgePrimaryEmail)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case email.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case email.EdgePasscodes:
		ids := make([]ent.Value, 0, len(m.passcodes))
		for id := range m.passcodes {
			ids = append(ids, id)
		}
		return ids
	case email.EdgePrimaryEmail:
		if id := m.primary_email; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedpasscodes != nil {
		edges = append(edges, email.EdgePasscodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case email.EdgePasscodes:
		ids := make([]ent.Value, 0, len(m.removedpasscodes))
		for id := range m.removedpasscodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, email.EdgeUser)
	}
	if m.clearedpasscodes {
		edges = append(edges, email.EdgePasscodes)
	}
	if m.clearedprimary_email {
		edges = append(edges, email.EdgePrimaryEmail)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailMutation) EdgeCleared(name string) bool {
	switch name {
	case email.EdgeUser:
		return m.cleareduser
	case email.EdgePasscodes:
		return m.clearedpasscodes
	case email.EdgePrimaryEmail:
		return m.clearedprimary_email
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailMutation) ClearEdge(name string) error {
	switch name {
	case email.EdgeUser:
		m.ClearUser()
		return nil
	case email.EdgePrimaryEmail:
		m.ClearPrimaryEmail()
		return nil
	}
	return fmt.Errorf("unknown Email unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailMutation) ResetEdge(name string) error {
	switch name {
	case email.EdgeUser:
		m.ResetUser()
		return nil
	case email.EdgePasscodes:
		m.ResetPasscodes()
		return nil
	case email.EdgePrimaryEmail:
		m.ResetPrimaryEmail()
		return nil
	}
	return fmt.Errorf("unknown Email edge %s", name)
}

// JwkMutation represents an operation that mutates the Jwk nodes in the graph.
type JwkMutation struct {
	config
	op            Op
	typ           string
	id            *uint
	key_data      *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Jwk, error)
	predicates    []predicate.Jwk
}

var _ ent.Mutation = (*JwkMutation)(nil)

// jwkOption allows management of the mutation configuration using functional options.
type jwkOption func(*JwkMutation)

// newJwkMutation creates new mutation for the Jwk entity.
func newJwkMutation(c config, op Op, opts ...jwkOption) *JwkMutation {
	m := &JwkMutation{
		config:        c,
		op:            op,
		typ:           TypeJwk,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJwkID sets the ID field of the mutation.
func withJwkID(id uint) jwkOption {
	return func(m *JwkMutation) {
		var (
			err   error
			once  sync.Once
			value *Jwk
		)
		m.oldValue = func(ctx context.Context) (*Jwk, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Jwk.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJwk sets the old Jwk of the mutation.
func withJwk(node *Jwk) jwkOption {
	return func(m *JwkMutation) {
		m.oldValue = func(context.Context) (*Jwk, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JwkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JwkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Jwk entities.
func (m *JwkMutation) SetID(id uint) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JwkMutation) ID() (id uint, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JwkMutation) IDs(ctx context.Context) ([]uint, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Jwk.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKeyData sets the "key_data" field.
func (m *JwkMutation) SetKeyData(s string) {
	m.key_data = &s
}

// KeyData returns the value of the "key_data" field in the mutation.
func (m *JwkMutation) KeyData() (r string, exists bool) {
	v := m.key_data
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyData returns the old "key_data" field's value of the Jwk entity.
// If the Jwk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JwkMutation) OldKeyData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyData: %w", err)
	}
	return oldValue.KeyData, nil
}

// ResetKeyData resets all changes to the "key_data" field.
func (m *JwkMutation) ResetKeyData() {
	m.key_data = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *JwkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *JwkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Jwk entity.
// If the Jwk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JwkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *JwkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the JwkMutation builder.
func (m *JwkMutation) Where(ps ...predicate.Jwk) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JwkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JwkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Jwk, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JwkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JwkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Jwk).
func (m *JwkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JwkMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.key_data != nil {
		fields = append(fields, jwk.FieldKeyData)
	}
	if m.created_at != nil {
		fields = append(fields, jwk.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JwkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jwk.FieldKeyData:
		return m.KeyData()
	case jwk.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JwkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case jwk.FieldKeyData:
		return m.OldKeyData(ctx)
	case jwk.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Jwk field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JwkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jwk.FieldKeyData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyData(v)
		return nil
	case jwk.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Jwk field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JwkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JwkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JwkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Jwk numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JwkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JwkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JwkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Jwk nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JwkMutation) ResetField(name string) error {
	switch name {
	case jwk.FieldKeyData:
		m.ResetKeyData()
		return nil
	case jwk.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Jwk field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JwkMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JwkMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JwkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JwkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JwkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JwkMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JwkMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Jwk unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JwkMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Jwk edge %s", name)
}

// PasscodeMutation represents an operation that mutates the Passcode nodes in the graph.
type PasscodeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	ttl           *int32
	addttl        *int32
	code          *string
	try_count     *int32
	addtry_count  *int32
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	email         *uuid.UUID
	clearedemail  bool
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Passcode, error)
	predicates    []predicate.Passcode
}

var _ ent.Mutation = (*PasscodeMutation)(nil)

// passcodeOption allows management of the mutation configuration using functional options.
type passcodeOption func(*PasscodeMutation)

// newPasscodeMutation creates new mutation for the Passcode entity.
func newPasscodeMutation(c config, op Op, opts ...passcodeOption) *PasscodeMutation {
	m := &PasscodeMutation{
		config:        c,
		op:            op,
		typ:           TypePasscode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPasscodeID sets the ID field of the mutation.
func withPasscodeID(id uuid.UUID) passcodeOption {
	return func(m *PasscodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Passcode
		)
		m.oldValue = func(ctx context.Context) (*Passcode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Passcode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPasscode sets the old Passcode of the mutation.
func withPasscode(node *Passcode) passcodeOption {
	return func(m *PasscodeMutation) {
		m.oldValue = func(context.Context) (*Passcode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PasscodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PasscodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Passcode entities.
func (m *PasscodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PasscodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PasscodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Passcode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *PasscodeMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PasscodeMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *PasscodeMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[passcode.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *PasscodeMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[passcode.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PasscodeMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, passcode.FieldUserID)
}

// SetTTL sets the "ttl" field.
func (m *PasscodeMutation) SetTTL(i int32) {
	m.ttl = &i
	m.addttl = nil
}

// TTL returns the value of the "ttl" field in the mutation.
func (m *PasscodeMutation) TTL() (r int32, exists bool) {
	v := m.ttl
	if v == nil {
		return
	}
	return *v, true
}

// OldTTL returns the old "ttl" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldTTL(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTTL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTTL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTTL: %w", err)
	}
	return oldValue.TTL, nil
}

// AddTTL adds i to the "ttl" field.
func (m *PasscodeMutation) AddTTL(i int32) {
	if m.addttl != nil {
		*m.addttl += i
	} else {
		m.addttl = &i
	}
}

// AddedTTL returns the value that was added to the "ttl" field in this mutation.
func (m *PasscodeMutation) AddedTTL() (r int32, exists bool) {
	v := m.addttl
	if v == nil {
		return
	}
	return *v, true
}

// ResetTTL resets all changes to the "ttl" field.
func (m *PasscodeMutation) ResetTTL() {
	m.ttl = nil
	m.addttl = nil
}

// SetCode sets the "code" field.
func (m *PasscodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PasscodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PasscodeMutation) ResetCode() {
	m.code = nil
}

// SetTryCount sets the "try_count" field.
func (m *PasscodeMutation) SetTryCount(i int32) {
	m.try_count = &i
	m.addtry_count = nil
}

// TryCount returns the value of the "try_count" field in the mutation.
func (m *PasscodeMutation) TryCount() (r int32, exists bool) {
	v := m.try_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTryCount returns the old "try_count" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldTryCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTryCount: %w", err)
	}
	return oldValue.TryCount, nil
}

// AddTryCount adds i to the "try_count" field.
func (m *PasscodeMutation) AddTryCount(i int32) {
	if m.addtry_count != nil {
		*m.addtry_count += i
	} else {
		m.addtry_count = &i
	}
}

// AddedTryCount returns the value that was added to the "try_count" field in this mutation.
func (m *PasscodeMutation) AddedTryCount() (r int32, exists bool) {
	v := m.addtry_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetTryCount resets all changes to the "try_count" field.
func (m *PasscodeMutation) ResetTryCount() {
	m.try_count = nil
	m.addtry_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PasscodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PasscodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PasscodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PasscodeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PasscodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PasscodeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetEmailID sets the "email_id" field.
func (m *PasscodeMutation) SetEmailID(u uuid.UUID) {
	m.email = &u
}

// EmailID returns the value of the "email_id" field in the mutation.
func (m *PasscodeMutation) EmailID() (r uuid.UUID, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailID returns the old "email_id" field's value of the Passcode entity.
// If the Passcode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasscodeMutation) OldEmailID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailID: %w", err)
	}
	return oldValue.EmailID, nil
}

// ClearEmailID clears the value of the "email_id" field.
func (m *PasscodeMutation) ClearEmailID() {
	m.email = nil
	m.clearedFields[passcode.FieldEmailID] = struct{}{}
}

// EmailIDCleared returns if the "email_id" field was cleared in this mutation.
func (m *PasscodeMutation) EmailIDCleared() bool {
	_, ok := m.clearedFields[passcode.FieldEmailID]
	return ok
}

// ResetEmailID resets all changes to the "email_id" field.
func (m *PasscodeMutation) ResetEmailID() {
	m.email = nil
	delete(m.clearedFields, passcode.FieldEmailID)
}

// ClearEmail clears the "email" edge to the Email entity.
func (m *PasscodeMutation) ClearEmail() {
	m.clearedemail = true
}

// EmailCleared reports if the "email" edge to the Email entity was cleared.
func (m *PasscodeMutation) EmailCleared() bool {
	return m.EmailIDCleared() || m.clearedemail
}

// EmailIDs returns the "email" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmailID instead. It exists only for internal usage by the builders.
func (m *PasscodeMutation) EmailIDs() (ids []uuid.UUID) {
	if id := m.email; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmail resets all changes to the "email" edge.
func (m *PasscodeMutation) ResetEmail() {
	m.email = nil
	m.clearedemail = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *PasscodeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PasscodeMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PasscodeMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PasscodeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PasscodeMutation builder.
func (m *PasscodeMutation) Where(ps ...predicate.Passcode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PasscodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PasscodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Passcode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PasscodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PasscodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Passcode).
func (m *PasscodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PasscodeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user != nil {
		fields = append(fields, passcode.FieldUserID)
	}
	if m.ttl != nil {
		fields = append(fields, passcode.FieldTTL)
	}
	if m.code != nil {
		fields = append(fields, passcode.FieldCode)
	}
	if m.try_count != nil {
		fields = append(fields, passcode.FieldTryCount)
	}
	if m.created_at != nil {
		fields = append(fields, passcode.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, passcode.FieldUpdatedAt)
	}
	if m.email != nil {
		fields = append(fields, passcode.FieldEmailID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PasscodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case passcode.FieldUserID:
		return m.UserID()
	case passcode.FieldTTL:
		return m.TTL()
	case passcode.FieldCode:
		return m.Code()
	case passcode.FieldTryCount:
		return m.TryCount()
	case passcode.FieldCreatedAt:
		return m.CreatedAt()
	case passcode.FieldUpdatedAt:
		return m.UpdatedAt()
	case passcode.FieldEmailID:
		return m.EmailID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PasscodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case passcode.FieldUserID:
		return m.OldUserID(ctx)
	case passcode.FieldTTL:
		return m.OldTTL(ctx)
	case passcode.FieldCode:
		return m.OldCode(ctx)
	case passcode.FieldTryCount:
		return m.OldTryCount(ctx)
	case passcode.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case passcode.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case passcode.FieldEmailID:
		return m.OldEmailID(ctx)
	}
	return nil, fmt.Errorf("unknown Passcode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PasscodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case passcode.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case passcode.FieldTTL:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTTL(v)
		return nil
	case passcode.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case passcode.FieldTryCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTryCount(v)
		return nil
	case passcode.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case passcode.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case passcode.FieldEmailID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailID(v)
		return nil
	}
	return fmt.Errorf("unknown Passcode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PasscodeMutation) AddedFields() []string {
	var fields []string
	if m.addttl != nil {
		fields = append(fields, passcode.FieldTTL)
	}
	if m.addtry_count != nil {
		fields = append(fields, passcode.FieldTryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PasscodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case passcode.FieldTTL:
		return m.AddedTTL()
	case passcode.FieldTryCount:
		return m.AddedTryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PasscodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case passcode.FieldTTL:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTTL(v)
		return nil
	case passcode.FieldTryCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTryCount(v)
		return nil
	}
	return fmt.Errorf("unknown Passcode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PasscodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(passcode.FieldUserID) {
		fields = append(fields, passcode.FieldUserID)
	}
	if m.FieldCleared(passcode.FieldEmailID) {
		fields = append(fields, passcode.FieldEmailID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PasscodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PasscodeMutation) ClearField(name string) error {
	switch name {
	case passcode.FieldUserID:
		m.ClearUserID()
		return nil
	case passcode.FieldEmailID:
		m.ClearEmailID()
		return nil
	}
	return fmt.Errorf("unknown Passcode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PasscodeMutation) ResetField(name string) error {
	switch name {
	case passcode.FieldUserID:
		m.ResetUserID()
		return nil
	case passcode.FieldTTL:
		m.ResetTTL()
		return nil
	case passcode.FieldCode:
		m.ResetCode()
		return nil
	case passcode.FieldTryCount:
		m.ResetTryCount()
		return nil
	case passcode.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case passcode.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case passcode.FieldEmailID:
		m.ResetEmailID()
		return nil
	}
	return fmt.Errorf("unknown Passcode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PasscodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.email != nil {
		edges = append(edges, passcode.EdgeEmail)
	}
	if m.user != nil {
		edges = append(edges, passcode.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PasscodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case passcode.EdgeEmail:
		if id := m.email; id != nil {
			return []ent.Value{*id}
		}
	case passcode.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PasscodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PasscodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PasscodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedemail {
		edges = append(edges, passcode.EdgeEmail)
	}
	if m.cleareduser {
		edges = append(edges, passcode.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PasscodeMutation) EdgeCleared(name string) bool {
	switch name {
	case passcode.EdgeEmail:
		return m.clearedemail
	case passcode.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PasscodeMutation) ClearEdge(name string) error {
	switch name {
	case passcode.EdgeEmail:
		m.ClearEmail()
		return nil
	case passcode.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Passcode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PasscodeMutation) ResetEdge(name string) error {
	switch name {
	case passcode.EdgeEmail:
		m.ResetEmail()
		return nil
	case passcode.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Passcode edge %s", name)
}

// PrimaryEmailMutation represents an operation that mutates the PrimaryEmail nodes in the graph.
type PrimaryEmailMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	email         *uuid.UUID
	clearedemail  bool
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*PrimaryEmail, error)
	predicates    []predicate.PrimaryEmail
}

var _ ent.Mutation = (*PrimaryEmailMutation)(nil)

// primaryemailOption allows management of the mutation configuration using functional options.
type primaryemailOption func(*PrimaryEmailMutation)

// newPrimaryEmailMutation creates new mutation for the PrimaryEmail entity.
func newPrimaryEmailMutation(c config, op Op, opts ...primaryemailOption) *PrimaryEmailMutation {
	m := &PrimaryEmailMutation{
		config:        c,
		op:            op,
		typ:           TypePrimaryEmail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrimaryEmailID sets the ID field of the mutation.
func withPrimaryEmailID(id uuid.UUID) primaryemailOption {
	return func(m *PrimaryEmailMutation) {
		var (
			err   error
			once  sync.Once
			value *PrimaryEmail
		)
		m.oldValue = func(ctx context.Context) (*PrimaryEmail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PrimaryEmail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrimaryEmail sets the old PrimaryEmail of the mutation.
func withPrimaryEmail(node *PrimaryEmail) primaryemailOption {
	return func(m *PrimaryEmailMutation) {
		m.oldValue = func(context.Context) (*PrimaryEmail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrimaryEmailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrimaryEmailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PrimaryEmail entities.
func (m *PrimaryEmailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrimaryEmailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PrimaryEmailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PrimaryEmail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmailID sets the "email_id" field.
func (m *PrimaryEmailMutation) SetEmailID(u uuid.UUID) {
	m.email = &u
}

// EmailID returns the value of the "email_id" field in the mutation.
func (m *PrimaryEmailMutation) EmailID() (r uuid.UUID, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailID returns the old "email_id" field's value of the PrimaryEmail entity.
// If the PrimaryEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrimaryEmailMutation) OldEmailID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailID: %w", err)
	}
	return oldValue.EmailID, nil
}

// ClearEmailID clears the value of the "email_id" field.
func (m *PrimaryEmailMutation) ClearEmailID() {
	m.email = nil
	m.clearedFields[primaryemail.FieldEmailID] = struct{}{}
}

// EmailIDCleared returns if the "email_id" field was cleared in this mutation.
func (m *PrimaryEmailMutation) EmailIDCleared() bool {
	_, ok := m.clearedFields[primaryemail.FieldEmailID]
	return ok
}

// ResetEmailID resets all changes to the "email_id" field.
func (m *PrimaryEmailMutation) ResetEmailID() {
	m.email = nil
	delete(m.clearedFields, primaryemail.FieldEmailID)
}

// SetUserID sets the "user_id" field.
func (m *PrimaryEmailMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PrimaryEmailMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the PrimaryEmail entity.
// If the PrimaryEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrimaryEmailMutation) OldUserID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *PrimaryEmailMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[primaryemail.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *PrimaryEmailMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[primaryemail.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PrimaryEmailMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, primaryemail.FieldUserID)
}

// SetCreatedAt sets the "created_at" field.
func (m *PrimaryEmailMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PrimaryEmailMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PrimaryEmail entity.
// If the PrimaryEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrimaryEmailMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PrimaryEmailMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PrimaryEmailMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PrimaryEmailMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PrimaryEmail entity.
// If the PrimaryEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrimaryEmailMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PrimaryEmailMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearEmail clears the "email" edge to the Email entity.
func (m *PrimaryEmailMutation) ClearEmail() {
	m.clearedemail = true
}

// EmailCleared reports if the "email" edge to the Email entity was cleared.
func (m *PrimaryEmailMutation) EmailCleared() bool {
	return m.EmailIDCleared() || m.clearedemail
}

// EmailIDs returns the "email" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmailID instead. It exists only for internal usage by the builders.
func (m *PrimaryEmailMutation) EmailIDs() (ids []uuid.UUID) {
	if id := m.email; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmail resets all changes to the "email" edge.
func (m *PrimaryEmailMutation) ResetEmail() {
	m.email = nil
	m.clearedemail = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *PrimaryEmailMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PrimaryEmailMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PrimaryEmailMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PrimaryEmailMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PrimaryEmailMutation builder.
func (m *PrimaryEmailMutation) Where(ps ...predicate.PrimaryEmail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PrimaryEmailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PrimaryEmailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PrimaryEmail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PrimaryEmailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PrimaryEmailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PrimaryEmail).
func (m *PrimaryEmailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrimaryEmailMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, primaryemail.FieldEmailID)
	}
	if m.user != nil {
		fields = append(fields, primaryemail.FieldUserID)
	}
	if m.created_at != nil {
		fields = append(fields, primaryemail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, primaryemail.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrimaryEmailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case primaryemail.FieldEmailID:
		return m.EmailID()
	case primaryemail.FieldUserID:
		return m.UserID()
	case primaryemail.FieldCreatedAt:
		return m.CreatedAt()
	case primaryemail.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrimaryEmailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case primaryemail.FieldEmailID:
		return m.OldEmailID(ctx)
	case primaryemail.FieldUserID:
		return m.OldUserID(ctx)
	case primaryemail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case primaryemail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PrimaryEmail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrimaryEmailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case primaryemail.FieldEmailID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailID(v)
		return nil
	case primaryemail.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case primaryemail.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case primaryemail.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PrimaryEmail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrimaryEmailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrimaryEmailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrimaryEmailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PrimaryEmail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrimaryEmailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(primaryemail.FieldEmailID) {
		fields = append(fields, primaryemail.FieldEmailID)
	}
	if m.FieldCleared(primaryemail.FieldUserID) {
		fields = append(fields, primaryemail.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrimaryEmailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrimaryEmailMutation) ClearField(name string) error {
	switch name {
	case primaryemail.FieldEmailID:
		m.ClearEmailID()
		return nil
	case primaryemail.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown PrimaryEmail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrimaryEmailMutation) ResetField(name string) error {
	switch name {
	case primaryemail.FieldEmailID:
		m.ResetEmailID()
		return nil
	case primaryemail.FieldUserID:
		m.ResetUserID()
		return nil
	case primaryemail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case primaryemail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PrimaryEmail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrimaryEmailMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.email != nil {
		edges = append(edges, primaryemail.EdgeEmail)
	}
	if m.user != nil {
		edges = append(edges, primaryemail.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrimaryEmailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case primaryemail.EdgeEmail:
		if id := m.email; id != nil {
			return []ent.Value{*id}
		}
	case primaryemail.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrimaryEmailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrimaryEmailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrimaryEmailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedemail {
		edges = append(edges, primaryemail.EdgeEmail)
	}
	if m.cleareduser {
		edges = append(edges, primaryemail.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrimaryEmailMutation) EdgeCleared(name string) bool {
	switch name {
	case primaryemail.EdgeEmail:
		return m.clearedemail
	case primaryemail.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrimaryEmailMutation) ClearEdge(name string) error {
	switch name {
	case primaryemail.EdgeEmail:
		m.ClearEmail()
		return nil
	case primaryemail.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown PrimaryEmail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrimaryEmailMutation) ResetEdge(name string) error {
	switch name {
	case primaryemail.EdgeEmail:
		m.ResetEmail()
		return nil
	case primaryemail.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown PrimaryEmail edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	created_at                  *time.Time
	updated_at                  *time.Time
	clearedFields               map[string]struct{}
	emails                      map[uuid.UUID]struct{}
	removedemails               map[uuid.UUID]struct{}
	clearedemails               bool
	passcodes                   map[uuid.UUID]struct{}
	removedpasscodes            map[uuid.UUID]struct{}
	clearedpasscodes            bool
	webauthn_credentials        map[string]struct{}
	removedwebauthn_credentials map[string]struct{}
	clearedwebauthn_credentials bool
	primary_email               *uuid.UUID
	clearedprimary_email        bool
	changesets                  *uuid.UUID
	clearedchangesets           bool
	done                        bool
	oldValue                    func(context.Context) (*User, error)
	predicates                  []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddEmailIDs adds the "emails" edge to the Email entity by ids.
func (m *UserMutation) AddEmailIDs(ids ...uuid.UUID) {
	if m.emails == nil {
		m.emails = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.emails[ids[i]] = struct{}{}
	}
}

// ClearEmails clears the "emails" edge to the Email entity.
func (m *UserMutation) ClearEmails() {
	m.clearedemails = true
}

// EmailsCleared reports if the "emails" edge to the Email entity was cleared.
func (m *UserMutation) EmailsCleared() bool {
	return m.clearedemails
}

// RemoveEmailIDs removes the "emails" edge to the Email entity by IDs.
func (m *UserMutation) RemoveEmailIDs(ids ...uuid.UUID) {
	if m.removedemails == nil {
		m.removedemails = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.emails, ids[i])
		m.removedemails[ids[i]] = struct{}{}
	}
}

// RemovedEmails returns the removed IDs of the "emails" edge to the Email entity.
func (m *UserMutation) RemovedEmailsIDs() (ids []uuid.UUID) {
	for id := range m.removedemails {
		ids = append(ids, id)
	}
	return
}

// EmailsIDs returns the "emails" edge IDs in the mutation.
func (m *UserMutation) EmailsIDs() (ids []uuid.UUID) {
	for id := range m.emails {
		ids = append(ids, id)
	}
	return
}

// ResetEmails resets all changes to the "emails" edge.
func (m *UserMutation) ResetEmails() {
	m.emails = nil
	m.clearedemails = false
	m.removedemails = nil
}

// AddPasscodeIDs adds the "passcodes" edge to the Passcode entity by ids.
func (m *UserMutation) AddPasscodeIDs(ids ...uuid.UUID) {
	if m.passcodes == nil {
		m.passcodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.passcodes[ids[i]] = struct{}{}
	}
}

// ClearPasscodes clears the "passcodes" edge to the Passcode entity.
func (m *UserMutation) ClearPasscodes() {
	m.clearedpasscodes = true
}

// PasscodesCleared reports if the "passcodes" edge to the Passcode entity was cleared.
func (m *UserMutation) PasscodesCleared() bool {
	return m.clearedpasscodes
}

// RemovePasscodeIDs removes the "passcodes" edge to the Passcode entity by IDs.
func (m *UserMutation) RemovePasscodeIDs(ids ...uuid.UUID) {
	if m.removedpasscodes == nil {
		m.removedpasscodes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.passcodes, ids[i])
		m.removedpasscodes[ids[i]] = struct{}{}
	}
}

// RemovedPasscodes returns the removed IDs of the "passcodes" edge to the Passcode entity.
func (m *UserMutation) RemovedPasscodesIDs() (ids []uuid.UUID) {
	for id := range m.removedpasscodes {
		ids = append(ids, id)
	}
	return
}

// PasscodesIDs returns the "passcodes" edge IDs in the mutation.
func (m *UserMutation) PasscodesIDs() (ids []uuid.UUID) {
	for id := range m.passcodes {
		ids = append(ids, id)
	}
	return
}

// ResetPasscodes resets all changes to the "passcodes" edge.
func (m *UserMutation) ResetPasscodes() {
	m.passcodes = nil
	m.clearedpasscodes = false
	m.removedpasscodes = nil
}

// AddWebauthnCredentialIDs adds the "webauthn_credentials" edge to the WebauthnCredential entity by ids.
func (m *UserMutation) AddWebauthnCredentialIDs(ids ...string) {
	if m.webauthn_credentials == nil {
		m.webauthn_credentials = make(map[string]struct{})
	}
	for i := range ids {
		m.webauthn_credentials[ids[i]] = struct{}{}
	}
}

// ClearWebauthnCredentials clears the "webauthn_credentials" edge to the WebauthnCredential entity.
func (m *UserMutation) ClearWebauthnCredentials() {
	m.clearedwebauthn_credentials = true
}

// WebauthnCredentialsCleared reports if the "webauthn_credentials" edge to the WebauthnCredential entity was cleared.
func (m *UserMutation) WebauthnCredentialsCleared() bool {
	return m.clearedwebauthn_credentials
}

// RemoveWebauthnCredentialIDs removes the "webauthn_credentials" edge to the WebauthnCredential entity by IDs.
func (m *UserMutation) RemoveWebauthnCredentialIDs(ids ...string) {
	if m.removedwebauthn_credentials == nil {
		m.removedwebauthn_credentials = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.webauthn_credentials, ids[i])
		m.removedwebauthn_credentials[ids[i]] = struct{}{}
	}
}

// RemovedWebauthnCredentials returns the removed IDs of the "webauthn_credentials" edge to the WebauthnCredential entity.
func (m *UserMutation) RemovedWebauthnCredentialsIDs() (ids []string) {
	for id := range m.removedwebauthn_credentials {
		ids = append(ids, id)
	}
	return
}

// WebauthnCredentialsIDs returns the "webauthn_credentials" edge IDs in the mutation.
func (m *UserMutation) WebauthnCredentialsIDs() (ids []string) {
	for id := range m.webauthn_credentials {
		ids = append(ids, id)
	}
	return
}

// ResetWebauthnCredentials resets all changes to the "webauthn_credentials" edge.
func (m *UserMutation) ResetWebauthnCredentials() {
	m.webauthn_credentials = nil
	m.clearedwebauthn_credentials = false
	m.removedwebauthn_credentials = nil
}

// SetPrimaryEmailID sets the "primary_email" edge to the PrimaryEmail entity by id.
func (m *UserMutation) SetPrimaryEmailID(id uuid.UUID) {
	m.primary_email = &id
}

// ClearPrimaryEmail clears the "primary_email" edge to the PrimaryEmail entity.
func (m *UserMutation) ClearPrimaryEmail() {
	m.clearedprimary_email = true
}

// PrimaryEmailCleared reports if the "primary_email" edge to the PrimaryEmail entity was cleared.
func (m *UserMutation) PrimaryEmailCleared() bool {
	return m.clearedprimary_email
}

// PrimaryEmailID returns the "primary_email" edge ID in the mutation.
func (m *UserMutation) PrimaryEmailID() (id uuid.UUID, exists bool) {
	if m.primary_email != nil {
		return *m.primary_email, true
	}
	return
}

// PrimaryEmailIDs returns the "primary_email" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrimaryEmailID instead. It exists only for internal usage by the builders.
func (m *UserMutation) PrimaryEmailIDs() (ids []uuid.UUID) {
	if id := m.primary_email; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrimaryEmail resets all changes to the "primary_email" edge.
func (m *UserMutation) ResetPrimaryEmail() {
	m.primary_email = nil
	m.clearedprimary_email = false
}

// SetChangesetsID sets the "changesets" edge to the Changeset entity by id.
func (m *UserMutation) SetChangesetsID(id uuid.UUID) {
	m.changesets = &id
}

// ClearChangesets clears the "changesets" edge to the Changeset entity.
func (m *UserMutation) ClearChangesets() {
	m.clearedchangesets = true
}

// ChangesetsCleared reports if the "changesets" edge to the Changeset entity was cleared.
func (m *UserMutation) ChangesetsCleared() bool {
	return m.clearedchangesets
}

// ChangesetsID returns the "changesets" edge ID in the mutation.
func (m *UserMutation) ChangesetsID() (id uuid.UUID, exists bool) {
	if m.changesets != nil {
		return *m.changesets, true
	}
	return
}

// ChangesetsIDs returns the "changesets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChangesetsID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ChangesetsIDs() (ids []uuid.UUID) {
	if id := m.changesets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChangesets resets all changes to the "changesets" edge.
func (m *UserMutation) ResetChangesets() {
	m.changesets = nil
	m.clearedchangesets = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.emails != nil {
		edges = append(edges, user.EdgeEmails)
	}
	if m.passcodes != nil {
		edges = append(edges, user.EdgePasscodes)
	}
	if m.webauthn_credentials != nil {
		edges = append(edges, user.EdgeWebauthnCredentials)
	}
	if m.primary_email != nil {
		edges = append(edges, user.EdgePrimaryEmail)
	}
	if m.changesets != nil {
		edges = append(edges, user.EdgeChangesets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEmails:
		ids := make([]ent.Value, 0, len(m.emails))
		for id := range m.emails {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePasscodes:
		ids := make([]ent.Value, 0, len(m.passcodes))
		for id := range m.passcodes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWebauthnCredentials:
		ids := make([]ent.Value, 0, len(m.webauthn_credentials))
		for id := range m.webauthn_credentials {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePrimaryEmail:
		if id := m.primary_email; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeChangesets:
		if id := m.changesets; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedemails != nil {
		edges = append(edges, user.EdgeEmails)
	}
	if m.removedpasscodes != nil {
		edges = append(edges, user.EdgePasscodes)
	}
	if m.removedwebauthn_credentials != nil {
		edges = append(edges, user.EdgeWebauthnCredentials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEmails:
		ids := make([]ent.Value, 0, len(m.removedemails))
		for id := range m.removedemails {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePasscodes:
		ids := make([]ent.Value, 0, len(m.removedpasscodes))
		for id := range m.removedpasscodes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWebauthnCredentials:
		ids := make([]ent.Value, 0, len(m.removedwebauthn_credentials))
		for id := range m.removedwebauthn_credentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedemails {
		edges = append(edges, user.EdgeEmails)
	}
	if m.clearedpasscodes {
		edges = append(edges, user.EdgePasscodes)
	}
	if m.clearedwebauthn_credentials {
		edges = append(edges, user.EdgeWebauthnCredentials)
	}
	if m.clearedprimary_email {
		edges = append(edges, user.EdgePrimaryEmail)
	}
	if m.clearedchangesets {
		edges = append(edges, user.EdgeChangesets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeEmails:
		return m.clearedemails
	case user.EdgePasscodes:
		return m.clearedpasscodes
	case user.EdgeWebauthnCredentials:
		return m.clearedwebauthn_credentials
	case user.EdgePrimaryEmail:
		return m.clearedprimary_email
	case user.EdgeChangesets:
		return m.clearedchangesets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgePrimaryEmail:
		m.ClearPrimaryEmail()
		return nil
	case user.EdgeChangesets:
		m.ClearChangesets()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeEmails:
		m.ResetEmails()
		return nil
	case user.EdgePasscodes:
		m.ResetPasscodes()
		return nil
	case user.EdgeWebauthnCredentials:
		m.ResetWebauthnCredentials()
		return nil
	case user.EdgePrimaryEmail:
		m.ResetPrimaryEmail()
		return nil
	case user.EdgeChangesets:
		m.ResetChangesets()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WebauthnCredentialMutation represents an operation that mutates the WebauthnCredential nodes in the graph.
type WebauthnCredentialMutation struct {
	config
	op                                    Op
	typ                                   string
	id                                    *string
	public_key                            *string
	attestation_type                      *string
	aaguid                                *uuid.UUID
	sign_count                            *int32
	addsign_count                         *int32
	created_at                            *time.Time
	updated_at                            *time.Time
	name                                  *string
	backup_eligible                       *bool
	backup_state                          *bool
	last_used_at                          *time.Time
	clearedFields                         map[string]struct{}
	webauthn_credential_transports        map[uuid.UUID]struct{}
	removedwebauthn_credential_transports map[uuid.UUID]struct{}
	clearedwebauthn_credential_transports bool
	user                                  *uuid.UUID
	cleareduser                           bool
	done                                  bool
	oldValue                              func(context.Context) (*WebauthnCredential, error)
	predicates                            []predicate.WebauthnCredential
}

var _ ent.Mutation = (*WebauthnCredentialMutation)(nil)

// webauthncredentialOption allows management of the mutation configuration using functional options.
type webauthncredentialOption func(*WebauthnCredentialMutation)

// newWebauthnCredentialMutation creates new mutation for the WebauthnCredential entity.
func newWebauthnCredentialMutation(c config, op Op, opts ...webauthncredentialOption) *WebauthnCredentialMutation {
	m := &WebauthnCredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeWebauthnCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebauthnCredentialID sets the ID field of the mutation.
func withWebauthnCredentialID(id string) webauthncredentialOption {
	return func(m *WebauthnCredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *WebauthnCredential
		)
		m.oldValue = func(ctx context.Context) (*WebauthnCredential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebauthnCredential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebauthnCredential sets the old WebauthnCredential of the mutation.
func withWebauthnCredential(node *WebauthnCredential) webauthncredentialOption {
	return func(m *WebauthnCredentialMutation) {
		m.oldValue = func(context.Context) (*WebauthnCredential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebauthnCredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebauthnCredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WebauthnCredential entities.
func (m *WebauthnCredentialMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebauthnCredentialMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebauthnCredentialMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebauthnCredential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *WebauthnCredentialMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WebauthnCredentialMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *WebauthnCredentialMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[webauthncredential.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *WebauthnCredentialMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[webauthncredential.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WebauthnCredentialMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, webauthncredential.FieldUserID)
}

// SetPublicKey sets the "public_key" field.
func (m *WebauthnCredentialMutation) SetPublicKey(s string) {
	m.public_key = &s
}

// PublicKey returns the value of the "public_key" field in the mutation.
func (m *WebauthnCredentialMutation) PublicKey() (r string, exists bool) {
	v := m.public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKey returns the old "public_key" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldPublicKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKey: %w", err)
	}
	return oldValue.PublicKey, nil
}

// ResetPublicKey resets all changes to the "public_key" field.
func (m *WebauthnCredentialMutation) ResetPublicKey() {
	m.public_key = nil
}

// SetAttestationType sets the "attestation_type" field.
func (m *WebauthnCredentialMutation) SetAttestationType(s string) {
	m.attestation_type = &s
}

// AttestationType returns the value of the "attestation_type" field in the mutation.
func (m *WebauthnCredentialMutation) AttestationType() (r string, exists bool) {
	v := m.attestation_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAttestationType returns the old "attestation_type" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldAttestationType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttestationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttestationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttestationType: %w", err)
	}
	return oldValue.AttestationType, nil
}

// ResetAttestationType resets all changes to the "attestation_type" field.
func (m *WebauthnCredentialMutation) ResetAttestationType() {
	m.attestation_type = nil
}

// SetAaguid sets the "aaguid" field.
func (m *WebauthnCredentialMutation) SetAaguid(u uuid.UUID) {
	m.aaguid = &u
}

// Aaguid returns the value of the "aaguid" field in the mutation.
func (m *WebauthnCredentialMutation) Aaguid() (r uuid.UUID, exists bool) {
	v := m.aaguid
	if v == nil {
		return
	}
	return *v, true
}

// OldAaguid returns the old "aaguid" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldAaguid(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAaguid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAaguid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAaguid: %w", err)
	}
	return oldValue.Aaguid, nil
}

// ResetAaguid resets all changes to the "aaguid" field.
func (m *WebauthnCredentialMutation) ResetAaguid() {
	m.aaguid = nil
}

// SetSignCount sets the "sign_count" field.
func (m *WebauthnCredentialMutation) SetSignCount(i int32) {
	m.sign_count = &i
	m.addsign_count = nil
}

// SignCount returns the value of the "sign_count" field in the mutation.
func (m *WebauthnCredentialMutation) SignCount() (r int32, exists bool) {
	v := m.sign_count
	if v == nil {
		return
	}
	return *v, true
}

// OldSignCount returns the old "sign_count" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldSignCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignCount: %w", err)
	}
	return oldValue.SignCount, nil
}

// AddSignCount adds i to the "sign_count" field.
func (m *WebauthnCredentialMutation) AddSignCount(i int32) {
	if m.addsign_count != nil {
		*m.addsign_count += i
	} else {
		m.addsign_count = &i
	}
}

// AddedSignCount returns the value that was added to the "sign_count" field in this mutation.
func (m *WebauthnCredentialMutation) AddedSignCount() (r int32, exists bool) {
	v := m.addsign_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetSignCount resets all changes to the "sign_count" field.
func (m *WebauthnCredentialMutation) ResetSignCount() {
	m.sign_count = nil
	m.addsign_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WebauthnCredentialMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebauthnCredentialMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebauthnCredentialMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebauthnCredentialMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebauthnCredentialMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebauthnCredentialMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *WebauthnCredentialMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WebauthnCredentialMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *WebauthnCredentialMutation) ClearName() {
	m.name = nil
	m.clearedFields[webauthncredential.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *WebauthnCredentialMutation) NameCleared() bool {
	_, ok := m.clearedFields[webauthncredential.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *WebauthnCredentialMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, webauthncredential.FieldName)
}

// SetBackupEligible sets the "backup_eligible" field.
func (m *WebauthnCredentialMutation) SetBackupEligible(b bool) {
	m.backup_eligible = &b
}

// BackupEligible returns the value of the "backup_eligible" field in the mutation.
func (m *WebauthnCredentialMutation) BackupEligible() (r bool, exists bool) {
	v := m.backup_eligible
	if v == nil {
		return
	}
	return *v, true
}

// OldBackupEligible returns the old "backup_eligible" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldBackupEligible(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackupEligible is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackupEligible requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackupEligible: %w", err)
	}
	return oldValue.BackupEligible, nil
}

// ResetBackupEligible resets all changes to the "backup_eligible" field.
func (m *WebauthnCredentialMutation) ResetBackupEligible() {
	m.backup_eligible = nil
}

// SetBackupState sets the "backup_state" field.
func (m *WebauthnCredentialMutation) SetBackupState(b bool) {
	m.backup_state = &b
}

// BackupState returns the value of the "backup_state" field in the mutation.
func (m *WebauthnCredentialMutation) BackupState() (r bool, exists bool) {
	v := m.backup_state
	if v == nil {
		return
	}
	return *v, true
}

// OldBackupState returns the old "backup_state" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldBackupState(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackupState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackupState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackupState: %w", err)
	}
	return oldValue.BackupState, nil
}

// ResetBackupState resets all changes to the "backup_state" field.
func (m *WebauthnCredentialMutation) ResetBackupState() {
	m.backup_state = nil
}

// SetLastUsedAt sets the "last_used_at" field.
func (m *WebauthnCredentialMutation) SetLastUsedAt(t time.Time) {
	m.last_used_at = &t
}

// LastUsedAt returns the value of the "last_used_at" field in the mutation.
func (m *WebauthnCredentialMutation) LastUsedAt() (r time.Time, exists bool) {
	v := m.last_used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedAt returns the old "last_used_at" field's value of the WebauthnCredential entity.
// If the WebauthnCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialMutation) OldLastUsedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedAt: %w", err)
	}
	return oldValue.LastUsedAt, nil
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (m *WebauthnCredentialMutation) ClearLastUsedAt() {
	m.last_used_at = nil
	m.clearedFields[webauthncredential.FieldLastUsedAt] = struct{}{}
}

// LastUsedAtCleared returns if the "last_used_at" field was cleared in this mutation.
func (m *WebauthnCredentialMutation) LastUsedAtCleared() bool {
	_, ok := m.clearedFields[webauthncredential.FieldLastUsedAt]
	return ok
}

// ResetLastUsedAt resets all changes to the "last_used_at" field.
func (m *WebauthnCredentialMutation) ResetLastUsedAt() {
	m.last_used_at = nil
	delete(m.clearedFields, webauthncredential.FieldLastUsedAt)
}

// AddWebauthnCredentialTransportIDs adds the "webauthn_credential_transports" edge to the WebauthnCredentialTransport entity by ids.
func (m *WebauthnCredentialMutation) AddWebauthnCredentialTransportIDs(ids ...uuid.UUID) {
	if m.webauthn_credential_transports == nil {
		m.webauthn_credential_transports = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.webauthn_credential_transports[ids[i]] = struct{}{}
	}
}

// ClearWebauthnCredentialTransports clears the "webauthn_credential_transports" edge to the WebauthnCredentialTransport entity.
func (m *WebauthnCredentialMutation) ClearWebauthnCredentialTransports() {
	m.clearedwebauthn_credential_transports = true
}

// WebauthnCredentialTransportsCleared reports if the "webauthn_credential_transports" edge to the WebauthnCredentialTransport entity was cleared.
func (m *WebauthnCredentialMutation) WebauthnCredentialTransportsCleared() bool {
	return m.clearedwebauthn_credential_transports
}

// RemoveWebauthnCredentialTransportIDs removes the "webauthn_credential_transports" edge to the WebauthnCredentialTransport entity by IDs.
func (m *WebauthnCredentialMutation) RemoveWebauthnCredentialTransportIDs(ids ...uuid.UUID) {
	if m.removedwebauthn_credential_transports == nil {
		m.removedwebauthn_credential_transports = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.webauthn_credential_transports, ids[i])
		m.removedwebauthn_credential_transports[ids[i]] = struct{}{}
	}
}

// RemovedWebauthnCredentialTransports returns the removed IDs of the "webauthn_credential_transports" edge to the WebauthnCredentialTransport entity.
func (m *WebauthnCredentialMutation) RemovedWebauthnCredentialTransportsIDs() (ids []uuid.UUID) {
	for id := range m.removedwebauthn_credential_transports {
		ids = append(ids, id)
	}
	return
}

// WebauthnCredentialTransportsIDs returns the "webauthn_credential_transports" edge IDs in the mutation.
func (m *WebauthnCredentialMutation) WebauthnCredentialTransportsIDs() (ids []uuid.UUID) {
	for id := range m.webauthn_credential_transports {
		ids = append(ids, id)
	}
	return
}

// ResetWebauthnCredentialTransports resets all changes to the "webauthn_credential_transports" edge.
func (m *WebauthnCredentialMutation) ResetWebauthnCredentialTransports() {
	m.webauthn_credential_transports = nil
	m.clearedwebauthn_credential_transports = false
	m.removedwebauthn_credential_transports = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *WebauthnCredentialMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WebauthnCredentialMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WebauthnCredentialMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WebauthnCredentialMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the WebauthnCredentialMutation builder.
func (m *WebauthnCredentialMutation) Where(ps ...predicate.WebauthnCredential) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebauthnCredentialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebauthnCredentialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WebauthnCredential, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebauthnCredentialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebauthnCredentialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WebauthnCredential).
func (m *WebauthnCredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebauthnCredentialMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.user != nil {
		fields = append(fields, webauthncredential.FieldUserID)
	}
	if m.public_key != nil {
		fields = append(fields, webauthncredential.FieldPublicKey)
	}
	if m.attestation_type != nil {
		fields = append(fields, webauthncredential.FieldAttestationType)
	}
	if m.aaguid != nil {
		fields = append(fields, webauthncredential.FieldAaguid)
	}
	if m.sign_count != nil {
		fields = append(fields, webauthncredential.FieldSignCount)
	}
	if m.created_at != nil {
		fields = append(fields, webauthncredential.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, webauthncredential.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, webauthncredential.FieldName)
	}
	if m.backup_eligible != nil {
		fields = append(fields, webauthncredential.FieldBackupEligible)
	}
	if m.backup_state != nil {
		fields = append(fields, webauthncredential.FieldBackupState)
	}
	if m.last_used_at != nil {
		fields = append(fields, webauthncredential.FieldLastUsedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebauthnCredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webauthncredential.FieldUserID:
		return m.UserID()
	case webauthncredential.FieldPublicKey:
		return m.PublicKey()
	case webauthncredential.FieldAttestationType:
		return m.AttestationType()
	case webauthncredential.FieldAaguid:
		return m.Aaguid()
	case webauthncredential.FieldSignCount:
		return m.SignCount()
	case webauthncredential.FieldCreatedAt:
		return m.CreatedAt()
	case webauthncredential.FieldUpdatedAt:
		return m.UpdatedAt()
	case webauthncredential.FieldName:
		return m.Name()
	case webauthncredential.FieldBackupEligible:
		return m.BackupEligible()
	case webauthncredential.FieldBackupState:
		return m.BackupState()
	case webauthncredential.FieldLastUsedAt:
		return m.LastUsedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebauthnCredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webauthncredential.FieldUserID:
		return m.OldUserID(ctx)
	case webauthncredential.FieldPublicKey:
		return m.OldPublicKey(ctx)
	case webauthncredential.FieldAttestationType:
		return m.OldAttestationType(ctx)
	case webauthncredential.FieldAaguid:
		return m.OldAaguid(ctx)
	case webauthncredential.FieldSignCount:
		return m.OldSignCount(ctx)
	case webauthncredential.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case webauthncredential.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case webauthncredential.FieldName:
		return m.OldName(ctx)
	case webauthncredential.FieldBackupEligible:
		return m.OldBackupEligible(ctx)
	case webauthncredential.FieldBackupState:
		return m.OldBackupState(ctx)
	case webauthncredential.FieldLastUsedAt:
		return m.OldLastUsedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WebauthnCredential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnCredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webauthncredential.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case webauthncredential.FieldPublicKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKey(v)
		return nil
	case webauthncredential.FieldAttestationType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttestationType(v)
		return nil
	case webauthncredential.FieldAaguid:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAaguid(v)
		return nil
	case webauthncredential.FieldSignCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignCount(v)
		return nil
	case webauthncredential.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case webauthncredential.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case webauthncredential.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case webauthncredential.FieldBackupEligible:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackupEligible(v)
		return nil
	case webauthncredential.FieldBackupState:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackupState(v)
		return nil
	case webauthncredential.FieldLastUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebauthnCredentialMutation) AddedFields() []string {
	var fields []string
	if m.addsign_count != nil {
		fields = append(fields, webauthncredential.FieldSignCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebauthnCredentialMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case webauthncredential.FieldSignCount:
		return m.AddedSignCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnCredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	case webauthncredential.FieldSignCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSignCount(v)
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebauthnCredentialMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(webauthncredential.FieldUserID) {
		fields = append(fields, webauthncredential.FieldUserID)
	}
	if m.FieldCleared(webauthncredential.FieldName) {
		fields = append(fields, webauthncredential.FieldName)
	}
	if m.FieldCleared(webauthncredential.FieldLastUsedAt) {
		fields = append(fields, webauthncredential.FieldLastUsedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebauthnCredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebauthnCredentialMutation) ClearField(name string) error {
	switch name {
	case webauthncredential.FieldUserID:
		m.ClearUserID()
		return nil
	case webauthncredential.FieldName:
		m.ClearName()
		return nil
	case webauthncredential.FieldLastUsedAt:
		m.ClearLastUsedAt()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebauthnCredentialMutation) ResetField(name string) error {
	switch name {
	case webauthncredential.FieldUserID:
		m.ResetUserID()
		return nil
	case webauthncredential.FieldPublicKey:
		m.ResetPublicKey()
		return nil
	case webauthncredential.FieldAttestationType:
		m.ResetAttestationType()
		return nil
	case webauthncredential.FieldAaguid:
		m.ResetAaguid()
		return nil
	case webauthncredential.FieldSignCount:
		m.ResetSignCount()
		return nil
	case webauthncredential.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case webauthncredential.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case webauthncredential.FieldName:
		m.ResetName()
		return nil
	case webauthncredential.FieldBackupEligible:
		m.ResetBackupEligible()
		return nil
	case webauthncredential.FieldBackupState:
		m.ResetBackupState()
		return nil
	case webauthncredential.FieldLastUsedAt:
		m.ResetLastUsedAt()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebauthnCredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.webauthn_credential_transports != nil {
		edges = append(edges, webauthncredential.EdgeWebauthnCredentialTransports)
	}
	if m.user != nil {
		edges = append(edges, webauthncredential.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebauthnCredentialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case webauthncredential.EdgeWebauthnCredentialTransports:
		ids := make([]ent.Value, 0, len(m.webauthn_credential_transports))
		for id := range m.webauthn_credential_transports {
			ids = append(ids, id)
		}
		return ids
	case webauthncredential.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebauthnCredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedwebauthn_credential_transports != nil {
		edges = append(edges, webauthncredential.EdgeWebauthnCredentialTransports)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebauthnCredentialMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case webauthncredential.EdgeWebauthnCredentialTransports:
		ids := make([]ent.Value, 0, len(m.removedwebauthn_credential_transports))
		for id := range m.removedwebauthn_credential_transports {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebauthnCredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedwebauthn_credential_transports {
		edges = append(edges, webauthncredential.EdgeWebauthnCredentialTransports)
	}
	if m.cleareduser {
		edges = append(edges, webauthncredential.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebauthnCredentialMutation) EdgeCleared(name string) bool {
	switch name {
	case webauthncredential.EdgeWebauthnCredentialTransports:
		return m.clearedwebauthn_credential_transports
	case webauthncredential.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebauthnCredentialMutation) ClearEdge(name string) error {
	switch name {
	case webauthncredential.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebauthnCredentialMutation) ResetEdge(name string) error {
	switch name {
	case webauthncredential.EdgeWebauthnCredentialTransports:
		m.ResetWebauthnCredentialTransports()
		return nil
	case webauthncredential.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredential edge %s", name)
}

// WebauthnCredentialTransportMutation represents an operation that mutates the WebauthnCredentialTransport nodes in the graph.
type WebauthnCredentialTransportMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	name                       *string
	clearedFields              map[string]struct{}
	webauthn_credential        *string
	clearedwebauthn_credential bool
	done                       bool
	oldValue                   func(context.Context) (*WebauthnCredentialTransport, error)
	predicates                 []predicate.WebauthnCredentialTransport
}

var _ ent.Mutation = (*WebauthnCredentialTransportMutation)(nil)

// webauthncredentialtransportOption allows management of the mutation configuration using functional options.
type webauthncredentialtransportOption func(*WebauthnCredentialTransportMutation)

// newWebauthnCredentialTransportMutation creates new mutation for the WebauthnCredentialTransport entity.
func newWebauthnCredentialTransportMutation(c config, op Op, opts ...webauthncredentialtransportOption) *WebauthnCredentialTransportMutation {
	m := &WebauthnCredentialTransportMutation{
		config:        c,
		op:            op,
		typ:           TypeWebauthnCredentialTransport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebauthnCredentialTransportID sets the ID field of the mutation.
func withWebauthnCredentialTransportID(id uuid.UUID) webauthncredentialtransportOption {
	return func(m *WebauthnCredentialTransportMutation) {
		var (
			err   error
			once  sync.Once
			value *WebauthnCredentialTransport
		)
		m.oldValue = func(ctx context.Context) (*WebauthnCredentialTransport, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebauthnCredentialTransport.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebauthnCredentialTransport sets the old WebauthnCredentialTransport of the mutation.
func withWebauthnCredentialTransport(node *WebauthnCredentialTransport) webauthncredentialtransportOption {
	return func(m *WebauthnCredentialTransportMutation) {
		m.oldValue = func(context.Context) (*WebauthnCredentialTransport, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebauthnCredentialTransportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebauthnCredentialTransportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WebauthnCredentialTransport entities.
func (m *WebauthnCredentialTransportMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebauthnCredentialTransportMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebauthnCredentialTransportMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebauthnCredentialTransport.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *WebauthnCredentialTransportMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WebauthnCredentialTransportMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the WebauthnCredentialTransport entity.
// If the WebauthnCredentialTransport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialTransportMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WebauthnCredentialTransportMutation) ResetName() {
	m.name = nil
}

// SetWebauthnCredentialID sets the "webauthn_credential_id" field.
func (m *WebauthnCredentialTransportMutation) SetWebauthnCredentialID(s string) {
	m.webauthn_credential = &s
}

// WebauthnCredentialID returns the value of the "webauthn_credential_id" field in the mutation.
func (m *WebauthnCredentialTransportMutation) WebauthnCredentialID() (r string, exists bool) {
	v := m.webauthn_credential
	if v == nil {
		return
	}
	return *v, true
}

// OldWebauthnCredentialID returns the old "webauthn_credential_id" field's value of the WebauthnCredentialTransport entity.
// If the WebauthnCredentialTransport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnCredentialTransportMutation) OldWebauthnCredentialID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebauthnCredentialID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebauthnCredentialID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebauthnCredentialID: %w", err)
	}
	return oldValue.WebauthnCredentialID, nil
}

// ClearWebauthnCredentialID clears the value of the "webauthn_credential_id" field.
func (m *WebauthnCredentialTransportMutation) ClearWebauthnCredentialID() {
	m.webauthn_credential = nil
	m.clearedFields[webauthncredentialtransport.FieldWebauthnCredentialID] = struct{}{}
}

// WebauthnCredentialIDCleared returns if the "webauthn_credential_id" field was cleared in this mutation.
func (m *WebauthnCredentialTransportMutation) WebauthnCredentialIDCleared() bool {
	_, ok := m.clearedFields[webauthncredentialtransport.FieldWebauthnCredentialID]
	return ok
}

// ResetWebauthnCredentialID resets all changes to the "webauthn_credential_id" field.
func (m *WebauthnCredentialTransportMutation) ResetWebauthnCredentialID() {
	m.webauthn_credential = nil
	delete(m.clearedFields, webauthncredentialtransport.FieldWebauthnCredentialID)
}

// ClearWebauthnCredential clears the "webauthn_credential" edge to the WebauthnCredential entity.
func (m *WebauthnCredentialTransportMutation) ClearWebauthnCredential() {
	m.clearedwebauthn_credential = true
}

// WebauthnCredentialCleared reports if the "webauthn_credential" edge to the WebauthnCredential entity was cleared.
func (m *WebauthnCredentialTransportMutation) WebauthnCredentialCleared() bool {
	return m.WebauthnCredentialIDCleared() || m.clearedwebauthn_credential
}

// WebauthnCredentialIDs returns the "webauthn_credential" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WebauthnCredentialID instead. It exists only for internal usage by the builders.
func (m *WebauthnCredentialTransportMutation) WebauthnCredentialIDs() (ids []string) {
	if id := m.webauthn_credential; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWebauthnCredential resets all changes to the "webauthn_credential" edge.
func (m *WebauthnCredentialTransportMutation) ResetWebauthnCredential() {
	m.webauthn_credential = nil
	m.clearedwebauthn_credential = false
}

// Where appends a list predicates to the WebauthnCredentialTransportMutation builder.
func (m *WebauthnCredentialTransportMutation) Where(ps ...predicate.WebauthnCredentialTransport) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebauthnCredentialTransportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebauthnCredentialTransportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WebauthnCredentialTransport, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebauthnCredentialTransportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebauthnCredentialTransportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WebauthnCredentialTransport).
func (m *WebauthnCredentialTransportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebauthnCredentialTransportMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, webauthncredentialtransport.FieldName)
	}
	if m.webauthn_credential != nil {
		fields = append(fields, webauthncredentialtransport.FieldWebauthnCredentialID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebauthnCredentialTransportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webauthncredentialtransport.FieldName:
		return m.Name()
	case webauthncredentialtransport.FieldWebauthnCredentialID:
		return m.WebauthnCredentialID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebauthnCredentialTransportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webauthncredentialtransport.FieldName:
		return m.OldName(ctx)
	case webauthncredentialtransport.FieldWebauthnCredentialID:
		return m.OldWebauthnCredentialID(ctx)
	}
	return nil, fmt.Errorf("unknown WebauthnCredentialTransport field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnCredentialTransportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webauthncredentialtransport.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case webauthncredentialtransport.FieldWebauthnCredentialID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebauthnCredentialID(v)
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredentialTransport field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebauthnCredentialTransportMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebauthnCredentialTransportMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnCredentialTransportMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WebauthnCredentialTransport numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebauthnCredentialTransportMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(webauthncredentialtransport.FieldWebauthnCredentialID) {
		fields = append(fields, webauthncredentialtransport.FieldWebauthnCredentialID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebauthnCredentialTransportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebauthnCredentialTransportMutation) ClearField(name string) error {
	switch name {
	case webauthncredentialtransport.FieldWebauthnCredentialID:
		m.ClearWebauthnCredentialID()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredentialTransport nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebauthnCredentialTransportMutation) ResetField(name string) error {
	switch name {
	case webauthncredentialtransport.FieldName:
		m.ResetName()
		return nil
	case webauthncredentialtransport.FieldWebauthnCredentialID:
		m.ResetWebauthnCredentialID()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredentialTransport field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebauthnCredentialTransportMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.webauthn_credential != nil {
		edges = append(edges, webauthncredentialtransport.EdgeWebauthnCredential)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebauthnCredentialTransportMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case webauthncredentialtransport.EdgeWebauthnCredential:
		if id := m.webauthn_credential; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebauthnCredentialTransportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebauthnCredentialTransportMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebauthnCredentialTransportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwebauthn_credential {
		edges = append(edges, webauthncredentialtransport.EdgeWebauthnCredential)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebauthnCredentialTransportMutation) EdgeCleared(name string) bool {
	switch name {
	case webauthncredentialtransport.EdgeWebauthnCredential:
		return m.clearedwebauthn_credential
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebauthnCredentialTransportMutation) ClearEdge(name string) error {
	switch name {
	case webauthncredentialtransport.EdgeWebauthnCredential:
		m.ClearWebauthnCredential()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredentialTransport unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebauthnCredentialTransportMutation) ResetEdge(name string) error {
	switch name {
	case webauthncredentialtransport.EdgeWebauthnCredential:
		m.ResetWebauthnCredential()
		return nil
	}
	return fmt.Errorf("unknown WebauthnCredentialTransport edge %s", name)
}

// WebauthnSessionDataMutation represents an operation that mutates the WebauthnSessionData nodes in the graph.
type WebauthnSessionDataMutation struct {
	config
	op                                               Op
	typ                                              string
	id                                               *uuid.UUID
	challenge                                        *string
	user_id                                          *uuid.UUID
	user_verification                                *string
	operation                                        *string
	created_at                                       *time.Time
	updated_at                                       *time.Time
	clearedFields                                    map[string]struct{}
	webauthn_session_data_allowed_credentials        map[uuid.UUID]struct{}
	removedwebauthn_session_data_allowed_credentials map[uuid.UUID]struct{}
	clearedwebauthn_session_data_allowed_credentials bool
	done                                             bool
	oldValue                                         func(context.Context) (*WebauthnSessionData, error)
	predicates                                       []predicate.WebauthnSessionData
}

var _ ent.Mutation = (*WebauthnSessionDataMutation)(nil)

// webauthnsessiondataOption allows management of the mutation configuration using functional options.
type webauthnsessiondataOption func(*WebauthnSessionDataMutation)

// newWebauthnSessionDataMutation creates new mutation for the WebauthnSessionData entity.
func newWebauthnSessionDataMutation(c config, op Op, opts ...webauthnsessiondataOption) *WebauthnSessionDataMutation {
	m := &WebauthnSessionDataMutation{
		config:        c,
		op:            op,
		typ:           TypeWebauthnSessionData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebauthnSessionDataID sets the ID field of the mutation.
func withWebauthnSessionDataID(id uuid.UUID) webauthnsessiondataOption {
	return func(m *WebauthnSessionDataMutation) {
		var (
			err   error
			once  sync.Once
			value *WebauthnSessionData
		)
		m.oldValue = func(ctx context.Context) (*WebauthnSessionData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebauthnSessionData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebauthnSessionData sets the old WebauthnSessionData of the mutation.
func withWebauthnSessionData(node *WebauthnSessionData) webauthnsessiondataOption {
	return func(m *WebauthnSessionDataMutation) {
		m.oldValue = func(context.Context) (*WebauthnSessionData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebauthnSessionDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebauthnSessionDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WebauthnSessionData entities.
func (m *WebauthnSessionDataMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebauthnSessionDataMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebauthnSessionDataMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebauthnSessionData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChallenge sets the "challenge" field.
func (m *WebauthnSessionDataMutation) SetChallenge(s string) {
	m.challenge = &s
}

// Challenge returns the value of the "challenge" field in the mutation.
func (m *WebauthnSessionDataMutation) Challenge() (r string, exists bool) {
	v := m.challenge
	if v == nil {
		return
	}
	return *v, true
}

// OldChallenge returns the old "challenge" field's value of the WebauthnSessionData entity.
// If the WebauthnSessionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataMutation) OldChallenge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChallenge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChallenge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChallenge: %w", err)
	}
	return oldValue.Challenge, nil
}

// ResetChallenge resets all changes to the "challenge" field.
func (m *WebauthnSessionDataMutation) ResetChallenge() {
	m.challenge = nil
}

// SetUserID sets the "user_id" field.
func (m *WebauthnSessionDataMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WebauthnSessionDataMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the WebauthnSessionData entity.
// If the WebauthnSessionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WebauthnSessionDataMutation) ResetUserID() {
	m.user_id = nil
}

// SetUserVerification sets the "user_verification" field.
func (m *WebauthnSessionDataMutation) SetUserVerification(s string) {
	m.user_verification = &s
}

// UserVerification returns the value of the "user_verification" field in the mutation.
func (m *WebauthnSessionDataMutation) UserVerification() (r string, exists bool) {
	v := m.user_verification
	if v == nil {
		return
	}
	return *v, true
}

// OldUserVerification returns the old "user_verification" field's value of the WebauthnSessionData entity.
// If the WebauthnSessionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataMutation) OldUserVerification(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserVerification is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserVerification requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserVerification: %w", err)
	}
	return oldValue.UserVerification, nil
}

// ResetUserVerification resets all changes to the "user_verification" field.
func (m *WebauthnSessionDataMutation) ResetUserVerification() {
	m.user_verification = nil
}

// SetOperation sets the "operation" field.
func (m *WebauthnSessionDataMutation) SetOperation(s string) {
	m.operation = &s
}

// Operation returns the value of the "operation" field in the mutation.
func (m *WebauthnSessionDataMutation) Operation() (r string, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the WebauthnSessionData entity.
// If the WebauthnSessionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataMutation) OldOperation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ResetOperation resets all changes to the "operation" field.
func (m *WebauthnSessionDataMutation) ResetOperation() {
	m.operation = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *WebauthnSessionDataMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebauthnSessionDataMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WebauthnSessionData entity.
// If the WebauthnSessionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebauthnSessionDataMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebauthnSessionDataMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebauthnSessionDataMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WebauthnSessionData entity.
// If the WebauthnSessionData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebauthnSessionDataMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddWebauthnSessionDataAllowedCredentialIDs adds the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity by ids.
func (m *WebauthnSessionDataMutation) AddWebauthnSessionDataAllowedCredentialIDs(ids ...uuid.UUID) {
	if m.webauthn_session_data_allowed_credentials == nil {
		m.webauthn_session_data_allowed_credentials = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.webauthn_session_data_allowed_credentials[ids[i]] = struct{}{}
	}
}

// ClearWebauthnSessionDataAllowedCredentials clears the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity.
func (m *WebauthnSessionDataMutation) ClearWebauthnSessionDataAllowedCredentials() {
	m.clearedwebauthn_session_data_allowed_credentials = true
}

// WebauthnSessionDataAllowedCredentialsCleared reports if the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity was cleared.
func (m *WebauthnSessionDataMutation) WebauthnSessionDataAllowedCredentialsCleared() bool {
	return m.clearedwebauthn_session_data_allowed_credentials
}

// RemoveWebauthnSessionDataAllowedCredentialIDs removes the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity by IDs.
func (m *WebauthnSessionDataMutation) RemoveWebauthnSessionDataAllowedCredentialIDs(ids ...uuid.UUID) {
	if m.removedwebauthn_session_data_allowed_credentials == nil {
		m.removedwebauthn_session_data_allowed_credentials = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.webauthn_session_data_allowed_credentials, ids[i])
		m.removedwebauthn_session_data_allowed_credentials[ids[i]] = struct{}{}
	}
}

// RemovedWebauthnSessionDataAllowedCredentials returns the removed IDs of the "webauthn_session_data_allowed_credentials" edge to the WebauthnSessionDataAllowedCredential entity.
func (m *WebauthnSessionDataMutation) RemovedWebauthnSessionDataAllowedCredentialsIDs() (ids []uuid.UUID) {
	for id := range m.removedwebauthn_session_data_allowed_credentials {
		ids = append(ids, id)
	}
	return
}

// WebauthnSessionDataAllowedCredentialsIDs returns the "webauthn_session_data_allowed_credentials" edge IDs in the mutation.
func (m *WebauthnSessionDataMutation) WebauthnSessionDataAllowedCredentialsIDs() (ids []uuid.UUID) {
	for id := range m.webauthn_session_data_allowed_credentials {
		ids = append(ids, id)
	}
	return
}

// ResetWebauthnSessionDataAllowedCredentials resets all changes to the "webauthn_session_data_allowed_credentials" edge.
func (m *WebauthnSessionDataMutation) ResetWebauthnSessionDataAllowedCredentials() {
	m.webauthn_session_data_allowed_credentials = nil
	m.clearedwebauthn_session_data_allowed_credentials = false
	m.removedwebauthn_session_data_allowed_credentials = nil
}

// Where appends a list predicates to the WebauthnSessionDataMutation builder.
func (m *WebauthnSessionDataMutation) Where(ps ...predicate.WebauthnSessionData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebauthnSessionDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebauthnSessionDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WebauthnSessionData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebauthnSessionDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebauthnSessionDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WebauthnSessionData).
func (m *WebauthnSessionDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebauthnSessionDataMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.challenge != nil {
		fields = append(fields, webauthnsessiondata.FieldChallenge)
	}
	if m.user_id != nil {
		fields = append(fields, webauthnsessiondata.FieldUserID)
	}
	if m.user_verification != nil {
		fields = append(fields, webauthnsessiondata.FieldUserVerification)
	}
	if m.operation != nil {
		fields = append(fields, webauthnsessiondata.FieldOperation)
	}
	if m.created_at != nil {
		fields = append(fields, webauthnsessiondata.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, webauthnsessiondata.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebauthnSessionDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webauthnsessiondata.FieldChallenge:
		return m.Challenge()
	case webauthnsessiondata.FieldUserID:
		return m.UserID()
	case webauthnsessiondata.FieldUserVerification:
		return m.UserVerification()
	case webauthnsessiondata.FieldOperation:
		return m.Operation()
	case webauthnsessiondata.FieldCreatedAt:
		return m.CreatedAt()
	case webauthnsessiondata.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebauthnSessionDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webauthnsessiondata.FieldChallenge:
		return m.OldChallenge(ctx)
	case webauthnsessiondata.FieldUserID:
		return m.OldUserID(ctx)
	case webauthnsessiondata.FieldUserVerification:
		return m.OldUserVerification(ctx)
	case webauthnsessiondata.FieldOperation:
		return m.OldOperation(ctx)
	case webauthnsessiondata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case webauthnsessiondata.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WebauthnSessionData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnSessionDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webauthnsessiondata.FieldChallenge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChallenge(v)
		return nil
	case webauthnsessiondata.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case webauthnsessiondata.FieldUserVerification:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserVerification(v)
		return nil
	case webauthnsessiondata.FieldOperation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case webauthnsessiondata.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case webauthnsessiondata.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebauthnSessionDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebauthnSessionDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnSessionDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WebauthnSessionData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebauthnSessionDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebauthnSessionDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebauthnSessionDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WebauthnSessionData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebauthnSessionDataMutation) ResetField(name string) error {
	switch name {
	case webauthnsessiondata.FieldChallenge:
		m.ResetChallenge()
		return nil
	case webauthnsessiondata.FieldUserID:
		m.ResetUserID()
		return nil
	case webauthnsessiondata.FieldUserVerification:
		m.ResetUserVerification()
		return nil
	case webauthnsessiondata.FieldOperation:
		m.ResetOperation()
		return nil
	case webauthnsessiondata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case webauthnsessiondata.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebauthnSessionDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.webauthn_session_data_allowed_credentials != nil {
		edges = append(edges, webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebauthnSessionDataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials:
		ids := make([]ent.Value, 0, len(m.webauthn_session_data_allowed_credentials))
		for id := range m.webauthn_session_data_allowed_credentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebauthnSessionDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedwebauthn_session_data_allowed_credentials != nil {
		edges = append(edges, webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebauthnSessionDataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials:
		ids := make([]ent.Value, 0, len(m.removedwebauthn_session_data_allowed_credentials))
		for id := range m.removedwebauthn_session_data_allowed_credentials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebauthnSessionDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwebauthn_session_data_allowed_credentials {
		edges = append(edges, webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebauthnSessionDataMutation) EdgeCleared(name string) bool {
	switch name {
	case webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials:
		return m.clearedwebauthn_session_data_allowed_credentials
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebauthnSessionDataMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WebauthnSessionData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebauthnSessionDataMutation) ResetEdge(name string) error {
	switch name {
	case webauthnsessiondata.EdgeWebauthnSessionDataAllowedCredentials:
		m.ResetWebauthnSessionDataAllowedCredentials()
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionData edge %s", name)
}

// WebauthnSessionDataAllowedCredentialMutation represents an operation that mutates the WebauthnSessionDataAllowedCredential nodes in the graph.
type WebauthnSessionDataAllowedCredentialMutation struct {
	config
	op                           Op
	typ                          string
	id                           *uuid.UUID
	credential_id                *string
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	webauthn_session_data        *uuid.UUID
	clearedwebauthn_session_data bool
	done                         bool
	oldValue                     func(context.Context) (*WebauthnSessionDataAllowedCredential, error)
	predicates                   []predicate.WebauthnSessionDataAllowedCredential
}

var _ ent.Mutation = (*WebauthnSessionDataAllowedCredentialMutation)(nil)

// webauthnsessiondataallowedcredentialOption allows management of the mutation configuration using functional options.
type webauthnsessiondataallowedcredentialOption func(*WebauthnSessionDataAllowedCredentialMutation)

// newWebauthnSessionDataAllowedCredentialMutation creates new mutation for the WebauthnSessionDataAllowedCredential entity.
func newWebauthnSessionDataAllowedCredentialMutation(c config, op Op, opts ...webauthnsessiondataallowedcredentialOption) *WebauthnSessionDataAllowedCredentialMutation {
	m := &WebauthnSessionDataAllowedCredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeWebauthnSessionDataAllowedCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebauthnSessionDataAllowedCredentialID sets the ID field of the mutation.
func withWebauthnSessionDataAllowedCredentialID(id uuid.UUID) webauthnsessiondataallowedcredentialOption {
	return func(m *WebauthnSessionDataAllowedCredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *WebauthnSessionDataAllowedCredential
		)
		m.oldValue = func(ctx context.Context) (*WebauthnSessionDataAllowedCredential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WebauthnSessionDataAllowedCredential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebauthnSessionDataAllowedCredential sets the old WebauthnSessionDataAllowedCredential of the mutation.
func withWebauthnSessionDataAllowedCredential(node *WebauthnSessionDataAllowedCredential) webauthnsessiondataallowedcredentialOption {
	return func(m *WebauthnSessionDataAllowedCredentialMutation) {
		m.oldValue = func(context.Context) (*WebauthnSessionDataAllowedCredential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebauthnSessionDataAllowedCredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebauthnSessionDataAllowedCredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WebauthnSessionDataAllowedCredential entities.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebauthnSessionDataAllowedCredentialMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WebauthnSessionDataAllowedCredential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCredentialID sets the "credential_id" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetCredentialID(s string) {
	m.credential_id = &s
}

// CredentialID returns the value of the "credential_id" field in the mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) CredentialID() (r string, exists bool) {
	v := m.credential_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCredentialID returns the old "credential_id" field's value of the WebauthnSessionDataAllowedCredential entity.
// If the WebauthnSessionDataAllowedCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataAllowedCredentialMutation) OldCredentialID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredentialID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredentialID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredentialID: %w", err)
	}
	return oldValue.CredentialID, nil
}

// ResetCredentialID resets all changes to the "credential_id" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetCredentialID() {
	m.credential_id = nil
}

// SetWebauthnSessionDataID sets the "webauthn_session_data_id" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetWebauthnSessionDataID(u uuid.UUID) {
	m.webauthn_session_data = &u
}

// WebauthnSessionDataID returns the value of the "webauthn_session_data_id" field in the mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) WebauthnSessionDataID() (r uuid.UUID, exists bool) {
	v := m.webauthn_session_data
	if v == nil {
		return
	}
	return *v, true
}

// OldWebauthnSessionDataID returns the old "webauthn_session_data_id" field's value of the WebauthnSessionDataAllowedCredential entity.
// If the WebauthnSessionDataAllowedCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataAllowedCredentialMutation) OldWebauthnSessionDataID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebauthnSessionDataID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebauthnSessionDataID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebauthnSessionDataID: %w", err)
	}
	return oldValue.WebauthnSessionDataID, nil
}

// ClearWebauthnSessionDataID clears the value of the "webauthn_session_data_id" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) ClearWebauthnSessionDataID() {
	m.webauthn_session_data = nil
	m.clearedFields[webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID] = struct{}{}
}

// WebauthnSessionDataIDCleared returns if the "webauthn_session_data_id" field was cleared in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) WebauthnSessionDataIDCleared() bool {
	_, ok := m.clearedFields[webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID]
	return ok
}

// ResetWebauthnSessionDataID resets all changes to the "webauthn_session_data_id" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetWebauthnSessionDataID() {
	m.webauthn_session_data = nil
	delete(m.clearedFields, webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID)
}

// SetCreatedAt sets the "created_at" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WebauthnSessionDataAllowedCredential entity.
// If the WebauthnSessionDataAllowedCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataAllowedCredentialMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WebauthnSessionDataAllowedCredential entity.
// If the WebauthnSessionDataAllowedCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnSessionDataAllowedCredentialMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearWebauthnSessionData clears the "webauthn_session_data" edge to the WebauthnSessionData entity.
func (m *WebauthnSessionDataAllowedCredentialMutation) ClearWebauthnSessionData() {
	m.clearedwebauthn_session_data = true
}

// WebauthnSessionDataCleared reports if the "webauthn_session_data" edge to the WebauthnSessionData entity was cleared.
func (m *WebauthnSessionDataAllowedCredentialMutation) WebauthnSessionDataCleared() bool {
	return m.WebauthnSessionDataIDCleared() || m.clearedwebauthn_session_data
}

// WebauthnSessionDataIDs returns the "webauthn_session_data" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WebauthnSessionDataID instead. It exists only for internal usage by the builders.
func (m *WebauthnSessionDataAllowedCredentialMutation) WebauthnSessionDataIDs() (ids []uuid.UUID) {
	if id := m.webauthn_session_data; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWebauthnSessionData resets all changes to the "webauthn_session_data" edge.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetWebauthnSessionData() {
	m.webauthn_session_data = nil
	m.clearedwebauthn_session_data = false
}

// Where appends a list predicates to the WebauthnSessionDataAllowedCredentialMutation builder.
func (m *WebauthnSessionDataAllowedCredentialMutation) Where(ps ...predicate.WebauthnSessionDataAllowedCredential) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebauthnSessionDataAllowedCredentialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebauthnSessionDataAllowedCredentialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WebauthnSessionDataAllowedCredential, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebauthnSessionDataAllowedCredentialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WebauthnSessionDataAllowedCredential).
func (m *WebauthnSessionDataAllowedCredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebauthnSessionDataAllowedCredentialMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.credential_id != nil {
		fields = append(fields, webauthnsessiondataallowedcredential.FieldCredentialID)
	}
	if m.webauthn_session_data != nil {
		fields = append(fields, webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID)
	}
	if m.created_at != nil {
		fields = append(fields, webauthnsessiondataallowedcredential.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, webauthnsessiondataallowedcredential.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebauthnSessionDataAllowedCredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webauthnsessiondataallowedcredential.FieldCredentialID:
		return m.CredentialID()
	case webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
		return m.WebauthnSessionDataID()
	case webauthnsessiondataallowedcredential.FieldCreatedAt:
		return m.CreatedAt()
	case webauthnsessiondataallowedcredential.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebauthnSessionDataAllowedCredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webauthnsessiondataallowedcredential.FieldCredentialID:
		return m.OldCredentialID(ctx)
	case webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
		return m.OldWebauthnSessionDataID(ctx)
	case webauthnsessiondataallowedcredential.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case webauthnsessiondataallowedcredential.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown WebauthnSessionDataAllowedCredential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnSessionDataAllowedCredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webauthnsessiondataallowedcredential.FieldCredentialID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredentialID(v)
		return nil
	case webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebauthnSessionDataID(v)
		return nil
	case webauthnsessiondataallowedcredential.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case webauthnsessiondataallowedcredential.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionDataAllowedCredential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebauthnSessionDataAllowedCredentialMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnSessionDataAllowedCredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WebauthnSessionDataAllowedCredential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID) {
		fields = append(fields, webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebauthnSessionDataAllowedCredentialMutation) ClearField(name string) error {
	switch name {
	case webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
		m.ClearWebauthnSessionDataID()
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionDataAllowedCredential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetField(name string) error {
	switch name {
	case webauthnsessiondataallowedcredential.FieldCredentialID:
		m.ResetCredentialID()
		return nil
	case webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
		m.ResetWebauthnSessionDataID()
		return nil
	case webauthnsessiondataallowedcredential.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case webauthnsessiondataallowedcredential.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionDataAllowedCredential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.webauthn_session_data != nil {
		edges = append(edges, webauthnsessiondataallowedcredential.EdgeWebauthnSessionData)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case webauthnsessiondataallowedcredential.EdgeWebauthnSessionData:
		if id := m.webauthn_session_data; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwebauthn_session_data {
		edges = append(edges, webauthnsessiondataallowedcredential.EdgeWebauthnSessionData)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebauthnSessionDataAllowedCredentialMutation) EdgeCleared(name string) bool {
	switch name {
	case webauthnsessiondataallowedcredential.EdgeWebauthnSessionData:
		return m.clearedwebauthn_session_data
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebauthnSessionDataAllowedCredentialMutation) ClearEdge(name string) error {
	switch name {
	case webauthnsessiondataallowedcredential.EdgeWebauthnSessionData:
		m.ClearWebauthnSessionData()
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionDataAllowedCredential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebauthnSessionDataAllowedCredentialMutation) ResetEdge(name string) error {
	switch name {
	case webauthnsessiondataallowedcredential.EdgeWebauthnSessionData:
		m.ResetWebauthnSessionData()
		return nil
	}
	return fmt.Errorf("unknown WebauthnSessionDataAllowedCredential edge %s", name)
}
