// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/webauthnsessiondata"
	"github.com/hellohq/hqservice/ent/webauthnsessiondataallowedcredential"
)

// WebauthnSessionDataAllowedCredential is the model entity for the WebauthnSessionDataAllowedCredential schema.
type WebauthnSessionDataAllowedCredential struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CredentialID holds the value of the "credential_id" field.
	CredentialID string `json:"credential_id,omitempty"`
	// WebauthnSessionDataID holds the value of the "webauthn_session_data_id" field.
	WebauthnSessionDataID uuid.UUID `json:"webauthn_session_data_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebauthnSessionDataAllowedCredentialQuery when eager-loading is set.
	Edges        WebauthnSessionDataAllowedCredentialEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WebauthnSessionDataAllowedCredentialEdges holds the relations/edges for other nodes in the graph.
type WebauthnSessionDataAllowedCredentialEdges struct {
	// WebauthnSessionData holds the value of the webauthn_session_data edge.
	WebauthnSessionData *WebauthnSessionData `json:"webauthn_session_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WebauthnSessionDataOrErr returns the WebauthnSessionData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WebauthnSessionDataAllowedCredentialEdges) WebauthnSessionDataOrErr() (*WebauthnSessionData, error) {
	if e.loadedTypes[0] {
		if e.WebauthnSessionData == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: webauthnsessiondata.Label}
		}
		return e.WebauthnSessionData, nil
	}
	return nil, &NotLoadedError{edge: "webauthn_session_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebauthnSessionDataAllowedCredential) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webauthnsessiondataallowedcredential.FieldCredentialID:
			values[i] = new(sql.NullString)
		case webauthnsessiondataallowedcredential.FieldCreatedAt, webauthnsessiondataallowedcredential.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case webauthnsessiondataallowedcredential.FieldID, webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebauthnSessionDataAllowedCredential fields.
func (wsdac *WebauthnSessionDataAllowedCredential) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webauthnsessiondataallowedcredential.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wsdac.ID = *value
			}
		case webauthnsessiondataallowedcredential.FieldCredentialID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field credential_id", values[i])
			} else if value.Valid {
				wsdac.CredentialID = value.String
			}
		case webauthnsessiondataallowedcredential.FieldWebauthnSessionDataID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field webauthn_session_data_id", values[i])
			} else if value != nil {
				wsdac.WebauthnSessionDataID = *value
			}
		case webauthnsessiondataallowedcredential.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wsdac.CreatedAt = value.Time
			}
		case webauthnsessiondataallowedcredential.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wsdac.UpdatedAt = value.Time
			}
		default:
			wsdac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WebauthnSessionDataAllowedCredential.
// This includes values selected through modifiers, order, etc.
func (wsdac *WebauthnSessionDataAllowedCredential) Value(name string) (ent.Value, error) {
	return wsdac.selectValues.Get(name)
}

// QueryWebauthnSessionData queries the "webauthn_session_data" edge of the WebauthnSessionDataAllowedCredential entity.
func (wsdac *WebauthnSessionDataAllowedCredential) QueryWebauthnSessionData() *WebauthnSessionDataQuery {
	return NewWebauthnSessionDataAllowedCredentialClient(wsdac.config).QueryWebauthnSessionData(wsdac)
}

// Update returns a builder for updating this WebauthnSessionDataAllowedCredential.
// Note that you need to call WebauthnSessionDataAllowedCredential.Unwrap() before calling this method if this WebauthnSessionDataAllowedCredential
// was returned from a transaction, and the transaction was committed or rolled back.
func (wsdac *WebauthnSessionDataAllowedCredential) Update() *WebauthnSessionDataAllowedCredentialUpdateOne {
	return NewWebauthnSessionDataAllowedCredentialClient(wsdac.config).UpdateOne(wsdac)
}

// Unwrap unwraps the WebauthnSessionDataAllowedCredential entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wsdac *WebauthnSessionDataAllowedCredential) Unwrap() *WebauthnSessionDataAllowedCredential {
	_tx, ok := wsdac.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebauthnSessionDataAllowedCredential is not a transactional entity")
	}
	wsdac.config.driver = _tx.drv
	return wsdac
}

// String implements the fmt.Stringer.
func (wsdac *WebauthnSessionDataAllowedCredential) String() string {
	var builder strings.Builder
	builder.WriteString("WebauthnSessionDataAllowedCredential(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wsdac.ID))
	builder.WriteString("credential_id=")
	builder.WriteString(wsdac.CredentialID)
	builder.WriteString(", ")
	builder.WriteString("webauthn_session_data_id=")
	builder.WriteString(fmt.Sprintf("%v", wsdac.WebauthnSessionDataID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wsdac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wsdac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WebauthnSessionDataAllowedCredentials is a parsable slice of WebauthnSessionDataAllowedCredential.
type WebauthnSessionDataAllowedCredentials []*WebauthnSessionDataAllowedCredential
