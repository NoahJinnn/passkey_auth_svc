// Code generated by ent, DO NOT EDIT.

package webauthncredential

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldUserID, v))
}

// PublicKey applies equality check predicate on the "public_key" field. It's identical to PublicKeyEQ.
func PublicKey(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldPublicKey, v))
}

// AttestationType applies equality check predicate on the "attestation_type" field. It's identical to AttestationTypeEQ.
func AttestationType(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldAttestationType, v))
}

// Aaguid applies equality check predicate on the "aaguid" field. It's identical to AaguidEQ.
func Aaguid(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldAaguid, v))
}

// SignCount applies equality check predicate on the "sign_count" field. It's identical to SignCountEQ.
func SignCount(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldSignCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldName, v))
}

// BackupEligible applies equality check predicate on the "backup_eligible" field. It's identical to BackupEligibleEQ.
func BackupEligible(v bool) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldBackupEligible, v))
}

// BackupState applies equality check predicate on the "backup_state" field. It's identical to BackupStateEQ.
func BackupState(v bool) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldBackupState, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldLastUsedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotNull(FieldUserID))
}

// PublicKeyEQ applies the EQ predicate on the "public_key" field.
func PublicKeyEQ(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "public_key" field.
func PublicKeyNEQ(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "public_key" field.
func PublicKeyIn(vs ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "public_key" field.
func PublicKeyNotIn(vs ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "public_key" field.
func PublicKeyGT(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "public_key" field.
func PublicKeyGTE(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "public_key" field.
func PublicKeyLT(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "public_key" field.
func PublicKeyLTE(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldPublicKey, v))
}

// PublicKeyContains applies the Contains predicate on the "public_key" field.
func PublicKeyContains(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContains(FieldPublicKey, v))
}

// PublicKeyHasPrefix applies the HasPrefix predicate on the "public_key" field.
func PublicKeyHasPrefix(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldHasPrefix(FieldPublicKey, v))
}

// PublicKeyHasSuffix applies the HasSuffix predicate on the "public_key" field.
func PublicKeyHasSuffix(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldHasSuffix(FieldPublicKey, v))
}

// PublicKeyEqualFold applies the EqualFold predicate on the "public_key" field.
func PublicKeyEqualFold(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEqualFold(FieldPublicKey, v))
}

// PublicKeyContainsFold applies the ContainsFold predicate on the "public_key" field.
func PublicKeyContainsFold(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContainsFold(FieldPublicKey, v))
}

// AttestationTypeEQ applies the EQ predicate on the "attestation_type" field.
func AttestationTypeEQ(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldAttestationType, v))
}

// AttestationTypeNEQ applies the NEQ predicate on the "attestation_type" field.
func AttestationTypeNEQ(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldAttestationType, v))
}

// AttestationTypeIn applies the In predicate on the "attestation_type" field.
func AttestationTypeIn(vs ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldAttestationType, vs...))
}

// AttestationTypeNotIn applies the NotIn predicate on the "attestation_type" field.
func AttestationTypeNotIn(vs ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldAttestationType, vs...))
}

// AttestationTypeGT applies the GT predicate on the "attestation_type" field.
func AttestationTypeGT(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldAttestationType, v))
}

// AttestationTypeGTE applies the GTE predicate on the "attestation_type" field.
func AttestationTypeGTE(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldAttestationType, v))
}

// AttestationTypeLT applies the LT predicate on the "attestation_type" field.
func AttestationTypeLT(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldAttestationType, v))
}

// AttestationTypeLTE applies the LTE predicate on the "attestation_type" field.
func AttestationTypeLTE(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldAttestationType, v))
}

// AttestationTypeContains applies the Contains predicate on the "attestation_type" field.
func AttestationTypeContains(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContains(FieldAttestationType, v))
}

// AttestationTypeHasPrefix applies the HasPrefix predicate on the "attestation_type" field.
func AttestationTypeHasPrefix(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldHasPrefix(FieldAttestationType, v))
}

// AttestationTypeHasSuffix applies the HasSuffix predicate on the "attestation_type" field.
func AttestationTypeHasSuffix(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldHasSuffix(FieldAttestationType, v))
}

// AttestationTypeEqualFold applies the EqualFold predicate on the "attestation_type" field.
func AttestationTypeEqualFold(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEqualFold(FieldAttestationType, v))
}

// AttestationTypeContainsFold applies the ContainsFold predicate on the "attestation_type" field.
func AttestationTypeContainsFold(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContainsFold(FieldAttestationType, v))
}

// AaguidEQ applies the EQ predicate on the "aaguid" field.
func AaguidEQ(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldAaguid, v))
}

// AaguidNEQ applies the NEQ predicate on the "aaguid" field.
func AaguidNEQ(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldAaguid, v))
}

// AaguidIn applies the In predicate on the "aaguid" field.
func AaguidIn(vs ...uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldAaguid, vs...))
}

// AaguidNotIn applies the NotIn predicate on the "aaguid" field.
func AaguidNotIn(vs ...uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldAaguid, vs...))
}

// AaguidGT applies the GT predicate on the "aaguid" field.
func AaguidGT(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldAaguid, v))
}

// AaguidGTE applies the GTE predicate on the "aaguid" field.
func AaguidGTE(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldAaguid, v))
}

// AaguidLT applies the LT predicate on the "aaguid" field.
func AaguidLT(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldAaguid, v))
}

// AaguidLTE applies the LTE predicate on the "aaguid" field.
func AaguidLTE(v uuid.UUID) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldAaguid, v))
}

// SignCountEQ applies the EQ predicate on the "sign_count" field.
func SignCountEQ(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldSignCount, v))
}

// SignCountNEQ applies the NEQ predicate on the "sign_count" field.
func SignCountNEQ(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldSignCount, v))
}

// SignCountIn applies the In predicate on the "sign_count" field.
func SignCountIn(vs ...int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldSignCount, vs...))
}

// SignCountNotIn applies the NotIn predicate on the "sign_count" field.
func SignCountNotIn(vs ...int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldSignCount, vs...))
}

// SignCountGT applies the GT predicate on the "sign_count" field.
func SignCountGT(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldSignCount, v))
}

// SignCountGTE applies the GTE predicate on the "sign_count" field.
func SignCountGTE(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldSignCount, v))
}

// SignCountLT applies the LT predicate on the "sign_count" field.
func SignCountLT(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldSignCount, v))
}

// SignCountLTE applies the LTE predicate on the "sign_count" field.
func SignCountLTE(v int32) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldSignCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldContainsFold(FieldName, v))
}

// BackupEligibleEQ applies the EQ predicate on the "backup_eligible" field.
func BackupEligibleEQ(v bool) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldBackupEligible, v))
}

// BackupEligibleNEQ applies the NEQ predicate on the "backup_eligible" field.
func BackupEligibleNEQ(v bool) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldBackupEligible, v))
}

// BackupStateEQ applies the EQ predicate on the "backup_state" field.
func BackupStateEQ(v bool) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldBackupState, v))
}

// BackupStateNEQ applies the NEQ predicate on the "backup_state" field.
func BackupStateNEQ(v bool) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldBackupState, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUsedAtIsNil applies the IsNil predicate on the "last_used_at" field.
func LastUsedAtIsNil() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldIsNull(FieldLastUsedAt))
}

// LastUsedAtNotNil applies the NotNil predicate on the "last_used_at" field.
func LastUsedAtNotNil() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(sql.FieldNotNull(FieldLastUsedAt))
}

// HasWebauthnCredentialTransports applies the HasEdge predicate on the "webauthn_credential_transports" edge.
func HasWebauthnCredentialTransports() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebauthnCredentialTransportsTable, WebauthnCredentialTransportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebauthnCredentialTransportsWith applies the HasEdge predicate on the "webauthn_credential_transports" edge with a given conditions (other predicates).
func HasWebauthnCredentialTransportsWith(preds ...predicate.WebauthnCredentialTransport) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		step := newWebauthnCredentialTransportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebauthnCredential) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebauthnCredential) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebauthnCredential) predicate.WebauthnCredential {
	return predicate.WebauthnCredential(func(s *sql.Selector) {
		p(s.Not())
	})
}
