// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/changeset"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// ChangesetUpdate is the builder for updating Changeset entities.
type ChangesetUpdate struct {
	config
	hooks    []Hook
	mutation *ChangesetMutation
}

// Where appends a list predicates to the ChangesetUpdate builder.
func (cu *ChangesetUpdate) Where(ps ...predicate.Changeset) *ChangesetUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetSiteID sets the "site_id" field.
func (cu *ChangesetUpdate) SetSiteID(s string) *ChangesetUpdate {
	cu.mutation.SetSiteID(s)
	return cu
}

// SetCsList sets the "cs_list" field.
func (cu *ChangesetUpdate) SetCsList(s string) *ChangesetUpdate {
	cu.mutation.SetCsList(s)
	return cu
}

// SetDbVersion sets the "db_version" field.
func (cu *ChangesetUpdate) SetDbVersion(i int32) *ChangesetUpdate {
	cu.mutation.ResetDbVersion()
	cu.mutation.SetDbVersion(i)
	return cu
}

// AddDbVersion adds i to the "db_version" field.
func (cu *ChangesetUpdate) AddDbVersion(i int32) *ChangesetUpdate {
	cu.mutation.AddDbVersion(i)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *ChangesetUpdate) SetUserID(u uuid.UUID) *ChangesetUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *ChangesetUpdate) SetNillableUserID(u *uuid.UUID) *ChangesetUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *ChangesetUpdate) ClearUserID() *ChangesetUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChangesetUpdate) SetUpdatedAt(t time.Time) *ChangesetUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *ChangesetUpdate) SetUser(u *User) *ChangesetUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the ChangesetMutation object of the builder.
func (cu *ChangesetUpdate) Mutation() *ChangesetMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *ChangesetUpdate) ClearUser() *ChangesetUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChangesetUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChangesetUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChangesetUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChangesetUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChangesetUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := changeset.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ChangesetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(changeset.Table, changeset.Columns, sqlgraph.NewFieldSpec(changeset.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.SiteID(); ok {
		_spec.SetField(changeset.FieldSiteID, field.TypeString, value)
	}
	if value, ok := cu.mutation.CsList(); ok {
		_spec.SetField(changeset.FieldCsList, field.TypeString, value)
	}
	if value, ok := cu.mutation.DbVersion(); ok {
		_spec.SetField(changeset.FieldDbVersion, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedDbVersion(); ok {
		_spec.AddField(changeset.FieldDbVersion, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(changeset.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   changeset.UserTable,
			Columns: []string{changeset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   changeset.UserTable,
			Columns: []string{changeset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changeset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChangesetUpdateOne is the builder for updating a single Changeset entity.
type ChangesetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChangesetMutation
}

// SetSiteID sets the "site_id" field.
func (cuo *ChangesetUpdateOne) SetSiteID(s string) *ChangesetUpdateOne {
	cuo.mutation.SetSiteID(s)
	return cuo
}

// SetCsList sets the "cs_list" field.
func (cuo *ChangesetUpdateOne) SetCsList(s string) *ChangesetUpdateOne {
	cuo.mutation.SetCsList(s)
	return cuo
}

// SetDbVersion sets the "db_version" field.
func (cuo *ChangesetUpdateOne) SetDbVersion(i int32) *ChangesetUpdateOne {
	cuo.mutation.ResetDbVersion()
	cuo.mutation.SetDbVersion(i)
	return cuo
}

// AddDbVersion adds i to the "db_version" field.
func (cuo *ChangesetUpdateOne) AddDbVersion(i int32) *ChangesetUpdateOne {
	cuo.mutation.AddDbVersion(i)
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *ChangesetUpdateOne) SetUserID(u uuid.UUID) *ChangesetUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *ChangesetUpdateOne) SetNillableUserID(u *uuid.UUID) *ChangesetUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *ChangesetUpdateOne) ClearUserID() *ChangesetUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChangesetUpdateOne) SetUpdatedAt(t time.Time) *ChangesetUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *ChangesetUpdateOne) SetUser(u *User) *ChangesetUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the ChangesetMutation object of the builder.
func (cuo *ChangesetUpdateOne) Mutation() *ChangesetMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *ChangesetUpdateOne) ClearUser() *ChangesetUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Where appends a list predicates to the ChangesetUpdate builder.
func (cuo *ChangesetUpdateOne) Where(ps ...predicate.Changeset) *ChangesetUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChangesetUpdateOne) Select(field string, fields ...string) *ChangesetUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Changeset entity.
func (cuo *ChangesetUpdateOne) Save(ctx context.Context) (*Changeset, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChangesetUpdateOne) SaveX(ctx context.Context) *Changeset {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChangesetUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChangesetUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChangesetUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := changeset.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ChangesetUpdateOne) sqlSave(ctx context.Context) (_node *Changeset, err error) {
	_spec := sqlgraph.NewUpdateSpec(changeset.Table, changeset.Columns, sqlgraph.NewFieldSpec(changeset.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Changeset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changeset.FieldID)
		for _, f := range fields {
			if !changeset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != changeset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.SiteID(); ok {
		_spec.SetField(changeset.FieldSiteID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CsList(); ok {
		_spec.SetField(changeset.FieldCsList, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DbVersion(); ok {
		_spec.SetField(changeset.FieldDbVersion, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedDbVersion(); ok {
		_spec.AddField(changeset.FieldDbVersion, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(changeset.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   changeset.UserTable,
			Columns: []string{changeset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   changeset.UserTable,
			Columns: []string{changeset.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Changeset{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changeset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
