// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/finitemtable"
	"github.com/hellohq/hqservice/ent/user"
)

// FinItemTableCreate is the builder for creating a FinItemTable entity.
type FinItemTableCreate struct {
	config
	mutation *FinItemTableMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (fitc *FinItemTableCreate) SetUserID(u uuid.UUID) *FinItemTableCreate {
	fitc.mutation.SetUserID(u)
	return fitc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fitc *FinItemTableCreate) SetNillableUserID(u *uuid.UUID) *FinItemTableCreate {
	if u != nil {
		fitc.SetUserID(*u)
	}
	return fitc
}

// SetSheet sets the "sheet" field.
func (fitc *FinItemTableCreate) SetSheet(i int32) *FinItemTableCreate {
	fitc.mutation.SetSheet(i)
	return fitc
}

// SetSection sets the "section" field.
func (fitc *FinItemTableCreate) SetSection(i int32) *FinItemTableCreate {
	fitc.mutation.SetSection(i)
	return fitc
}

// SetCategory sets the "category" field.
func (fitc *FinItemTableCreate) SetCategory(s string) *FinItemTableCreate {
	fitc.mutation.SetCategory(s)
	return fitc
}

// SetDescription sets the "description" field.
func (fitc *FinItemTableCreate) SetDescription(s string) *FinItemTableCreate {
	fitc.mutation.SetDescription(s)
	return fitc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fitc *FinItemTableCreate) SetNillableDescription(s *string) *FinItemTableCreate {
	if s != nil {
		fitc.SetDescription(*s)
	}
	return fitc
}

// SetCreatedAt sets the "created_at" field.
func (fitc *FinItemTableCreate) SetCreatedAt(t time.Time) *FinItemTableCreate {
	fitc.mutation.SetCreatedAt(t)
	return fitc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fitc *FinItemTableCreate) SetNillableCreatedAt(t *time.Time) *FinItemTableCreate {
	if t != nil {
		fitc.SetCreatedAt(*t)
	}
	return fitc
}

// SetUpdatedAt sets the "updated_at" field.
func (fitc *FinItemTableCreate) SetUpdatedAt(t time.Time) *FinItemTableCreate {
	fitc.mutation.SetUpdatedAt(t)
	return fitc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fitc *FinItemTableCreate) SetNillableUpdatedAt(t *time.Time) *FinItemTableCreate {
	if t != nil {
		fitc.SetUpdatedAt(*t)
	}
	return fitc
}

// SetID sets the "id" field.
func (fitc *FinItemTableCreate) SetID(u uuid.UUID) *FinItemTableCreate {
	fitc.mutation.SetID(u)
	return fitc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fitc *FinItemTableCreate) SetNillableID(u *uuid.UUID) *FinItemTableCreate {
	if u != nil {
		fitc.SetID(*u)
	}
	return fitc
}

// SetUser sets the "user" edge to the User entity.
func (fitc *FinItemTableCreate) SetUser(u *User) *FinItemTableCreate {
	return fitc.SetUserID(u.ID)
}

// Mutation returns the FinItemTableMutation object of the builder.
func (fitc *FinItemTableCreate) Mutation() *FinItemTableMutation {
	return fitc.mutation
}

// Save creates the FinItemTable in the database.
func (fitc *FinItemTableCreate) Save(ctx context.Context) (*FinItemTable, error) {
	fitc.defaults()
	return withHooks(ctx, fitc.sqlSave, fitc.mutation, fitc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fitc *FinItemTableCreate) SaveX(ctx context.Context) *FinItemTable {
	v, err := fitc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fitc *FinItemTableCreate) Exec(ctx context.Context) error {
	_, err := fitc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitc *FinItemTableCreate) ExecX(ctx context.Context) {
	if err := fitc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitc *FinItemTableCreate) defaults() {
	if _, ok := fitc.mutation.Description(); !ok {
		v := finitemtable.DefaultDescription
		fitc.mutation.SetDescription(v)
	}
	if _, ok := fitc.mutation.CreatedAt(); !ok {
		v := finitemtable.DefaultCreatedAt()
		fitc.mutation.SetCreatedAt(v)
	}
	if _, ok := fitc.mutation.UpdatedAt(); !ok {
		v := finitemtable.DefaultUpdatedAt()
		fitc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fitc.mutation.ID(); !ok {
		v := finitemtable.DefaultID()
		fitc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fitc *FinItemTableCreate) check() error {
	if _, ok := fitc.mutation.Sheet(); !ok {
		return &ValidationError{Name: "sheet", err: errors.New(`ent: missing required field "FinItemTable.sheet"`)}
	}
	if _, ok := fitc.mutation.Section(); !ok {
		return &ValidationError{Name: "section", err: errors.New(`ent: missing required field "FinItemTable.section"`)}
	}
	if _, ok := fitc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "FinItemTable.category"`)}
	}
	if _, ok := fitc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FinItemTable.created_at"`)}
	}
	if _, ok := fitc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FinItemTable.updated_at"`)}
	}
	return nil
}

func (fitc *FinItemTableCreate) sqlSave(ctx context.Context) (*FinItemTable, error) {
	if err := fitc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fitc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fitc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fitc.mutation.id = &_node.ID
	fitc.mutation.done = true
	return _node, nil
}

func (fitc *FinItemTableCreate) createSpec() (*FinItemTable, *sqlgraph.CreateSpec) {
	var (
		_node = &FinItemTable{config: fitc.config}
		_spec = sqlgraph.NewCreateSpec(finitemtable.Table, sqlgraph.NewFieldSpec(finitemtable.FieldID, field.TypeUUID))
	)
	if id, ok := fitc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fitc.mutation.Sheet(); ok {
		_spec.SetField(finitemtable.FieldSheet, field.TypeInt32, value)
		_node.Sheet = value
	}
	if value, ok := fitc.mutation.Section(); ok {
		_spec.SetField(finitemtable.FieldSection, field.TypeInt32, value)
		_node.Section = value
	}
	if value, ok := fitc.mutation.Category(); ok {
		_spec.SetField(finitemtable.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := fitc.mutation.Description(); ok {
		_spec.SetField(finitemtable.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fitc.mutation.CreatedAt(); ok {
		_spec.SetField(finitemtable.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fitc.mutation.UpdatedAt(); ok {
		_spec.SetField(finitemtable.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fitc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finitemtable.UserTable,
			Columns: []string{finitemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FinItemTableCreateBulk is the builder for creating many FinItemTable entities in bulk.
type FinItemTableCreateBulk struct {
	config
	builders []*FinItemTableCreate
}

// Save creates the FinItemTable entities in the database.
func (fitcb *FinItemTableCreateBulk) Save(ctx context.Context) ([]*FinItemTable, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fitcb.builders))
	nodes := make([]*FinItemTable, len(fitcb.builders))
	mutators := make([]Mutator, len(fitcb.builders))
	for i := range fitcb.builders {
		func(i int, root context.Context) {
			builder := fitcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FinItemTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fitcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fitcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fitcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fitcb *FinItemTableCreateBulk) SaveX(ctx context.Context) []*FinItemTable {
	v, err := fitcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fitcb *FinItemTableCreateBulk) Exec(ctx context.Context) error {
	_, err := fitcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitcb *FinItemTableCreateBulk) ExecX(ctx context.Context) {
	if err := fitcb.Exec(ctx); err != nil {
		panic(err)
	}
}
