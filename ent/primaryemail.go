// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/email"
	"github.com/hellohq/hqservice/ent/primaryemail"
	"github.com/hellohq/hqservice/ent/user"
)

// PrimaryEmail is the model entity for the PrimaryEmail schema.
type PrimaryEmail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EmailID holds the value of the "email_id" field.
	EmailID uuid.UUID `json:"email_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *uuid.UUID `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrimaryEmailQuery when eager-loading is set.
	Edges        PrimaryEmailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PrimaryEmailEdges holds the relations/edges for other nodes in the graph.
type PrimaryEmailEdges struct {
	// Email holds the value of the email edge.
	Email *Email `json:"email,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EmailOrErr returns the Email value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrimaryEmailEdges) EmailOrErr() (*Email, error) {
	if e.loadedTypes[0] {
		if e.Email == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: email.Label}
		}
		return e.Email, nil
	}
	return nil, &NotLoadedError{edge: "email"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrimaryEmailEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrimaryEmail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case primaryemail.FieldUserID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case primaryemail.FieldCreatedAt, primaryemail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case primaryemail.FieldID, primaryemail.FieldEmailID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrimaryEmail fields.
func (pe *PrimaryEmail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case primaryemail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case primaryemail.FieldEmailID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field email_id", values[i])
			} else if value != nil {
				pe.EmailID = *value
			}
		case primaryemail.FieldUserID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pe.UserID = new(uuid.UUID)
				*pe.UserID = *value.S.(*uuid.UUID)
			}
		case primaryemail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case primaryemail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrimaryEmail.
// This includes values selected through modifiers, order, etc.
func (pe *PrimaryEmail) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryEmail queries the "email" edge of the PrimaryEmail entity.
func (pe *PrimaryEmail) QueryEmail() *EmailQuery {
	return NewPrimaryEmailClient(pe.config).QueryEmail(pe)
}

// QueryUser queries the "user" edge of the PrimaryEmail entity.
func (pe *PrimaryEmail) QueryUser() *UserQuery {
	return NewPrimaryEmailClient(pe.config).QueryUser(pe)
}

// Update returns a builder for updating this PrimaryEmail.
// Note that you need to call PrimaryEmail.Unwrap() before calling this method if this PrimaryEmail
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PrimaryEmail) Update() *PrimaryEmailUpdateOne {
	return NewPrimaryEmailClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PrimaryEmail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PrimaryEmail) Unwrap() *PrimaryEmail {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrimaryEmail is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PrimaryEmail) String() string {
	var builder strings.Builder
	builder.WriteString("PrimaryEmail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("email_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.EmailID))
	builder.WriteString(", ")
	if v := pe.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrimaryEmails is a parsable slice of PrimaryEmail.
type PrimaryEmails []*PrimaryEmail
