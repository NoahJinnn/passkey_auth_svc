// Code generated by ent, DO NOT EDIT.

package webauthnsessiondataallowedcredential

const (
	// Label holds the string label denoting the webauthnsessiondataallowedcredential type in the database.
	Label = "webauthn_session_data_allowed_credential"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCredentialID holds the string denoting the credential_id field in the database.
	FieldCredentialID = "credential_id"
	// FieldWebauthnSessionDataID holds the string denoting the webauthn_session_data_id field in the database.
	FieldWebauthnSessionDataID = "webauthn_session_data_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeWebauthnSessionDatum holds the string denoting the webauthn_session_datum edge name in mutations.
	EdgeWebauthnSessionDatum = "webauthn_session_datum"
	// Table holds the table name of the webauthnsessiondataallowedcredential in the database.
	Table = "webauthn_session_data_allowed_credentials"
	// WebauthnSessionDatumTable is the table that holds the webauthn_session_datum relation/edge.
	WebauthnSessionDatumTable = "webauthn_session_data_allowed_credentials"
	// WebauthnSessionDatumInverseTable is the table name for the WebauthnSessionDatum entity.
	// It exists in this package in order to avoid circular dependency with the "webauthnsessiondatum" package.
	WebauthnSessionDatumInverseTable = "webauthn_session_data"
	// WebauthnSessionDatumColumn is the table column denoting the webauthn_session_datum relation/edge.
	WebauthnSessionDatumColumn = "webauthn_session_data_id"
)

// Columns holds all SQL columns for webauthnsessiondataallowedcredential fields.
var Columns = []string{
	FieldID,
	FieldCredentialID,
	FieldWebauthnSessionDataID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
