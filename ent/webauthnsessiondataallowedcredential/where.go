// Code generated by ent, DO NOT EDIT.

package webauthnsessiondataallowedcredential

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLTE(FieldID, id))
}

// CredentialID applies equality check predicate on the "credential_id" field. It's identical to CredentialIDEQ.
func CredentialID(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldCredentialID, v))
}

// WebauthnSessionDataID applies equality check predicate on the "webauthn_session_data_id" field. It's identical to WebauthnSessionDataIDEQ.
func WebauthnSessionDataID(v uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldWebauthnSessionDataID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldUpdatedAt, v))
}

// CredentialIDEQ applies the EQ predicate on the "credential_id" field.
func CredentialIDEQ(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldCredentialID, v))
}

// CredentialIDNEQ applies the NEQ predicate on the "credential_id" field.
func CredentialIDNEQ(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNEQ(FieldCredentialID, v))
}

// CredentialIDIn applies the In predicate on the "credential_id" field.
func CredentialIDIn(vs ...string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldIn(FieldCredentialID, vs...))
}

// CredentialIDNotIn applies the NotIn predicate on the "credential_id" field.
func CredentialIDNotIn(vs ...string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNotIn(FieldCredentialID, vs...))
}

// CredentialIDGT applies the GT predicate on the "credential_id" field.
func CredentialIDGT(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGT(FieldCredentialID, v))
}

// CredentialIDGTE applies the GTE predicate on the "credential_id" field.
func CredentialIDGTE(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGTE(FieldCredentialID, v))
}

// CredentialIDLT applies the LT predicate on the "credential_id" field.
func CredentialIDLT(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLT(FieldCredentialID, v))
}

// CredentialIDLTE applies the LTE predicate on the "credential_id" field.
func CredentialIDLTE(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLTE(FieldCredentialID, v))
}

// CredentialIDContains applies the Contains predicate on the "credential_id" field.
func CredentialIDContains(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldContains(FieldCredentialID, v))
}

// CredentialIDHasPrefix applies the HasPrefix predicate on the "credential_id" field.
func CredentialIDHasPrefix(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldHasPrefix(FieldCredentialID, v))
}

// CredentialIDHasSuffix applies the HasSuffix predicate on the "credential_id" field.
func CredentialIDHasSuffix(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldHasSuffix(FieldCredentialID, v))
}

// CredentialIDEqualFold applies the EqualFold predicate on the "credential_id" field.
func CredentialIDEqualFold(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEqualFold(FieldCredentialID, v))
}

// CredentialIDContainsFold applies the ContainsFold predicate on the "credential_id" field.
func CredentialIDContainsFold(v string) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldContainsFold(FieldCredentialID, v))
}

// WebauthnSessionDataIDEQ applies the EQ predicate on the "webauthn_session_data_id" field.
func WebauthnSessionDataIDEQ(v uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldWebauthnSessionDataID, v))
}

// WebauthnSessionDataIDNEQ applies the NEQ predicate on the "webauthn_session_data_id" field.
func WebauthnSessionDataIDNEQ(v uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNEQ(FieldWebauthnSessionDataID, v))
}

// WebauthnSessionDataIDIn applies the In predicate on the "webauthn_session_data_id" field.
func WebauthnSessionDataIDIn(vs ...uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldIn(FieldWebauthnSessionDataID, vs...))
}

// WebauthnSessionDataIDNotIn applies the NotIn predicate on the "webauthn_session_data_id" field.
func WebauthnSessionDataIDNotIn(vs ...uuid.UUID) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNotIn(FieldWebauthnSessionDataID, vs...))
}

// WebauthnSessionDataIDIsNil applies the IsNil predicate on the "webauthn_session_data_id" field.
func WebauthnSessionDataIDIsNil() predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldIsNull(FieldWebauthnSessionDataID))
}

// WebauthnSessionDataIDNotNil applies the NotNil predicate on the "webauthn_session_data_id" field.
func WebauthnSessionDataIDNotNil() predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNotNull(FieldWebauthnSessionDataID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWebauthnSessionData applies the HasEdge predicate on the "webauthn_session_data" edge.
func HasWebauthnSessionData() predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WebauthnSessionDataTable, WebauthnSessionDataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebauthnSessionDataWith applies the HasEdge predicate on the "webauthn_session_data" edge with a given conditions (other predicates).
func HasWebauthnSessionDataWith(preds ...predicate.WebauthnSessionData) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(func(s *sql.Selector) {
		step := newWebauthnSessionDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebauthnSessionDataAllowedCredential) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebauthnSessionDataAllowedCredential) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebauthnSessionDataAllowedCredential) predicate.WebauthnSessionDataAllowedCredential {
	return predicate.WebauthnSessionDataAllowedCredential(func(s *sql.Selector) {
		p(s.Not())
	})
}
