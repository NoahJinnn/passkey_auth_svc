// Code generated by ent, DO NOT EDIT.

package primaryemail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldLTE(FieldID, id))
}

// EmailID applies equality check predicate on the "email_id" field. It's identical to EmailIDEQ.
func EmailID(v uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldEmailID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldUserID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldUpdatedAt, v))
}

// EmailIDEQ applies the EQ predicate on the "email_id" field.
func EmailIDEQ(v uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldEmailID, v))
}

// EmailIDNEQ applies the NEQ predicate on the "email_id" field.
func EmailIDNEQ(v uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNEQ(FieldEmailID, v))
}

// EmailIDIn applies the In predicate on the "email_id" field.
func EmailIDIn(vs ...uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIn(FieldEmailID, vs...))
}

// EmailIDNotIn applies the NotIn predicate on the "email_id" field.
func EmailIDNotIn(vs ...uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotIn(FieldEmailID, vs...))
}

// EmailIDIsNil applies the IsNil predicate on the "email_id" field.
func EmailIDIsNil() predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIsNull(FieldEmailID))
}

// EmailIDNotNil applies the NotNil predicate on the "email_id" field.
func EmailIDNotNil() predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotNull(FieldEmailID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotNull(FieldUserID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasEmail applies the HasEdge predicate on the "email" edge.
func HasEmail() predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EmailTable, EmailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailWith applies the HasEdge predicate on the "email" edge with a given conditions (other predicates).
func HasEmailWith(preds ...predicate.Email) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmailInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EmailTable, EmailColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrimaryEmail) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrimaryEmail) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrimaryEmail) predicate.PrimaryEmail {
	return predicate.PrimaryEmail(func(s *sql.Selector) {
		p(s.Not())
	})
}
