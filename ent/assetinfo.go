// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hellohq/hqservice/ent/assetinfo"
)

// AssetInfo is the model entity for the AssetInfo schema.
type AssetInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// AccountInfo holds the value of the "account_info" field.
	AccountInfo struct{} `json:"account_info,omitempty"`
	// InstitutionInfo holds the value of the "institution_info" field.
	InstitutionInfo struct{} `json:"institution_info,omitempty"`
	// AssetInfo holds the value of the "asset_info" field.
	AssetInfo struct{} `json:"asset_info,omitempty"`
	// SensibleData holds the value of the "sensible_data" field.
	SensibleData string `json:"sensible_data,omitempty"`
	// Descriptions holds the value of the "descriptions" field.
	Descriptions string `json:"descriptions,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetinfo.FieldAccountInfo, assetinfo.FieldInstitutionInfo, assetinfo.FieldAssetInfo:
			values[i] = new([]byte)
		case assetinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case assetinfo.FieldSensibleData, assetinfo.FieldDescriptions:
			values[i] = new(sql.NullString)
		case assetinfo.FieldCreatedAt, assetinfo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AssetInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetInfo fields.
func (ai *AssetInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = uint(value.Int64)
		case assetinfo.FieldAccountInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field account_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ai.AccountInfo); err != nil {
					return fmt.Errorf("unmarshal field account_info: %w", err)
				}
			}
		case assetinfo.FieldInstitutionInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field institution_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ai.InstitutionInfo); err != nil {
					return fmt.Errorf("unmarshal field institution_info: %w", err)
				}
			}
		case assetinfo.FieldAssetInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field asset_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ai.AssetInfo); err != nil {
					return fmt.Errorf("unmarshal field asset_info: %w", err)
				}
			}
		case assetinfo.FieldSensibleData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sensible_data", values[i])
			} else if value.Valid {
				ai.SensibleData = value.String
			}
		case assetinfo.FieldDescriptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field descriptions", values[i])
			} else if value.Valid {
				ai.Descriptions = value.String
			}
		case assetinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case assetinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AssetInfo.
// Note that you need to call AssetInfo.Unwrap() before calling this method if this AssetInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AssetInfo) Update() *AssetInfoUpdateOne {
	return NewAssetInfoClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AssetInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AssetInfo) Unwrap() *AssetInfo {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetInfo is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AssetInfo) String() string {
	var builder strings.Builder
	builder.WriteString("AssetInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("account_info=")
	builder.WriteString(fmt.Sprintf("%v", ai.AccountInfo))
	builder.WriteString(", ")
	builder.WriteString("institution_info=")
	builder.WriteString(fmt.Sprintf("%v", ai.InstitutionInfo))
	builder.WriteString(", ")
	builder.WriteString("asset_info=")
	builder.WriteString(fmt.Sprintf("%v", ai.AssetInfo))
	builder.WriteString(", ")
	builder.WriteString("sensible_data=")
	builder.WriteString(ai.SensibleData)
	builder.WriteString(", ")
	builder.WriteString("descriptions=")
	builder.WriteString(ai.Descriptions)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AssetInfos is a parsable slice of AssetInfo.
type AssetInfos []*AssetInfo
