// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hellohq/hqservice/ent/cryptoaccount"
	"github.com/hellohq/hqservice/ent/user"
)

// CryptoAccount is the model entity for the CryptoAccount schema.
type CryptoAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CoinType holds the value of the "coin_type" field.
	CoinType string `json:"coin_type,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float64 `json:"balance,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CryptoAccountQuery when eager-loading is set.
	Edges CryptoAccountEdges `json:"edges"`
}

// CryptoAccountEdges holds the relations/edges for other nodes in the graph.
type CryptoAccountEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CryptoAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CryptoAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cryptoaccount.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case cryptoaccount.FieldID, cryptoaccount.FieldUserID:
			values[i] = new(sql.NullInt64)
		case cryptoaccount.FieldName, cryptoaccount.FieldCoinType:
			values[i] = new(sql.NullString)
		case cryptoaccount.FieldCreatedAt, cryptoaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CryptoAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CryptoAccount fields.
func (ca *CryptoAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cryptoaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = uint(value.Int64)
		case cryptoaccount.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ca.UserID = uint(value.Int64)
			}
		case cryptoaccount.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ca.Name = value.String
			}
		case cryptoaccount.FieldCoinType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type", values[i])
			} else if value.Valid {
				ca.CoinType = value.String
			}
		case cryptoaccount.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				ca.Balance = value.Float64
			}
		case cryptoaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case cryptoaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the CryptoAccount entity.
func (ca *CryptoAccount) QueryUser() *UserQuery {
	return NewCryptoAccountClient(ca.config).QueryUser(ca)
}

// Update returns a builder for updating this CryptoAccount.
// Note that you need to call CryptoAccount.Unwrap() before calling this method if this CryptoAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CryptoAccount) Update() *CryptoAccountUpdateOne {
	return NewCryptoAccountClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CryptoAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CryptoAccount) Unwrap() *CryptoAccount {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CryptoAccount is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CryptoAccount) String() string {
	var builder strings.Builder
	builder.WriteString("CryptoAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ca.Name)
	builder.WriteString(", ")
	builder.WriteString("coin_type=")
	builder.WriteString(ca.CoinType)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", ca.Balance))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CryptoAccounts is a parsable slice of CryptoAccount.
type CryptoAccounts []*CryptoAccount
