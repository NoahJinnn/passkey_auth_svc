// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/bankaccount"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// BankAccountUpdate is the builder for updating BankAccount entities.
type BankAccountUpdate struct {
	config
	hooks    []Hook
	mutation *BankAccountMutation
}

// Where appends a list predicates to the BankAccountUpdate builder.
func (bau *BankAccountUpdate) Where(ps ...predicate.BankAccount) *BankAccountUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetUserID sets the "user_id" field.
func (bau *BankAccountUpdate) SetUserID(u uint) *BankAccountUpdate {
	bau.mutation.SetUserID(u)
	return bau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bau *BankAccountUpdate) SetNillableUserID(u *uint) *BankAccountUpdate {
	if u != nil {
		bau.SetUserID(*u)
	}
	return bau
}

// ClearUserID clears the value of the "user_id" field.
func (bau *BankAccountUpdate) ClearUserID() *BankAccountUpdate {
	bau.mutation.ClearUserID()
	return bau
}

// SetAccountID sets the "account_id" field.
func (bau *BankAccountUpdate) SetAccountID(s string) *BankAccountUpdate {
	bau.mutation.SetAccountID(s)
	return bau
}

// SetInstitutionInfo sets the "institution_info" field.
func (bau *BankAccountUpdate) SetInstitutionInfo(s struct{}) *BankAccountUpdate {
	bau.mutation.SetInstitutionInfo(s)
	return bau
}

// SetAccountInfo sets the "account_info" field.
func (bau *BankAccountUpdate) SetAccountInfo(s struct{}) *BankAccountUpdate {
	bau.mutation.SetAccountInfo(s)
	return bau
}

// SetSensibleData sets the "sensible_data" field.
func (bau *BankAccountUpdate) SetSensibleData(s string) *BankAccountUpdate {
	bau.mutation.SetSensibleData(s)
	return bau
}

// SetCreatedAt sets the "created_at" field.
func (bau *BankAccountUpdate) SetCreatedAt(t time.Time) *BankAccountUpdate {
	bau.mutation.SetCreatedAt(t)
	return bau
}

// SetUpdatedAt sets the "updated_at" field.
func (bau *BankAccountUpdate) SetUpdatedAt(t time.Time) *BankAccountUpdate {
	bau.mutation.SetUpdatedAt(t)
	return bau
}

// SetUser sets the "user" edge to the User entity.
func (bau *BankAccountUpdate) SetUser(u *User) *BankAccountUpdate {
	return bau.SetUserID(u.ID)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bau *BankAccountUpdate) Mutation() *BankAccountMutation {
	return bau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bau *BankAccountUpdate) ClearUser() *BankAccountUpdate {
	bau.mutation.ClearUser()
	return bau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BankAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BankAccountMutation](ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BankAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BankAccountUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BankAccountUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bau *BankAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bankaccount.Table, bankaccount.Columns, sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeUint))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.AccountID(); ok {
		_spec.SetField(bankaccount.FieldAccountID, field.TypeString, value)
	}
	if value, ok := bau.mutation.InstitutionInfo(); ok {
		_spec.SetField(bankaccount.FieldInstitutionInfo, field.TypeJSON, value)
	}
	if value, ok := bau.mutation.AccountInfo(); ok {
		_spec.SetField(bankaccount.FieldAccountInfo, field.TypeJSON, value)
	}
	if value, ok := bau.mutation.SensibleData(); ok {
		_spec.SetField(bankaccount.FieldSensibleData, field.TypeString, value)
	}
	if value, ok := bau.mutation.CreatedAt(); ok {
		_spec.SetField(bankaccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bau.mutation.UpdatedAt(); ok {
		_spec.SetField(bankaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if bau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.UserTable,
			Columns: []string{bankaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.UserTable,
			Columns: []string{bankaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BankAccountUpdateOne is the builder for updating a single BankAccount entity.
type BankAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankAccountMutation
}

// SetUserID sets the "user_id" field.
func (bauo *BankAccountUpdateOne) SetUserID(u uint) *BankAccountUpdateOne {
	bauo.mutation.SetUserID(u)
	return bauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bauo *BankAccountUpdateOne) SetNillableUserID(u *uint) *BankAccountUpdateOne {
	if u != nil {
		bauo.SetUserID(*u)
	}
	return bauo
}

// ClearUserID clears the value of the "user_id" field.
func (bauo *BankAccountUpdateOne) ClearUserID() *BankAccountUpdateOne {
	bauo.mutation.ClearUserID()
	return bauo
}

// SetAccountID sets the "account_id" field.
func (bauo *BankAccountUpdateOne) SetAccountID(s string) *BankAccountUpdateOne {
	bauo.mutation.SetAccountID(s)
	return bauo
}

// SetInstitutionInfo sets the "institution_info" field.
func (bauo *BankAccountUpdateOne) SetInstitutionInfo(s struct{}) *BankAccountUpdateOne {
	bauo.mutation.SetInstitutionInfo(s)
	return bauo
}

// SetAccountInfo sets the "account_info" field.
func (bauo *BankAccountUpdateOne) SetAccountInfo(s struct{}) *BankAccountUpdateOne {
	bauo.mutation.SetAccountInfo(s)
	return bauo
}

// SetSensibleData sets the "sensible_data" field.
func (bauo *BankAccountUpdateOne) SetSensibleData(s string) *BankAccountUpdateOne {
	bauo.mutation.SetSensibleData(s)
	return bauo
}

// SetCreatedAt sets the "created_at" field.
func (bauo *BankAccountUpdateOne) SetCreatedAt(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetCreatedAt(t)
	return bauo
}

// SetUpdatedAt sets the "updated_at" field.
func (bauo *BankAccountUpdateOne) SetUpdatedAt(t time.Time) *BankAccountUpdateOne {
	bauo.mutation.SetUpdatedAt(t)
	return bauo
}

// SetUser sets the "user" edge to the User entity.
func (bauo *BankAccountUpdateOne) SetUser(u *User) *BankAccountUpdateOne {
	return bauo.SetUserID(u.ID)
}

// Mutation returns the BankAccountMutation object of the builder.
func (bauo *BankAccountUpdateOne) Mutation() *BankAccountMutation {
	return bauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bauo *BankAccountUpdateOne) ClearUser() *BankAccountUpdateOne {
	bauo.mutation.ClearUser()
	return bauo
}

// Where appends a list predicates to the BankAccountUpdate builder.
func (bauo *BankAccountUpdateOne) Where(ps ...predicate.BankAccount) *BankAccountUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BankAccountUpdateOne) Select(field string, fields ...string) *BankAccountUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BankAccount entity.
func (bauo *BankAccountUpdateOne) Save(ctx context.Context) (*BankAccount, error) {
	return withHooks[*BankAccount, BankAccountMutation](ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) SaveX(ctx context.Context) *BankAccount {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BankAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BankAccountUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bauo *BankAccountUpdateOne) sqlSave(ctx context.Context) (_node *BankAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(bankaccount.Table, bankaccount.Columns, sqlgraph.NewFieldSpec(bankaccount.FieldID, field.TypeUint))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BankAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bankaccount.FieldID)
		for _, f := range fields {
			if !bankaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bankaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.AccountID(); ok {
		_spec.SetField(bankaccount.FieldAccountID, field.TypeString, value)
	}
	if value, ok := bauo.mutation.InstitutionInfo(); ok {
		_spec.SetField(bankaccount.FieldInstitutionInfo, field.TypeJSON, value)
	}
	if value, ok := bauo.mutation.AccountInfo(); ok {
		_spec.SetField(bankaccount.FieldAccountInfo, field.TypeJSON, value)
	}
	if value, ok := bauo.mutation.SensibleData(); ok {
		_spec.SetField(bankaccount.FieldSensibleData, field.TypeString, value)
	}
	if value, ok := bauo.mutation.CreatedAt(); ok {
		_spec.SetField(bankaccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bauo.mutation.UpdatedAt(); ok {
		_spec.SetField(bankaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if bauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.UserTable,
			Columns: []string{bankaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bankaccount.UserTable,
			Columns: []string{bankaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BankAccount{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}
