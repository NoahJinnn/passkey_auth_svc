// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/itemtable"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// ItemTableUpdate is the builder for updating ItemTable entities.
type ItemTableUpdate struct {
	config
	hooks    []Hook
	mutation *ItemTableMutation
}

// Where appends a list predicates to the ItemTableUpdate builder.
func (itu *ItemTableUpdate) Where(ps ...predicate.ItemTable) *ItemTableUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetUserID sets the "user_id" field.
func (itu *ItemTableUpdate) SetUserID(u uuid.UUID) *ItemTableUpdate {
	itu.mutation.SetUserID(u)
	return itu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (itu *ItemTableUpdate) SetNillableUserID(u *uuid.UUID) *ItemTableUpdate {
	if u != nil {
		itu.SetUserID(*u)
	}
	return itu
}

// ClearUserID clears the value of the "user_id" field.
func (itu *ItemTableUpdate) ClearUserID() *ItemTableUpdate {
	itu.mutation.ClearUserID()
	return itu
}

// SetSheet sets the "sheet" field.
func (itu *ItemTableUpdate) SetSheet(i int32) *ItemTableUpdate {
	itu.mutation.ResetSheet()
	itu.mutation.SetSheet(i)
	return itu
}

// AddSheet adds i to the "sheet" field.
func (itu *ItemTableUpdate) AddSheet(i int32) *ItemTableUpdate {
	itu.mutation.AddSheet(i)
	return itu
}

// SetSection sets the "section" field.
func (itu *ItemTableUpdate) SetSection(i int32) *ItemTableUpdate {
	itu.mutation.ResetSection()
	itu.mutation.SetSection(i)
	return itu
}

// AddSection adds i to the "section" field.
func (itu *ItemTableUpdate) AddSection(i int32) *ItemTableUpdate {
	itu.mutation.AddSection(i)
	return itu
}

// SetCategory sets the "category" field.
func (itu *ItemTableUpdate) SetCategory(s string) *ItemTableUpdate {
	itu.mutation.SetCategory(s)
	return itu
}

// SetDescription sets the "description" field.
func (itu *ItemTableUpdate) SetDescription(s string) *ItemTableUpdate {
	itu.mutation.SetDescription(s)
	return itu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (itu *ItemTableUpdate) SetNillableDescription(s *string) *ItemTableUpdate {
	if s != nil {
		itu.SetDescription(*s)
	}
	return itu
}

// ClearDescription clears the value of the "description" field.
func (itu *ItemTableUpdate) ClearDescription() *ItemTableUpdate {
	itu.mutation.ClearDescription()
	return itu
}

// SetUpdatedAt sets the "updated_at" field.
func (itu *ItemTableUpdate) SetUpdatedAt(t time.Time) *ItemTableUpdate {
	itu.mutation.SetUpdatedAt(t)
	return itu
}

// SetUser sets the "user" edge to the User entity.
func (itu *ItemTableUpdate) SetUser(u *User) *ItemTableUpdate {
	return itu.SetUserID(u.ID)
}

// Mutation returns the ItemTableMutation object of the builder.
func (itu *ItemTableUpdate) Mutation() *ItemTableMutation {
	return itu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (itu *ItemTableUpdate) ClearUser() *ItemTableUpdate {
	itu.mutation.ClearUser()
	return itu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *ItemTableUpdate) Save(ctx context.Context) (int, error) {
	itu.defaults()
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *ItemTableUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *ItemTableUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *ItemTableUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itu *ItemTableUpdate) defaults() {
	if _, ok := itu.mutation.UpdatedAt(); !ok {
		v := itemtable.UpdateDefaultUpdatedAt()
		itu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *ItemTableUpdate) check() error {
	if v, ok := itu.mutation.Category(); ok {
		if err := itemtable.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ItemTable.category": %w`, err)}
		}
	}
	return nil
}

func (itu *ItemTableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(itemtable.Table, itemtable.Columns, sqlgraph.NewFieldSpec(itemtable.FieldID, field.TypeUUID))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.Sheet(); ok {
		_spec.SetField(itemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := itu.mutation.AddedSheet(); ok {
		_spec.AddField(itemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := itu.mutation.Section(); ok {
		_spec.SetField(itemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := itu.mutation.AddedSection(); ok {
		_spec.AddField(itemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := itu.mutation.Category(); ok {
		_spec.SetField(itemtable.FieldCategory, field.TypeString, value)
	}
	if value, ok := itu.mutation.Description(); ok {
		_spec.SetField(itemtable.FieldDescription, field.TypeString, value)
	}
	if itu.mutation.DescriptionCleared() {
		_spec.ClearField(itemtable.FieldDescription, field.TypeString)
	}
	if value, ok := itu.mutation.UpdatedAt(); ok {
		_spec.SetField(itemtable.FieldUpdatedAt, field.TypeTime, value)
	}
	if itu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemtable.UserTable,
			Columns: []string{itemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemtable.UserTable,
			Columns: []string{itemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemtable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// ItemTableUpdateOne is the builder for updating a single ItemTable entity.
type ItemTableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemTableMutation
}

// SetUserID sets the "user_id" field.
func (ituo *ItemTableUpdateOne) SetUserID(u uuid.UUID) *ItemTableUpdateOne {
	ituo.mutation.SetUserID(u)
	return ituo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ituo *ItemTableUpdateOne) SetNillableUserID(u *uuid.UUID) *ItemTableUpdateOne {
	if u != nil {
		ituo.SetUserID(*u)
	}
	return ituo
}

// ClearUserID clears the value of the "user_id" field.
func (ituo *ItemTableUpdateOne) ClearUserID() *ItemTableUpdateOne {
	ituo.mutation.ClearUserID()
	return ituo
}

// SetSheet sets the "sheet" field.
func (ituo *ItemTableUpdateOne) SetSheet(i int32) *ItemTableUpdateOne {
	ituo.mutation.ResetSheet()
	ituo.mutation.SetSheet(i)
	return ituo
}

// AddSheet adds i to the "sheet" field.
func (ituo *ItemTableUpdateOne) AddSheet(i int32) *ItemTableUpdateOne {
	ituo.mutation.AddSheet(i)
	return ituo
}

// SetSection sets the "section" field.
func (ituo *ItemTableUpdateOne) SetSection(i int32) *ItemTableUpdateOne {
	ituo.mutation.ResetSection()
	ituo.mutation.SetSection(i)
	return ituo
}

// AddSection adds i to the "section" field.
func (ituo *ItemTableUpdateOne) AddSection(i int32) *ItemTableUpdateOne {
	ituo.mutation.AddSection(i)
	return ituo
}

// SetCategory sets the "category" field.
func (ituo *ItemTableUpdateOne) SetCategory(s string) *ItemTableUpdateOne {
	ituo.mutation.SetCategory(s)
	return ituo
}

// SetDescription sets the "description" field.
func (ituo *ItemTableUpdateOne) SetDescription(s string) *ItemTableUpdateOne {
	ituo.mutation.SetDescription(s)
	return ituo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ituo *ItemTableUpdateOne) SetNillableDescription(s *string) *ItemTableUpdateOne {
	if s != nil {
		ituo.SetDescription(*s)
	}
	return ituo
}

// ClearDescription clears the value of the "description" field.
func (ituo *ItemTableUpdateOne) ClearDescription() *ItemTableUpdateOne {
	ituo.mutation.ClearDescription()
	return ituo
}

// SetUpdatedAt sets the "updated_at" field.
func (ituo *ItemTableUpdateOne) SetUpdatedAt(t time.Time) *ItemTableUpdateOne {
	ituo.mutation.SetUpdatedAt(t)
	return ituo
}

// SetUser sets the "user" edge to the User entity.
func (ituo *ItemTableUpdateOne) SetUser(u *User) *ItemTableUpdateOne {
	return ituo.SetUserID(u.ID)
}

// Mutation returns the ItemTableMutation object of the builder.
func (ituo *ItemTableUpdateOne) Mutation() *ItemTableMutation {
	return ituo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ituo *ItemTableUpdateOne) ClearUser() *ItemTableUpdateOne {
	ituo.mutation.ClearUser()
	return ituo
}

// Where appends a list predicates to the ItemTableUpdate builder.
func (ituo *ItemTableUpdateOne) Where(ps ...predicate.ItemTable) *ItemTableUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *ItemTableUpdateOne) Select(field string, fields ...string) *ItemTableUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated ItemTable entity.
func (ituo *ItemTableUpdateOne) Save(ctx context.Context) (*ItemTable, error) {
	ituo.defaults()
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *ItemTableUpdateOne) SaveX(ctx context.Context) *ItemTable {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *ItemTableUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *ItemTableUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ituo *ItemTableUpdateOne) defaults() {
	if _, ok := ituo.mutation.UpdatedAt(); !ok {
		v := itemtable.UpdateDefaultUpdatedAt()
		ituo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *ItemTableUpdateOne) check() error {
	if v, ok := ituo.mutation.Category(); ok {
		if err := itemtable.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ItemTable.category": %w`, err)}
		}
	}
	return nil
}

func (ituo *ItemTableUpdateOne) sqlSave(ctx context.Context) (_node *ItemTable, err error) {
	if err := ituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(itemtable.Table, itemtable.Columns, sqlgraph.NewFieldSpec(itemtable.FieldID, field.TypeUUID))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ItemTable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemtable.FieldID)
		for _, f := range fields {
			if !itemtable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != itemtable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.Sheet(); ok {
		_spec.SetField(itemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := ituo.mutation.AddedSheet(); ok {
		_spec.AddField(itemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := ituo.mutation.Section(); ok {
		_spec.SetField(itemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := ituo.mutation.AddedSection(); ok {
		_spec.AddField(itemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := ituo.mutation.Category(); ok {
		_spec.SetField(itemtable.FieldCategory, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Description(); ok {
		_spec.SetField(itemtable.FieldDescription, field.TypeString, value)
	}
	if ituo.mutation.DescriptionCleared() {
		_spec.ClearField(itemtable.FieldDescription, field.TypeString)
	}
	if value, ok := ituo.mutation.UpdatedAt(); ok {
		_spec.SetField(itemtable.FieldUpdatedAt, field.TypeTime, value)
	}
	if ituo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemtable.UserTable,
			Columns: []string{itemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemtable.UserTable,
			Columns: []string{itemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemTable{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemtable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
