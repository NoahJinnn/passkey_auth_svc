// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/email"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/primaryemail"
	"github.com/hellohq/hqservice/ent/user"
)

// PrimaryEmailUpdate is the builder for updating PrimaryEmail entities.
type PrimaryEmailUpdate struct {
	config
	hooks    []Hook
	mutation *PrimaryEmailMutation
}

// Where appends a list predicates to the PrimaryEmailUpdate builder.
func (peu *PrimaryEmailUpdate) Where(ps ...predicate.PrimaryEmail) *PrimaryEmailUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetEmailID sets the "email_id" field.
func (peu *PrimaryEmailUpdate) SetEmailID(u uuid.UUID) *PrimaryEmailUpdate {
	peu.mutation.SetEmailID(u)
	return peu
}

// SetNillableEmailID sets the "email_id" field if the given value is not nil.
func (peu *PrimaryEmailUpdate) SetNillableEmailID(u *uuid.UUID) *PrimaryEmailUpdate {
	if u != nil {
		peu.SetEmailID(*u)
	}
	return peu
}

// ClearEmailID clears the value of the "email_id" field.
func (peu *PrimaryEmailUpdate) ClearEmailID() *PrimaryEmailUpdate {
	peu.mutation.ClearEmailID()
	return peu
}

// SetUserID sets the "user_id" field.
func (peu *PrimaryEmailUpdate) SetUserID(u uuid.UUID) *PrimaryEmailUpdate {
	peu.mutation.SetUserID(u)
	return peu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (peu *PrimaryEmailUpdate) SetNillableUserID(u *uuid.UUID) *PrimaryEmailUpdate {
	if u != nil {
		peu.SetUserID(*u)
	}
	return peu
}

// ClearUserID clears the value of the "user_id" field.
func (peu *PrimaryEmailUpdate) ClearUserID() *PrimaryEmailUpdate {
	peu.mutation.ClearUserID()
	return peu
}

// SetCreatedAt sets the "created_at" field.
func (peu *PrimaryEmailUpdate) SetCreatedAt(t time.Time) *PrimaryEmailUpdate {
	peu.mutation.SetCreatedAt(t)
	return peu
}

// SetUpdatedAt sets the "updated_at" field.
func (peu *PrimaryEmailUpdate) SetUpdatedAt(t time.Time) *PrimaryEmailUpdate {
	peu.mutation.SetUpdatedAt(t)
	return peu
}

// SetEmail sets the "email" edge to the Email entity.
func (peu *PrimaryEmailUpdate) SetEmail(e *Email) *PrimaryEmailUpdate {
	return peu.SetEmailID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (peu *PrimaryEmailUpdate) SetUser(u *User) *PrimaryEmailUpdate {
	return peu.SetUserID(u.ID)
}

// Mutation returns the PrimaryEmailMutation object of the builder.
func (peu *PrimaryEmailUpdate) Mutation() *PrimaryEmailMutation {
	return peu.mutation
}

// ClearEmail clears the "email" edge to the Email entity.
func (peu *PrimaryEmailUpdate) ClearEmail() *PrimaryEmailUpdate {
	peu.mutation.ClearEmail()
	return peu
}

// ClearUser clears the "user" edge to the User entity.
func (peu *PrimaryEmailUpdate) ClearUser() *PrimaryEmailUpdate {
	peu.mutation.ClearUser()
	return peu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *PrimaryEmailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PrimaryEmailMutation](ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *PrimaryEmailUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *PrimaryEmailUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *PrimaryEmailUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peu *PrimaryEmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(primaryemail.Table, primaryemail.Columns, sqlgraph.NewFieldSpec(primaryemail.FieldID, field.TypeUUID))
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.CreatedAt(); ok {
		_spec.SetField(primaryemail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := peu.mutation.UpdatedAt(); ok {
		_spec.SetField(primaryemail.FieldUpdatedAt, field.TypeTime, value)
	}
	if peu.mutation.EmailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.EmailTable,
			Columns: []string{primaryemail.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: email.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.EmailTable,
			Columns: []string{primaryemail.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: email.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.UserTable,
			Columns: []string{primaryemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.UserTable,
			Columns: []string{primaryemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{primaryemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// PrimaryEmailUpdateOne is the builder for updating a single PrimaryEmail entity.
type PrimaryEmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrimaryEmailMutation
}

// SetEmailID sets the "email_id" field.
func (peuo *PrimaryEmailUpdateOne) SetEmailID(u uuid.UUID) *PrimaryEmailUpdateOne {
	peuo.mutation.SetEmailID(u)
	return peuo
}

// SetNillableEmailID sets the "email_id" field if the given value is not nil.
func (peuo *PrimaryEmailUpdateOne) SetNillableEmailID(u *uuid.UUID) *PrimaryEmailUpdateOne {
	if u != nil {
		peuo.SetEmailID(*u)
	}
	return peuo
}

// ClearEmailID clears the value of the "email_id" field.
func (peuo *PrimaryEmailUpdateOne) ClearEmailID() *PrimaryEmailUpdateOne {
	peuo.mutation.ClearEmailID()
	return peuo
}

// SetUserID sets the "user_id" field.
func (peuo *PrimaryEmailUpdateOne) SetUserID(u uuid.UUID) *PrimaryEmailUpdateOne {
	peuo.mutation.SetUserID(u)
	return peuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (peuo *PrimaryEmailUpdateOne) SetNillableUserID(u *uuid.UUID) *PrimaryEmailUpdateOne {
	if u != nil {
		peuo.SetUserID(*u)
	}
	return peuo
}

// ClearUserID clears the value of the "user_id" field.
func (peuo *PrimaryEmailUpdateOne) ClearUserID() *PrimaryEmailUpdateOne {
	peuo.mutation.ClearUserID()
	return peuo
}

// SetCreatedAt sets the "created_at" field.
func (peuo *PrimaryEmailUpdateOne) SetCreatedAt(t time.Time) *PrimaryEmailUpdateOne {
	peuo.mutation.SetCreatedAt(t)
	return peuo
}

// SetUpdatedAt sets the "updated_at" field.
func (peuo *PrimaryEmailUpdateOne) SetUpdatedAt(t time.Time) *PrimaryEmailUpdateOne {
	peuo.mutation.SetUpdatedAt(t)
	return peuo
}

// SetEmail sets the "email" edge to the Email entity.
func (peuo *PrimaryEmailUpdateOne) SetEmail(e *Email) *PrimaryEmailUpdateOne {
	return peuo.SetEmailID(e.ID)
}

// SetUser sets the "user" edge to the User entity.
func (peuo *PrimaryEmailUpdateOne) SetUser(u *User) *PrimaryEmailUpdateOne {
	return peuo.SetUserID(u.ID)
}

// Mutation returns the PrimaryEmailMutation object of the builder.
func (peuo *PrimaryEmailUpdateOne) Mutation() *PrimaryEmailMutation {
	return peuo.mutation
}

// ClearEmail clears the "email" edge to the Email entity.
func (peuo *PrimaryEmailUpdateOne) ClearEmail() *PrimaryEmailUpdateOne {
	peuo.mutation.ClearEmail()
	return peuo
}

// ClearUser clears the "user" edge to the User entity.
func (peuo *PrimaryEmailUpdateOne) ClearUser() *PrimaryEmailUpdateOne {
	peuo.mutation.ClearUser()
	return peuo
}

// Where appends a list predicates to the PrimaryEmailUpdate builder.
func (peuo *PrimaryEmailUpdateOne) Where(ps ...predicate.PrimaryEmail) *PrimaryEmailUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *PrimaryEmailUpdateOne) Select(field string, fields ...string) *PrimaryEmailUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated PrimaryEmail entity.
func (peuo *PrimaryEmailUpdateOne) Save(ctx context.Context) (*PrimaryEmail, error) {
	return withHooks[*PrimaryEmail, PrimaryEmailMutation](ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *PrimaryEmailUpdateOne) SaveX(ctx context.Context) *PrimaryEmail {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *PrimaryEmailUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *PrimaryEmailUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (peuo *PrimaryEmailUpdateOne) sqlSave(ctx context.Context) (_node *PrimaryEmail, err error) {
	_spec := sqlgraph.NewUpdateSpec(primaryemail.Table, primaryemail.Columns, sqlgraph.NewFieldSpec(primaryemail.FieldID, field.TypeUUID))
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrimaryEmail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, primaryemail.FieldID)
		for _, f := range fields {
			if !primaryemail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != primaryemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.CreatedAt(); ok {
		_spec.SetField(primaryemail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := peuo.mutation.UpdatedAt(); ok {
		_spec.SetField(primaryemail.FieldUpdatedAt, field.TypeTime, value)
	}
	if peuo.mutation.EmailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.EmailTable,
			Columns: []string{primaryemail.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: email.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.EmailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.EmailTable,
			Columns: []string{primaryemail.EmailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: email.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.UserTable,
			Columns: []string{primaryemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   primaryemail.UserTable,
			Columns: []string{primaryemail.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrimaryEmail{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{primaryemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}
