// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/user"
	"github.com/hellohq/hqservice/ent/webauthncredential"
)

// WebauthnCredential is the model entity for the WebauthnCredential schema.
type WebauthnCredential struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// PublicKey holds the value of the "public_key" field.
	PublicKey string `json:"public_key,omitempty"`
	// AttestationType holds the value of the "attestation_type" field.
	AttestationType string `json:"attestation_type,omitempty"`
	// Aaguid holds the value of the "aaguid" field.
	Aaguid uuid.UUID `json:"aaguid,omitempty"`
	// SignCount holds the value of the "sign_count" field.
	SignCount int32 `json:"sign_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// BackupEligible holds the value of the "backup_eligible" field.
	BackupEligible bool `json:"backup_eligible,omitempty"`
	// BackupState holds the value of the "backup_state" field.
	BackupState bool `json:"backup_state,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebauthnCredentialQuery when eager-loading is set.
	Edges WebauthnCredentialEdges `json:"edges"`
}

// WebauthnCredentialEdges holds the relations/edges for other nodes in the graph.
type WebauthnCredentialEdges struct {
	// WebauthnCredentialTransports holds the value of the webauthn_credential_transports edge.
	WebauthnCredentialTransports []*WebauthnCredentialTransport `json:"webauthn_credential_transports,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WebauthnCredentialTransportsOrErr returns the WebauthnCredentialTransports value or an error if the edge
// was not loaded in eager-loading.
func (e WebauthnCredentialEdges) WebauthnCredentialTransportsOrErr() ([]*WebauthnCredentialTransport, error) {
	if e.loadedTypes[0] {
		return e.WebauthnCredentialTransports, nil
	}
	return nil, &NotLoadedError{edge: "webauthn_credential_transports"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WebauthnCredentialEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebauthnCredential) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webauthncredential.FieldBackupEligible, webauthncredential.FieldBackupState:
			values[i] = new(sql.NullBool)
		case webauthncredential.FieldSignCount:
			values[i] = new(sql.NullInt64)
		case webauthncredential.FieldID, webauthncredential.FieldPublicKey, webauthncredential.FieldAttestationType, webauthncredential.FieldName:
			values[i] = new(sql.NullString)
		case webauthncredential.FieldCreatedAt, webauthncredential.FieldUpdatedAt, webauthncredential.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		case webauthncredential.FieldUserID, webauthncredential.FieldAaguid:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WebauthnCredential", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebauthnCredential fields.
func (wc *WebauthnCredential) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webauthncredential.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				wc.ID = value.String
			}
		case webauthncredential.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				wc.UserID = *value
			}
		case webauthncredential.FieldPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_key", values[i])
			} else if value.Valid {
				wc.PublicKey = value.String
			}
		case webauthncredential.FieldAttestationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attestation_type", values[i])
			} else if value.Valid {
				wc.AttestationType = value.String
			}
		case webauthncredential.FieldAaguid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field aaguid", values[i])
			} else if value != nil {
				wc.Aaguid = *value
			}
		case webauthncredential.FieldSignCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sign_count", values[i])
			} else if value.Valid {
				wc.SignCount = int32(value.Int64)
			}
		case webauthncredential.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wc.CreatedAt = value.Time
			}
		case webauthncredential.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wc.UpdatedAt = value.Time
			}
		case webauthncredential.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wc.Name = value.String
			}
		case webauthncredential.FieldBackupEligible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field backup_eligible", values[i])
			} else if value.Valid {
				wc.BackupEligible = value.Bool
			}
		case webauthncredential.FieldBackupState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field backup_state", values[i])
			} else if value.Valid {
				wc.BackupState = value.Bool
			}
		case webauthncredential.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				wc.LastUsedAt = value.Time
			}
		}
	}
	return nil
}

// QueryWebauthnCredentialTransports queries the "webauthn_credential_transports" edge of the WebauthnCredential entity.
func (wc *WebauthnCredential) QueryWebauthnCredentialTransports() *WebauthnCredentialTransportQuery {
	return NewWebauthnCredentialClient(wc.config).QueryWebauthnCredentialTransports(wc)
}

// QueryUser queries the "user" edge of the WebauthnCredential entity.
func (wc *WebauthnCredential) QueryUser() *UserQuery {
	return NewWebauthnCredentialClient(wc.config).QueryUser(wc)
}

// Update returns a builder for updating this WebauthnCredential.
// Note that you need to call WebauthnCredential.Unwrap() before calling this method if this WebauthnCredential
// was returned from a transaction, and the transaction was committed or rolled back.
func (wc *WebauthnCredential) Update() *WebauthnCredentialUpdateOne {
	return NewWebauthnCredentialClient(wc.config).UpdateOne(wc)
}

// Unwrap unwraps the WebauthnCredential entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wc *WebauthnCredential) Unwrap() *WebauthnCredential {
	_tx, ok := wc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebauthnCredential is not a transactional entity")
	}
	wc.config.driver = _tx.drv
	return wc
}

// String implements the fmt.Stringer.
func (wc *WebauthnCredential) String() string {
	var builder strings.Builder
	builder.WriteString("WebauthnCredential(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wc.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.UserID))
	builder.WriteString(", ")
	builder.WriteString("public_key=")
	builder.WriteString(wc.PublicKey)
	builder.WriteString(", ")
	builder.WriteString("attestation_type=")
	builder.WriteString(wc.AttestationType)
	builder.WriteString(", ")
	builder.WriteString("aaguid=")
	builder.WriteString(fmt.Sprintf("%v", wc.Aaguid))
	builder.WriteString(", ")
	builder.WriteString("sign_count=")
	builder.WriteString(fmt.Sprintf("%v", wc.SignCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wc.Name)
	builder.WriteString(", ")
	builder.WriteString("backup_eligible=")
	builder.WriteString(fmt.Sprintf("%v", wc.BackupEligible))
	builder.WriteString(", ")
	builder.WriteString("backup_state=")
	builder.WriteString(fmt.Sprintf("%v", wc.BackupState))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(wc.LastUsedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WebauthnCredentials is a parsable slice of WebauthnCredential.
type WebauthnCredentials []*WebauthnCredential
