// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hellohq/hqservice/ent/email"
	"github.com/hellohq/hqservice/ent/identity"
	"github.com/hellohq/hqservice/ent/jwk"
	"github.com/hellohq/hqservice/ent/passcode"
	"github.com/hellohq/hqservice/ent/primaryemail"
	"github.com/hellohq/hqservice/ent/provider"
	"github.com/hellohq/hqservice/ent/user"
	"github.com/hellohq/hqservice/ent/webauthncredential"
	"github.com/hellohq/hqservice/ent/webauthncredentialtransport"
	"github.com/hellohq/hqservice/ent/webauthnsessiondata"
	"github.com/hellohq/hqservice/ent/webauthnsessiondataallowedcredential"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Email is the client for interacting with the Email builders.
	Email *EmailClient
	// Identity is the client for interacting with the Identity builders.
	Identity *IdentityClient
	// Jwk is the client for interacting with the Jwk builders.
	Jwk *JwkClient
	// Passcode is the client for interacting with the Passcode builders.
	Passcode *PasscodeClient
	// PrimaryEmail is the client for interacting with the PrimaryEmail builders.
	PrimaryEmail *PrimaryEmailClient
	// Provider is the client for interacting with the Provider builders.
	Provider *ProviderClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WebauthnCredential is the client for interacting with the WebauthnCredential builders.
	WebauthnCredential *WebauthnCredentialClient
	// WebauthnCredentialTransport is the client for interacting with the WebauthnCredentialTransport builders.
	WebauthnCredentialTransport *WebauthnCredentialTransportClient
	// WebauthnSessionData is the client for interacting with the WebauthnSessionData builders.
	WebauthnSessionData *WebauthnSessionDataClient
	// WebauthnSessionDataAllowedCredential is the client for interacting with the WebauthnSessionDataAllowedCredential builders.
	WebauthnSessionDataAllowedCredential *WebauthnSessionDataAllowedCredentialClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Email = NewEmailClient(c.config)
	c.Identity = NewIdentityClient(c.config)
	c.Jwk = NewJwkClient(c.config)
	c.Passcode = NewPasscodeClient(c.config)
	c.PrimaryEmail = NewPrimaryEmailClient(c.config)
	c.Provider = NewProviderClient(c.config)
	c.User = NewUserClient(c.config)
	c.WebauthnCredential = NewWebauthnCredentialClient(c.config)
	c.WebauthnCredentialTransport = NewWebauthnCredentialTransportClient(c.config)
	c.WebauthnSessionData = NewWebauthnSessionDataClient(c.config)
	c.WebauthnSessionDataAllowedCredential = NewWebauthnSessionDataAllowedCredentialClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                  ctx,
		config:                               cfg,
		Email:                                NewEmailClient(cfg),
		Identity:                             NewIdentityClient(cfg),
		Jwk:                                  NewJwkClient(cfg),
		Passcode:                             NewPasscodeClient(cfg),
		PrimaryEmail:                         NewPrimaryEmailClient(cfg),
		Provider:                             NewProviderClient(cfg),
		User:                                 NewUserClient(cfg),
		WebauthnCredential:                   NewWebauthnCredentialClient(cfg),
		WebauthnCredentialTransport:          NewWebauthnCredentialTransportClient(cfg),
		WebauthnSessionData:                  NewWebauthnSessionDataClient(cfg),
		WebauthnSessionDataAllowedCredential: NewWebauthnSessionDataAllowedCredentialClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                  ctx,
		config:                               cfg,
		Email:                                NewEmailClient(cfg),
		Identity:                             NewIdentityClient(cfg),
		Jwk:                                  NewJwkClient(cfg),
		Passcode:                             NewPasscodeClient(cfg),
		PrimaryEmail:                         NewPrimaryEmailClient(cfg),
		Provider:                             NewProviderClient(cfg),
		User:                                 NewUserClient(cfg),
		WebauthnCredential:                   NewWebauthnCredentialClient(cfg),
		WebauthnCredentialTransport:          NewWebauthnCredentialTransportClient(cfg),
		WebauthnSessionData:                  NewWebauthnSessionDataClient(cfg),
		WebauthnSessionDataAllowedCredential: NewWebauthnSessionDataAllowedCredentialClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Email.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Email, c.Identity, c.Jwk, c.Passcode, c.PrimaryEmail, c.Provider, c.User,
		c.WebauthnCredential, c.WebauthnCredentialTransport, c.WebauthnSessionData,
		c.WebauthnSessionDataAllowedCredential,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Email, c.Identity, c.Jwk, c.Passcode, c.PrimaryEmail, c.Provider, c.User,
		c.WebauthnCredential, c.WebauthnCredentialTransport, c.WebauthnSessionData,
		c.WebauthnSessionDataAllowedCredential,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EmailMutation:
		return c.Email.mutate(ctx, m)
	case *IdentityMutation:
		return c.Identity.mutate(ctx, m)
	case *JwkMutation:
		return c.Jwk.mutate(ctx, m)
	case *PasscodeMutation:
		return c.Passcode.mutate(ctx, m)
	case *PrimaryEmailMutation:
		return c.PrimaryEmail.mutate(ctx, m)
	case *ProviderMutation:
		return c.Provider.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WebauthnCredentialMutation:
		return c.WebauthnCredential.mutate(ctx, m)
	case *WebauthnCredentialTransportMutation:
		return c.WebauthnCredentialTransport.mutate(ctx, m)
	case *WebauthnSessionDataMutation:
		return c.WebauthnSessionData.mutate(ctx, m)
	case *WebauthnSessionDataAllowedCredentialMutation:
		return c.WebauthnSessionDataAllowedCredential.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EmailClient is a client for the Email schema.
type EmailClient struct {
	config
}

// NewEmailClient returns a client for the Email from the given config.
func NewEmailClient(c config) *EmailClient {
	return &EmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `email.Hooks(f(g(h())))`.
func (c *EmailClient) Use(hooks ...Hook) {
	c.hooks.Email = append(c.hooks.Email, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `email.Intercept(f(g(h())))`.
func (c *EmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.Email = append(c.inters.Email, interceptors...)
}

// Create returns a builder for creating a Email entity.
func (c *EmailClient) Create() *EmailCreate {
	mutation := newEmailMutation(c.config, OpCreate)
	return &EmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Email entities.
func (c *EmailClient) CreateBulk(builders ...*EmailCreate) *EmailCreateBulk {
	return &EmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Email.
func (c *EmailClient) Update() *EmailUpdate {
	mutation := newEmailMutation(c.config, OpUpdate)
	return &EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailClient) UpdateOne(e *Email) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmail(e))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailClient) UpdateOneID(id uuid.UUID) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmailID(id))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Email.
func (c *EmailClient) Delete() *EmailDelete {
	mutation := newEmailMutation(c.config, OpDelete)
	return &EmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailClient) DeleteOne(e *Email) *EmailDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailClient) DeleteOneID(id uuid.UUID) *EmailDeleteOne {
	builder := c.Delete().Where(email.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailDeleteOne{builder}
}

// Query returns a query builder for Email.
func (c *EmailClient) Query() *EmailQuery {
	return &EmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a Email entity by its id.
func (c *EmailClient) Get(ctx context.Context, id uuid.UUID) (*Email, error) {
	return c.Query().Where(email.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailClient) GetX(ctx context.Context, id uuid.UUID) *Email {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Email.
func (c *EmailClient) QueryUser(e *Email) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(email.Table, email.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, email.UserTable, email.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdentities queries the identities edge of a Email.
func (c *EmailClient) QueryIdentities(e *Email) *IdentityQuery {
	query := (&IdentityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(email.Table, email.FieldID, id),
			sqlgraph.To(identity.Table, identity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, email.IdentitiesTable, email.IdentitiesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasscodes queries the passcodes edge of a Email.
func (c *EmailClient) QueryPasscodes(e *Email) *PasscodeQuery {
	query := (&PasscodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(email.Table, email.FieldID, id),
			sqlgraph.To(passcode.Table, passcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, email.PasscodesTable, email.PasscodesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryEmail queries the primary_email edge of a Email.
func (c *EmailClient) QueryPrimaryEmail(e *Email) *PrimaryEmailQuery {
	query := (&PrimaryEmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(email.Table, email.FieldID, id),
			sqlgraph.To(primaryemail.Table, primaryemail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, email.PrimaryEmailTable, email.PrimaryEmailColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailClient) Hooks() []Hook {
	return c.hooks.Email
}

// Interceptors returns the client interceptors.
func (c *EmailClient) Interceptors() []Interceptor {
	return c.inters.Email
}

func (c *EmailClient) mutate(ctx context.Context, m *EmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Email mutation op: %q", m.Op())
	}
}

// IdentityClient is a client for the Identity schema.
type IdentityClient struct {
	config
}

// NewIdentityClient returns a client for the Identity from the given config.
func NewIdentityClient(c config) *IdentityClient {
	return &IdentityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identity.Hooks(f(g(h())))`.
func (c *IdentityClient) Use(hooks ...Hook) {
	c.hooks.Identity = append(c.hooks.Identity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `identity.Intercept(f(g(h())))`.
func (c *IdentityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Identity = append(c.inters.Identity, interceptors...)
}

// Create returns a builder for creating a Identity entity.
func (c *IdentityClient) Create() *IdentityCreate {
	mutation := newIdentityMutation(c.config, OpCreate)
	return &IdentityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Identity entities.
func (c *IdentityClient) CreateBulk(builders ...*IdentityCreate) *IdentityCreateBulk {
	return &IdentityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Identity.
func (c *IdentityClient) Update() *IdentityUpdate {
	mutation := newIdentityMutation(c.config, OpUpdate)
	return &IdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentityClient) UpdateOne(i *Identity) *IdentityUpdateOne {
	mutation := newIdentityMutation(c.config, OpUpdateOne, withIdentity(i))
	return &IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentityClient) UpdateOneID(id uuid.UUID) *IdentityUpdateOne {
	mutation := newIdentityMutation(c.config, OpUpdateOne, withIdentityID(id))
	return &IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Identity.
func (c *IdentityClient) Delete() *IdentityDelete {
	mutation := newIdentityMutation(c.config, OpDelete)
	return &IdentityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdentityClient) DeleteOne(i *Identity) *IdentityDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdentityClient) DeleteOneID(id uuid.UUID) *IdentityDeleteOne {
	builder := c.Delete().Where(identity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentityDeleteOne{builder}
}

// Query returns a query builder for Identity.
func (c *IdentityClient) Query() *IdentityQuery {
	return &IdentityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdentity},
		inters: c.Interceptors(),
	}
}

// Get returns a Identity entity by its id.
func (c *IdentityClient) Get(ctx context.Context, id uuid.UUID) (*Identity, error) {
	return c.Query().Where(identity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentityClient) GetX(ctx context.Context, id uuid.UUID) *Identity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmail queries the email edge of a Identity.
func (c *IdentityClient) QueryEmail(i *Identity) *EmailQuery {
	query := (&EmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(identity.Table, identity.FieldID, id),
			sqlgraph.To(email.Table, email.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, identity.EmailTable, identity.EmailColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdentityClient) Hooks() []Hook {
	return c.hooks.Identity
}

// Interceptors returns the client interceptors.
func (c *IdentityClient) Interceptors() []Interceptor {
	return c.inters.Identity
}

func (c *IdentityClient) mutate(ctx context.Context, m *IdentityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdentityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdentityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Identity mutation op: %q", m.Op())
	}
}

// JwkClient is a client for the Jwk schema.
type JwkClient struct {
	config
}

// NewJwkClient returns a client for the Jwk from the given config.
func NewJwkClient(c config) *JwkClient {
	return &JwkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jwk.Hooks(f(g(h())))`.
func (c *JwkClient) Use(hooks ...Hook) {
	c.hooks.Jwk = append(c.hooks.Jwk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jwk.Intercept(f(g(h())))`.
func (c *JwkClient) Intercept(interceptors ...Interceptor) {
	c.inters.Jwk = append(c.inters.Jwk, interceptors...)
}

// Create returns a builder for creating a Jwk entity.
func (c *JwkClient) Create() *JwkCreate {
	mutation := newJwkMutation(c.config, OpCreate)
	return &JwkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Jwk entities.
func (c *JwkClient) CreateBulk(builders ...*JwkCreate) *JwkCreateBulk {
	return &JwkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Jwk.
func (c *JwkClient) Update() *JwkUpdate {
	mutation := newJwkMutation(c.config, OpUpdate)
	return &JwkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JwkClient) UpdateOne(j *Jwk) *JwkUpdateOne {
	mutation := newJwkMutation(c.config, OpUpdateOne, withJwk(j))
	return &JwkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JwkClient) UpdateOneID(id uint) *JwkUpdateOne {
	mutation := newJwkMutation(c.config, OpUpdateOne, withJwkID(id))
	return &JwkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Jwk.
func (c *JwkClient) Delete() *JwkDelete {
	mutation := newJwkMutation(c.config, OpDelete)
	return &JwkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JwkClient) DeleteOne(j *Jwk) *JwkDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JwkClient) DeleteOneID(id uint) *JwkDeleteOne {
	builder := c.Delete().Where(jwk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JwkDeleteOne{builder}
}

// Query returns a query builder for Jwk.
func (c *JwkClient) Query() *JwkQuery {
	return &JwkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJwk},
		inters: c.Interceptors(),
	}
}

// Get returns a Jwk entity by its id.
func (c *JwkClient) Get(ctx context.Context, id uint) (*Jwk, error) {
	return c.Query().Where(jwk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JwkClient) GetX(ctx context.Context, id uint) *Jwk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JwkClient) Hooks() []Hook {
	return c.hooks.Jwk
}

// Interceptors returns the client interceptors.
func (c *JwkClient) Interceptors() []Interceptor {
	return c.inters.Jwk
}

func (c *JwkClient) mutate(ctx context.Context, m *JwkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JwkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JwkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JwkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JwkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Jwk mutation op: %q", m.Op())
	}
}

// PasscodeClient is a client for the Passcode schema.
type PasscodeClient struct {
	config
}

// NewPasscodeClient returns a client for the Passcode from the given config.
func NewPasscodeClient(c config) *PasscodeClient {
	return &PasscodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passcode.Hooks(f(g(h())))`.
func (c *PasscodeClient) Use(hooks ...Hook) {
	c.hooks.Passcode = append(c.hooks.Passcode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passcode.Intercept(f(g(h())))`.
func (c *PasscodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Passcode = append(c.inters.Passcode, interceptors...)
}

// Create returns a builder for creating a Passcode entity.
func (c *PasscodeClient) Create() *PasscodeCreate {
	mutation := newPasscodeMutation(c.config, OpCreate)
	return &PasscodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Passcode entities.
func (c *PasscodeClient) CreateBulk(builders ...*PasscodeCreate) *PasscodeCreateBulk {
	return &PasscodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Passcode.
func (c *PasscodeClient) Update() *PasscodeUpdate {
	mutation := newPasscodeMutation(c.config, OpUpdate)
	return &PasscodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasscodeClient) UpdateOne(pa *Passcode) *PasscodeUpdateOne {
	mutation := newPasscodeMutation(c.config, OpUpdateOne, withPasscode(pa))
	return &PasscodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasscodeClient) UpdateOneID(id uuid.UUID) *PasscodeUpdateOne {
	mutation := newPasscodeMutation(c.config, OpUpdateOne, withPasscodeID(id))
	return &PasscodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Passcode.
func (c *PasscodeClient) Delete() *PasscodeDelete {
	mutation := newPasscodeMutation(c.config, OpDelete)
	return &PasscodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasscodeClient) DeleteOne(pa *Passcode) *PasscodeDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasscodeClient) DeleteOneID(id uuid.UUID) *PasscodeDeleteOne {
	builder := c.Delete().Where(passcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasscodeDeleteOne{builder}
}

// Query returns a query builder for Passcode.
func (c *PasscodeClient) Query() *PasscodeQuery {
	return &PasscodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasscode},
		inters: c.Interceptors(),
	}
}

// Get returns a Passcode entity by its id.
func (c *PasscodeClient) Get(ctx context.Context, id uuid.UUID) (*Passcode, error) {
	return c.Query().Where(passcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasscodeClient) GetX(ctx context.Context, id uuid.UUID) *Passcode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmail queries the email edge of a Passcode.
func (c *PasscodeClient) QueryEmail(pa *Passcode) *EmailQuery {
	query := (&EmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(passcode.Table, passcode.FieldID, id),
			sqlgraph.To(email.Table, email.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, passcode.EmailTable, passcode.EmailColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Passcode.
func (c *PasscodeClient) QueryUser(pa *Passcode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(passcode.Table, passcode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, passcode.UserTable, passcode.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasscodeClient) Hooks() []Hook {
	return c.hooks.Passcode
}

// Interceptors returns the client interceptors.
func (c *PasscodeClient) Interceptors() []Interceptor {
	return c.inters.Passcode
}

func (c *PasscodeClient) mutate(ctx context.Context, m *PasscodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasscodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasscodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasscodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasscodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Passcode mutation op: %q", m.Op())
	}
}

// PrimaryEmailClient is a client for the PrimaryEmail schema.
type PrimaryEmailClient struct {
	config
}

// NewPrimaryEmailClient returns a client for the PrimaryEmail from the given config.
func NewPrimaryEmailClient(c config) *PrimaryEmailClient {
	return &PrimaryEmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `primaryemail.Hooks(f(g(h())))`.
func (c *PrimaryEmailClient) Use(hooks ...Hook) {
	c.hooks.PrimaryEmail = append(c.hooks.PrimaryEmail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `primaryemail.Intercept(f(g(h())))`.
func (c *PrimaryEmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.PrimaryEmail = append(c.inters.PrimaryEmail, interceptors...)
}

// Create returns a builder for creating a PrimaryEmail entity.
func (c *PrimaryEmailClient) Create() *PrimaryEmailCreate {
	mutation := newPrimaryEmailMutation(c.config, OpCreate)
	return &PrimaryEmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrimaryEmail entities.
func (c *PrimaryEmailClient) CreateBulk(builders ...*PrimaryEmailCreate) *PrimaryEmailCreateBulk {
	return &PrimaryEmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrimaryEmail.
func (c *PrimaryEmailClient) Update() *PrimaryEmailUpdate {
	mutation := newPrimaryEmailMutation(c.config, OpUpdate)
	return &PrimaryEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrimaryEmailClient) UpdateOne(pe *PrimaryEmail) *PrimaryEmailUpdateOne {
	mutation := newPrimaryEmailMutation(c.config, OpUpdateOne, withPrimaryEmail(pe))
	return &PrimaryEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrimaryEmailClient) UpdateOneID(id uuid.UUID) *PrimaryEmailUpdateOne {
	mutation := newPrimaryEmailMutation(c.config, OpUpdateOne, withPrimaryEmailID(id))
	return &PrimaryEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrimaryEmail.
func (c *PrimaryEmailClient) Delete() *PrimaryEmailDelete {
	mutation := newPrimaryEmailMutation(c.config, OpDelete)
	return &PrimaryEmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrimaryEmailClient) DeleteOne(pe *PrimaryEmail) *PrimaryEmailDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrimaryEmailClient) DeleteOneID(id uuid.UUID) *PrimaryEmailDeleteOne {
	builder := c.Delete().Where(primaryemail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrimaryEmailDeleteOne{builder}
}

// Query returns a query builder for PrimaryEmail.
func (c *PrimaryEmailClient) Query() *PrimaryEmailQuery {
	return &PrimaryEmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrimaryEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a PrimaryEmail entity by its id.
func (c *PrimaryEmailClient) Get(ctx context.Context, id uuid.UUID) (*PrimaryEmail, error) {
	return c.Query().Where(primaryemail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrimaryEmailClient) GetX(ctx context.Context, id uuid.UUID) *PrimaryEmail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmail queries the email edge of a PrimaryEmail.
func (c *PrimaryEmailClient) QueryEmail(pe *PrimaryEmail) *EmailQuery {
	query := (&EmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(primaryemail.Table, primaryemail.FieldID, id),
			sqlgraph.To(email.Table, email.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, primaryemail.EmailTable, primaryemail.EmailColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a PrimaryEmail.
func (c *PrimaryEmailClient) QueryUser(pe *PrimaryEmail) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(primaryemail.Table, primaryemail.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, primaryemail.UserTable, primaryemail.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrimaryEmailClient) Hooks() []Hook {
	return c.hooks.PrimaryEmail
}

// Interceptors returns the client interceptors.
func (c *PrimaryEmailClient) Interceptors() []Interceptor {
	return c.inters.PrimaryEmail
}

func (c *PrimaryEmailClient) mutate(ctx context.Context, m *PrimaryEmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrimaryEmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrimaryEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrimaryEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrimaryEmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PrimaryEmail mutation op: %q", m.Op())
	}
}

// ProviderClient is a client for the Provider schema.
type ProviderClient struct {
	config
}

// NewProviderClient returns a client for the Provider from the given config.
func NewProviderClient(c config) *ProviderClient {
	return &ProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provider.Hooks(f(g(h())))`.
func (c *ProviderClient) Use(hooks ...Hook) {
	c.hooks.Provider = append(c.hooks.Provider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `provider.Intercept(f(g(h())))`.
func (c *ProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Provider = append(c.inters.Provider, interceptors...)
}

// Create returns a builder for creating a Provider entity.
func (c *ProviderClient) Create() *ProviderCreate {
	mutation := newProviderMutation(c.config, OpCreate)
	return &ProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Provider entities.
func (c *ProviderClient) CreateBulk(builders ...*ProviderCreate) *ProviderCreateBulk {
	return &ProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Provider.
func (c *ProviderClient) Update() *ProviderUpdate {
	mutation := newProviderMutation(c.config, OpUpdate)
	return &ProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderClient) UpdateOne(pr *Provider) *ProviderUpdateOne {
	mutation := newProviderMutation(c.config, OpUpdateOne, withProvider(pr))
	return &ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderClient) UpdateOneID(id uuid.UUID) *ProviderUpdateOne {
	mutation := newProviderMutation(c.config, OpUpdateOne, withProviderID(id))
	return &ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Provider.
func (c *ProviderClient) Delete() *ProviderDelete {
	mutation := newProviderMutation(c.config, OpDelete)
	return &ProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderClient) DeleteOne(pr *Provider) *ProviderDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderClient) DeleteOneID(id uuid.UUID) *ProviderDeleteOne {
	builder := c.Delete().Where(provider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderDeleteOne{builder}
}

// Query returns a query builder for Provider.
func (c *ProviderClient) Query() *ProviderQuery {
	return &ProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a Provider entity by its id.
func (c *ProviderClient) Get(ctx context.Context, id uuid.UUID) (*Provider, error) {
	return c.Query().Where(provider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderClient) GetX(ctx context.Context, id uuid.UUID) *Provider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProviderClient) Hooks() []Hook {
	return c.hooks.Provider
}

// Interceptors returns the client interceptors.
func (c *ProviderClient) Interceptors() []Interceptor {
	return c.inters.Provider
}

func (c *ProviderClient) mutate(ctx context.Context, m *ProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Provider mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmails queries the emails edge of a User.
func (c *UserClient) QueryEmails(u *User) *EmailQuery {
	query := (&EmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(email.Table, email.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EmailsTable, user.EmailsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasscodes queries the passcodes edge of a User.
func (c *UserClient) QueryPasscodes(u *User) *PasscodeQuery {
	query := (&PasscodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(passcode.Table, passcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasscodesTable, user.PasscodesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrimaryEmail queries the primary_email edge of a User.
func (c *UserClient) QueryPrimaryEmail(u *User) *PrimaryEmailQuery {
	query := (&PrimaryEmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(primaryemail.Table, primaryemail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.PrimaryEmailTable, user.PrimaryEmailColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWebauthnCredentials queries the webauthn_credentials edge of a User.
func (c *UserClient) QueryWebauthnCredentials(u *User) *WebauthnCredentialQuery {
	query := (&WebauthnCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(webauthncredential.Table, webauthncredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WebauthnCredentialsTable, user.WebauthnCredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WebauthnCredentialClient is a client for the WebauthnCredential schema.
type WebauthnCredentialClient struct {
	config
}

// NewWebauthnCredentialClient returns a client for the WebauthnCredential from the given config.
func NewWebauthnCredentialClient(c config) *WebauthnCredentialClient {
	return &WebauthnCredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webauthncredential.Hooks(f(g(h())))`.
func (c *WebauthnCredentialClient) Use(hooks ...Hook) {
	c.hooks.WebauthnCredential = append(c.hooks.WebauthnCredential, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webauthncredential.Intercept(f(g(h())))`.
func (c *WebauthnCredentialClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebauthnCredential = append(c.inters.WebauthnCredential, interceptors...)
}

// Create returns a builder for creating a WebauthnCredential entity.
func (c *WebauthnCredentialClient) Create() *WebauthnCredentialCreate {
	mutation := newWebauthnCredentialMutation(c.config, OpCreate)
	return &WebauthnCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebauthnCredential entities.
func (c *WebauthnCredentialClient) CreateBulk(builders ...*WebauthnCredentialCreate) *WebauthnCredentialCreateBulk {
	return &WebauthnCredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebauthnCredential.
func (c *WebauthnCredentialClient) Update() *WebauthnCredentialUpdate {
	mutation := newWebauthnCredentialMutation(c.config, OpUpdate)
	return &WebauthnCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebauthnCredentialClient) UpdateOne(wc *WebauthnCredential) *WebauthnCredentialUpdateOne {
	mutation := newWebauthnCredentialMutation(c.config, OpUpdateOne, withWebauthnCredential(wc))
	return &WebauthnCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebauthnCredentialClient) UpdateOneID(id string) *WebauthnCredentialUpdateOne {
	mutation := newWebauthnCredentialMutation(c.config, OpUpdateOne, withWebauthnCredentialID(id))
	return &WebauthnCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebauthnCredential.
func (c *WebauthnCredentialClient) Delete() *WebauthnCredentialDelete {
	mutation := newWebauthnCredentialMutation(c.config, OpDelete)
	return &WebauthnCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebauthnCredentialClient) DeleteOne(wc *WebauthnCredential) *WebauthnCredentialDeleteOne {
	return c.DeleteOneID(wc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebauthnCredentialClient) DeleteOneID(id string) *WebauthnCredentialDeleteOne {
	builder := c.Delete().Where(webauthncredential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebauthnCredentialDeleteOne{builder}
}

// Query returns a query builder for WebauthnCredential.
func (c *WebauthnCredentialClient) Query() *WebauthnCredentialQuery {
	return &WebauthnCredentialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebauthnCredential},
		inters: c.Interceptors(),
	}
}

// Get returns a WebauthnCredential entity by its id.
func (c *WebauthnCredentialClient) Get(ctx context.Context, id string) (*WebauthnCredential, error) {
	return c.Query().Where(webauthncredential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebauthnCredentialClient) GetX(ctx context.Context, id string) *WebauthnCredential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWebauthnCredentialTransports queries the webauthn_credential_transports edge of a WebauthnCredential.
func (c *WebauthnCredentialClient) QueryWebauthnCredentialTransports(wc *WebauthnCredential) *WebauthnCredentialTransportQuery {
	query := (&WebauthnCredentialTransportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthncredential.Table, webauthncredential.FieldID, id),
			sqlgraph.To(webauthncredentialtransport.Table, webauthncredentialtransport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, webauthncredential.WebauthnCredentialTransportsTable, webauthncredential.WebauthnCredentialTransportsColumn),
		)
		fromV = sqlgraph.Neighbors(wc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a WebauthnCredential.
func (c *WebauthnCredentialClient) QueryUser(wc *WebauthnCredential) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthncredential.Table, webauthncredential.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webauthncredential.UserTable, webauthncredential.UserColumn),
		)
		fromV = sqlgraph.Neighbors(wc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebauthnCredentialClient) Hooks() []Hook {
	return c.hooks.WebauthnCredential
}

// Interceptors returns the client interceptors.
func (c *WebauthnCredentialClient) Interceptors() []Interceptor {
	return c.inters.WebauthnCredential
}

func (c *WebauthnCredentialClient) mutate(ctx context.Context, m *WebauthnCredentialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebauthnCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebauthnCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebauthnCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebauthnCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebauthnCredential mutation op: %q", m.Op())
	}
}

// WebauthnCredentialTransportClient is a client for the WebauthnCredentialTransport schema.
type WebauthnCredentialTransportClient struct {
	config
}

// NewWebauthnCredentialTransportClient returns a client for the WebauthnCredentialTransport from the given config.
func NewWebauthnCredentialTransportClient(c config) *WebauthnCredentialTransportClient {
	return &WebauthnCredentialTransportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webauthncredentialtransport.Hooks(f(g(h())))`.
func (c *WebauthnCredentialTransportClient) Use(hooks ...Hook) {
	c.hooks.WebauthnCredentialTransport = append(c.hooks.WebauthnCredentialTransport, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webauthncredentialtransport.Intercept(f(g(h())))`.
func (c *WebauthnCredentialTransportClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebauthnCredentialTransport = append(c.inters.WebauthnCredentialTransport, interceptors...)
}

// Create returns a builder for creating a WebauthnCredentialTransport entity.
func (c *WebauthnCredentialTransportClient) Create() *WebauthnCredentialTransportCreate {
	mutation := newWebauthnCredentialTransportMutation(c.config, OpCreate)
	return &WebauthnCredentialTransportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebauthnCredentialTransport entities.
func (c *WebauthnCredentialTransportClient) CreateBulk(builders ...*WebauthnCredentialTransportCreate) *WebauthnCredentialTransportCreateBulk {
	return &WebauthnCredentialTransportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebauthnCredentialTransport.
func (c *WebauthnCredentialTransportClient) Update() *WebauthnCredentialTransportUpdate {
	mutation := newWebauthnCredentialTransportMutation(c.config, OpUpdate)
	return &WebauthnCredentialTransportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebauthnCredentialTransportClient) UpdateOne(wct *WebauthnCredentialTransport) *WebauthnCredentialTransportUpdateOne {
	mutation := newWebauthnCredentialTransportMutation(c.config, OpUpdateOne, withWebauthnCredentialTransport(wct))
	return &WebauthnCredentialTransportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebauthnCredentialTransportClient) UpdateOneID(id uuid.UUID) *WebauthnCredentialTransportUpdateOne {
	mutation := newWebauthnCredentialTransportMutation(c.config, OpUpdateOne, withWebauthnCredentialTransportID(id))
	return &WebauthnCredentialTransportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebauthnCredentialTransport.
func (c *WebauthnCredentialTransportClient) Delete() *WebauthnCredentialTransportDelete {
	mutation := newWebauthnCredentialTransportMutation(c.config, OpDelete)
	return &WebauthnCredentialTransportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebauthnCredentialTransportClient) DeleteOne(wct *WebauthnCredentialTransport) *WebauthnCredentialTransportDeleteOne {
	return c.DeleteOneID(wct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebauthnCredentialTransportClient) DeleteOneID(id uuid.UUID) *WebauthnCredentialTransportDeleteOne {
	builder := c.Delete().Where(webauthncredentialtransport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebauthnCredentialTransportDeleteOne{builder}
}

// Query returns a query builder for WebauthnCredentialTransport.
func (c *WebauthnCredentialTransportClient) Query() *WebauthnCredentialTransportQuery {
	return &WebauthnCredentialTransportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebauthnCredentialTransport},
		inters: c.Interceptors(),
	}
}

// Get returns a WebauthnCredentialTransport entity by its id.
func (c *WebauthnCredentialTransportClient) Get(ctx context.Context, id uuid.UUID) (*WebauthnCredentialTransport, error) {
	return c.Query().Where(webauthncredentialtransport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebauthnCredentialTransportClient) GetX(ctx context.Context, id uuid.UUID) *WebauthnCredentialTransport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWebauthnCredential queries the webauthn_credential edge of a WebauthnCredentialTransport.
func (c *WebauthnCredentialTransportClient) QueryWebauthnCredential(wct *WebauthnCredentialTransport) *WebauthnCredentialQuery {
	query := (&WebauthnCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthncredentialtransport.Table, webauthncredentialtransport.FieldID, id),
			sqlgraph.To(webauthncredential.Table, webauthncredential.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webauthncredentialtransport.WebauthnCredentialTable, webauthncredentialtransport.WebauthnCredentialColumn),
		)
		fromV = sqlgraph.Neighbors(wct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebauthnCredentialTransportClient) Hooks() []Hook {
	return c.hooks.WebauthnCredentialTransport
}

// Interceptors returns the client interceptors.
func (c *WebauthnCredentialTransportClient) Interceptors() []Interceptor {
	return c.inters.WebauthnCredentialTransport
}

func (c *WebauthnCredentialTransportClient) mutate(ctx context.Context, m *WebauthnCredentialTransportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebauthnCredentialTransportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebauthnCredentialTransportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebauthnCredentialTransportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebauthnCredentialTransportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebauthnCredentialTransport mutation op: %q", m.Op())
	}
}

// WebauthnSessionDataClient is a client for the WebauthnSessionData schema.
type WebauthnSessionDataClient struct {
	config
}

// NewWebauthnSessionDataClient returns a client for the WebauthnSessionData from the given config.
func NewWebauthnSessionDataClient(c config) *WebauthnSessionDataClient {
	return &WebauthnSessionDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webauthnsessiondata.Hooks(f(g(h())))`.
func (c *WebauthnSessionDataClient) Use(hooks ...Hook) {
	c.hooks.WebauthnSessionData = append(c.hooks.WebauthnSessionData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webauthnsessiondata.Intercept(f(g(h())))`.
func (c *WebauthnSessionDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebauthnSessionData = append(c.inters.WebauthnSessionData, interceptors...)
}

// Create returns a builder for creating a WebauthnSessionData entity.
func (c *WebauthnSessionDataClient) Create() *WebauthnSessionDataCreate {
	mutation := newWebauthnSessionDataMutation(c.config, OpCreate)
	return &WebauthnSessionDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebauthnSessionData entities.
func (c *WebauthnSessionDataClient) CreateBulk(builders ...*WebauthnSessionDataCreate) *WebauthnSessionDataCreateBulk {
	return &WebauthnSessionDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebauthnSessionData.
func (c *WebauthnSessionDataClient) Update() *WebauthnSessionDataUpdate {
	mutation := newWebauthnSessionDataMutation(c.config, OpUpdate)
	return &WebauthnSessionDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebauthnSessionDataClient) UpdateOne(wsd *WebauthnSessionData) *WebauthnSessionDataUpdateOne {
	mutation := newWebauthnSessionDataMutation(c.config, OpUpdateOne, withWebauthnSessionData(wsd))
	return &WebauthnSessionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebauthnSessionDataClient) UpdateOneID(id uuid.UUID) *WebauthnSessionDataUpdateOne {
	mutation := newWebauthnSessionDataMutation(c.config, OpUpdateOne, withWebauthnSessionDataID(id))
	return &WebauthnSessionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebauthnSessionData.
func (c *WebauthnSessionDataClient) Delete() *WebauthnSessionDataDelete {
	mutation := newWebauthnSessionDataMutation(c.config, OpDelete)
	return &WebauthnSessionDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebauthnSessionDataClient) DeleteOne(wsd *WebauthnSessionData) *WebauthnSessionDataDeleteOne {
	return c.DeleteOneID(wsd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebauthnSessionDataClient) DeleteOneID(id uuid.UUID) *WebauthnSessionDataDeleteOne {
	builder := c.Delete().Where(webauthnsessiondata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebauthnSessionDataDeleteOne{builder}
}

// Query returns a query builder for WebauthnSessionData.
func (c *WebauthnSessionDataClient) Query() *WebauthnSessionDataQuery {
	return &WebauthnSessionDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebauthnSessionData},
		inters: c.Interceptors(),
	}
}

// Get returns a WebauthnSessionData entity by its id.
func (c *WebauthnSessionDataClient) Get(ctx context.Context, id uuid.UUID) (*WebauthnSessionData, error) {
	return c.Query().Where(webauthnsessiondata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebauthnSessionDataClient) GetX(ctx context.Context, id uuid.UUID) *WebauthnSessionData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWebauthnSessionDataAllowedCredentials queries the webauthn_session_data_allowed_credentials edge of a WebauthnSessionData.
func (c *WebauthnSessionDataClient) QueryWebauthnSessionDataAllowedCredentials(wsd *WebauthnSessionData) *WebauthnSessionDataAllowedCredentialQuery {
	query := (&WebauthnSessionDataAllowedCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wsd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthnsessiondata.Table, webauthnsessiondata.FieldID, id),
			sqlgraph.To(webauthnsessiondataallowedcredential.Table, webauthnsessiondataallowedcredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, webauthnsessiondata.WebauthnSessionDataAllowedCredentialsTable, webauthnsessiondata.WebauthnSessionDataAllowedCredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(wsd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebauthnSessionDataClient) Hooks() []Hook {
	return c.hooks.WebauthnSessionData
}

// Interceptors returns the client interceptors.
func (c *WebauthnSessionDataClient) Interceptors() []Interceptor {
	return c.inters.WebauthnSessionData
}

func (c *WebauthnSessionDataClient) mutate(ctx context.Context, m *WebauthnSessionDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebauthnSessionDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebauthnSessionDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebauthnSessionDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebauthnSessionDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebauthnSessionData mutation op: %q", m.Op())
	}
}

// WebauthnSessionDataAllowedCredentialClient is a client for the WebauthnSessionDataAllowedCredential schema.
type WebauthnSessionDataAllowedCredentialClient struct {
	config
}

// NewWebauthnSessionDataAllowedCredentialClient returns a client for the WebauthnSessionDataAllowedCredential from the given config.
func NewWebauthnSessionDataAllowedCredentialClient(c config) *WebauthnSessionDataAllowedCredentialClient {
	return &WebauthnSessionDataAllowedCredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webauthnsessiondataallowedcredential.Hooks(f(g(h())))`.
func (c *WebauthnSessionDataAllowedCredentialClient) Use(hooks ...Hook) {
	c.hooks.WebauthnSessionDataAllowedCredential = append(c.hooks.WebauthnSessionDataAllowedCredential, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webauthnsessiondataallowedcredential.Intercept(f(g(h())))`.
func (c *WebauthnSessionDataAllowedCredentialClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebauthnSessionDataAllowedCredential = append(c.inters.WebauthnSessionDataAllowedCredential, interceptors...)
}

// Create returns a builder for creating a WebauthnSessionDataAllowedCredential entity.
func (c *WebauthnSessionDataAllowedCredentialClient) Create() *WebauthnSessionDataAllowedCredentialCreate {
	mutation := newWebauthnSessionDataAllowedCredentialMutation(c.config, OpCreate)
	return &WebauthnSessionDataAllowedCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebauthnSessionDataAllowedCredential entities.
func (c *WebauthnSessionDataAllowedCredentialClient) CreateBulk(builders ...*WebauthnSessionDataAllowedCredentialCreate) *WebauthnSessionDataAllowedCredentialCreateBulk {
	return &WebauthnSessionDataAllowedCredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebauthnSessionDataAllowedCredential.
func (c *WebauthnSessionDataAllowedCredentialClient) Update() *WebauthnSessionDataAllowedCredentialUpdate {
	mutation := newWebauthnSessionDataAllowedCredentialMutation(c.config, OpUpdate)
	return &WebauthnSessionDataAllowedCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebauthnSessionDataAllowedCredentialClient) UpdateOne(wsdac *WebauthnSessionDataAllowedCredential) *WebauthnSessionDataAllowedCredentialUpdateOne {
	mutation := newWebauthnSessionDataAllowedCredentialMutation(c.config, OpUpdateOne, withWebauthnSessionDataAllowedCredential(wsdac))
	return &WebauthnSessionDataAllowedCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebauthnSessionDataAllowedCredentialClient) UpdateOneID(id uuid.UUID) *WebauthnSessionDataAllowedCredentialUpdateOne {
	mutation := newWebauthnSessionDataAllowedCredentialMutation(c.config, OpUpdateOne, withWebauthnSessionDataAllowedCredentialID(id))
	return &WebauthnSessionDataAllowedCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebauthnSessionDataAllowedCredential.
func (c *WebauthnSessionDataAllowedCredentialClient) Delete() *WebauthnSessionDataAllowedCredentialDelete {
	mutation := newWebauthnSessionDataAllowedCredentialMutation(c.config, OpDelete)
	return &WebauthnSessionDataAllowedCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebauthnSessionDataAllowedCredentialClient) DeleteOne(wsdac *WebauthnSessionDataAllowedCredential) *WebauthnSessionDataAllowedCredentialDeleteOne {
	return c.DeleteOneID(wsdac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebauthnSessionDataAllowedCredentialClient) DeleteOneID(id uuid.UUID) *WebauthnSessionDataAllowedCredentialDeleteOne {
	builder := c.Delete().Where(webauthnsessiondataallowedcredential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebauthnSessionDataAllowedCredentialDeleteOne{builder}
}

// Query returns a query builder for WebauthnSessionDataAllowedCredential.
func (c *WebauthnSessionDataAllowedCredentialClient) Query() *WebauthnSessionDataAllowedCredentialQuery {
	return &WebauthnSessionDataAllowedCredentialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebauthnSessionDataAllowedCredential},
		inters: c.Interceptors(),
	}
}

// Get returns a WebauthnSessionDataAllowedCredential entity by its id.
func (c *WebauthnSessionDataAllowedCredentialClient) Get(ctx context.Context, id uuid.UUID) (*WebauthnSessionDataAllowedCredential, error) {
	return c.Query().Where(webauthnsessiondataallowedcredential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebauthnSessionDataAllowedCredentialClient) GetX(ctx context.Context, id uuid.UUID) *WebauthnSessionDataAllowedCredential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWebauthnSessionData queries the webauthn_session_data edge of a WebauthnSessionDataAllowedCredential.
func (c *WebauthnSessionDataAllowedCredentialClient) QueryWebauthnSessionData(wsdac *WebauthnSessionDataAllowedCredential) *WebauthnSessionDataQuery {
	query := (&WebauthnSessionDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wsdac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthnsessiondataallowedcredential.Table, webauthnsessiondataallowedcredential.FieldID, id),
			sqlgraph.To(webauthnsessiondata.Table, webauthnsessiondata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webauthnsessiondataallowedcredential.WebauthnSessionDataTable, webauthnsessiondataallowedcredential.WebauthnSessionDataColumn),
		)
		fromV = sqlgraph.Neighbors(wsdac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebauthnSessionDataAllowedCredentialClient) Hooks() []Hook {
	return c.hooks.WebauthnSessionDataAllowedCredential
}

// Interceptors returns the client interceptors.
func (c *WebauthnSessionDataAllowedCredentialClient) Interceptors() []Interceptor {
	return c.inters.WebauthnSessionDataAllowedCredential
}

func (c *WebauthnSessionDataAllowedCredentialClient) mutate(ctx context.Context, m *WebauthnSessionDataAllowedCredentialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebauthnSessionDataAllowedCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebauthnSessionDataAllowedCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebauthnSessionDataAllowedCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebauthnSessionDataAllowedCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebauthnSessionDataAllowedCredential mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Email, Identity, Jwk, Passcode, PrimaryEmail, Provider, User,
		WebauthnCredential, WebauthnCredentialTransport, WebauthnSessionData,
		WebauthnSessionDataAllowedCredential []ent.Hook
	}
	inters struct {
		Email, Identity, Jwk, Passcode, PrimaryEmail, Provider, User,
		WebauthnCredential, WebauthnCredentialTransport, WebauthnSessionData,
		WebauthnSessionDataAllowedCredential []ent.Interceptor
	}
)
