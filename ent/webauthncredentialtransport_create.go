// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthncredential"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthncredentialtransport"
)

// WebauthnCredentialTransportCreate is the builder for creating a WebauthnCredentialTransport entity.
type WebauthnCredentialTransportCreate struct {
	config
	mutation *WebauthnCredentialTransportMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (wctc *WebauthnCredentialTransportCreate) SetName(s string) *WebauthnCredentialTransportCreate {
	wctc.mutation.SetName(s)
	return wctc
}

// SetWebauthnCredentialID sets the "webauthn_credential_id" field.
func (wctc *WebauthnCredentialTransportCreate) SetWebauthnCredentialID(s string) *WebauthnCredentialTransportCreate {
	wctc.mutation.SetWebauthnCredentialID(s)
	return wctc
}

// SetNillableWebauthnCredentialID sets the "webauthn_credential_id" field if the given value is not nil.
func (wctc *WebauthnCredentialTransportCreate) SetNillableWebauthnCredentialID(s *string) *WebauthnCredentialTransportCreate {
	if s != nil {
		wctc.SetWebauthnCredentialID(*s)
	}
	return wctc
}

// SetID sets the "id" field.
func (wctc *WebauthnCredentialTransportCreate) SetID(u uuid.UUID) *WebauthnCredentialTransportCreate {
	wctc.mutation.SetID(u)
	return wctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wctc *WebauthnCredentialTransportCreate) SetNillableID(u *uuid.UUID) *WebauthnCredentialTransportCreate {
	if u != nil {
		wctc.SetID(*u)
	}
	return wctc
}

// SetWebauthnCredential sets the "webauthn_credential" edge to the WebauthnCredential entity.
func (wctc *WebauthnCredentialTransportCreate) SetWebauthnCredential(w *WebauthnCredential) *WebauthnCredentialTransportCreate {
	return wctc.SetWebauthnCredentialID(w.ID)
}

// Mutation returns the WebauthnCredentialTransportMutation object of the builder.
func (wctc *WebauthnCredentialTransportCreate) Mutation() *WebauthnCredentialTransportMutation {
	return wctc.mutation
}

// Save creates the WebauthnCredentialTransport in the database.
func (wctc *WebauthnCredentialTransportCreate) Save(ctx context.Context) (*WebauthnCredentialTransport, error) {
	wctc.defaults()
	return withHooks(ctx, wctc.sqlSave, wctc.mutation, wctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wctc *WebauthnCredentialTransportCreate) SaveX(ctx context.Context) *WebauthnCredentialTransport {
	v, err := wctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wctc *WebauthnCredentialTransportCreate) Exec(ctx context.Context) error {
	_, err := wctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wctc *WebauthnCredentialTransportCreate) ExecX(ctx context.Context) {
	if err := wctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wctc *WebauthnCredentialTransportCreate) defaults() {
	if _, ok := wctc.mutation.ID(); !ok {
		v := webauthncredentialtransport.DefaultID()
		wctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wctc *WebauthnCredentialTransportCreate) check() error {
	if _, ok := wctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "WebauthnCredentialTransport.name"`)}
	}
	return nil
}

func (wctc *WebauthnCredentialTransportCreate) sqlSave(ctx context.Context) (*WebauthnCredentialTransport, error) {
	if err := wctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wctc.mutation.id = &_node.ID
	wctc.mutation.done = true
	return _node, nil
}

func (wctc *WebauthnCredentialTransportCreate) createSpec() (*WebauthnCredentialTransport, *sqlgraph.CreateSpec) {
	var (
		_node = &WebauthnCredentialTransport{config: wctc.config}
		_spec = sqlgraph.NewCreateSpec(webauthncredentialtransport.Table, sqlgraph.NewFieldSpec(webauthncredentialtransport.FieldID, field.TypeUUID))
	)
	if id, ok := wctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wctc.mutation.Name(); ok {
		_spec.SetField(webauthncredentialtransport.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := wctc.mutation.WebauthnCredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthncredentialtransport.WebauthnCredentialTable,
			Columns: []string{webauthncredentialtransport.WebauthnCredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthncredential.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WebauthnCredentialID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebauthnCredentialTransportCreateBulk is the builder for creating many WebauthnCredentialTransport entities in bulk.
type WebauthnCredentialTransportCreateBulk struct {
	config
	builders []*WebauthnCredentialTransportCreate
}

// Save creates the WebauthnCredentialTransport entities in the database.
func (wctcb *WebauthnCredentialTransportCreateBulk) Save(ctx context.Context) ([]*WebauthnCredentialTransport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wctcb.builders))
	nodes := make([]*WebauthnCredentialTransport, len(wctcb.builders))
	mutators := make([]Mutator, len(wctcb.builders))
	for i := range wctcb.builders {
		func(i int, root context.Context) {
			builder := wctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebauthnCredentialTransportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wctcb *WebauthnCredentialTransportCreateBulk) SaveX(ctx context.Context) []*WebauthnCredentialTransport {
	v, err := wctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wctcb *WebauthnCredentialTransportCreateBulk) Exec(ctx context.Context) error {
	_, err := wctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wctcb *WebauthnCredentialTransportCreateBulk) ExecX(ctx context.Context) {
	if err := wctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
