// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/cryptoaccount"
	"github.com/hellohq/hqservice/ent/user"
)

// CryptoAccountCreate is the builder for creating a CryptoAccount entity.
type CryptoAccountCreate struct {
	config
	mutation *CryptoAccountMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (cac *CryptoAccountCreate) SetUserID(u uint) *CryptoAccountCreate {
	cac.mutation.SetUserID(u)
	return cac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cac *CryptoAccountCreate) SetNillableUserID(u *uint) *CryptoAccountCreate {
	if u != nil {
		cac.SetUserID(*u)
	}
	return cac
}

// SetName sets the "name" field.
func (cac *CryptoAccountCreate) SetName(s string) *CryptoAccountCreate {
	cac.mutation.SetName(s)
	return cac
}

// SetCoinType sets the "coin_type" field.
func (cac *CryptoAccountCreate) SetCoinType(s string) *CryptoAccountCreate {
	cac.mutation.SetCoinType(s)
	return cac
}

// SetBalance sets the "balance" field.
func (cac *CryptoAccountCreate) SetBalance(f float64) *CryptoAccountCreate {
	cac.mutation.SetBalance(f)
	return cac
}

// SetCreatedAt sets the "created_at" field.
func (cac *CryptoAccountCreate) SetCreatedAt(t time.Time) *CryptoAccountCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CryptoAccountCreate) SetUpdatedAt(t time.Time) *CryptoAccountCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetID sets the "id" field.
func (cac *CryptoAccountCreate) SetID(u uint) *CryptoAccountCreate {
	cac.mutation.SetID(u)
	return cac
}

// SetUser sets the "user" edge to the User entity.
func (cac *CryptoAccountCreate) SetUser(u *User) *CryptoAccountCreate {
	return cac.SetUserID(u.ID)
}

// Mutation returns the CryptoAccountMutation object of the builder.
func (cac *CryptoAccountCreate) Mutation() *CryptoAccountMutation {
	return cac.mutation
}

// Save creates the CryptoAccount in the database.
func (cac *CryptoAccountCreate) Save(ctx context.Context) (*CryptoAccount, error) {
	return withHooks[*CryptoAccount, CryptoAccountMutation](ctx, cac.sqlSave, cac.mutation, cac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CryptoAccountCreate) SaveX(ctx context.Context) *CryptoAccount {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CryptoAccountCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CryptoAccountCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cac *CryptoAccountCreate) check() error {
	if _, ok := cac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CryptoAccount.name"`)}
	}
	if _, ok := cac.mutation.CoinType(); !ok {
		return &ValidationError{Name: "coin_type", err: errors.New(`ent: missing required field "CryptoAccount.coin_type"`)}
	}
	if _, ok := cac.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "CryptoAccount.balance"`)}
	}
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CryptoAccount.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CryptoAccount.updated_at"`)}
	}
	return nil
}

func (cac *CryptoAccountCreate) sqlSave(ctx context.Context) (*CryptoAccount, error) {
	if err := cac.check(); err != nil {
		return nil, err
	}
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	cac.mutation.id = &_node.ID
	cac.mutation.done = true
	return _node, nil
}

func (cac *CryptoAccountCreate) createSpec() (*CryptoAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &CryptoAccount{config: cac.config}
		_spec = sqlgraph.NewCreateSpec(cryptoaccount.Table, sqlgraph.NewFieldSpec(cryptoaccount.FieldID, field.TypeUint))
	)
	if id, ok := cac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cac.mutation.Name(); ok {
		_spec.SetField(cryptoaccount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cac.mutation.CoinType(); ok {
		_spec.SetField(cryptoaccount.FieldCoinType, field.TypeString, value)
		_node.CoinType = value
	}
	if value, ok := cac.mutation.Balance(); ok {
		_spec.SetField(cryptoaccount.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.SetField(cryptoaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.SetField(cryptoaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cryptoaccount.UserTable,
			Columns: []string{cryptoaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CryptoAccountCreateBulk is the builder for creating many CryptoAccount entities in bulk.
type CryptoAccountCreateBulk struct {
	config
	builders []*CryptoAccountCreate
}

// Save creates the CryptoAccount entities in the database.
func (cacb *CryptoAccountCreateBulk) Save(ctx context.Context) ([]*CryptoAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CryptoAccount, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CryptoAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CryptoAccountCreateBulk) SaveX(ctx context.Context) []*CryptoAccount {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CryptoAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CryptoAccountCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}
