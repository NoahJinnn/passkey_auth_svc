// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/email"
	"github.com/hellohq/hqservice/ent/identity"
)

// Identity is the model entity for the Identity schema.
type Identity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProviderID holds the value of the "provider_id" field.
	ProviderID string `json:"provider_id,omitempty"`
	// ProviderName holds the value of the "provider_name" field.
	ProviderName string `json:"provider_name,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// EmailID holds the value of the "email_id" field.
	EmailID uuid.UUID `json:"email_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdentityQuery when eager-loading is set.
	Edges IdentityEdges `json:"edges"`
}

// IdentityEdges holds the relations/edges for other nodes in the graph.
type IdentityEdges struct {
	// Email holds the value of the email edge.
	Email *Email `json:"email,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmailOrErr returns the Email value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IdentityEdges) EmailOrErr() (*Email, error) {
	if e.loadedTypes[0] {
		if e.Email == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: email.Label}
		}
		return e.Email, nil
	}
	return nil, &NotLoadedError{edge: "email"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Identity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identity.FieldProviderID, identity.FieldProviderName, identity.FieldData:
			values[i] = new(sql.NullString)
		case identity.FieldCreatedAt, identity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case identity.FieldID, identity.FieldEmailID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Identity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Identity fields.
func (i *Identity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case identity.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case identity.FieldProviderID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[j])
			} else if value.Valid {
				i.ProviderID = value.String
			}
		case identity.FieldProviderName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_name", values[j])
			} else if value.Valid {
				i.ProviderName = value.String
			}
		case identity.FieldData:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[j])
			} else if value.Valid {
				i.Data = value.String
			}
		case identity.FieldEmailID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field email_id", values[j])
			} else if value != nil {
				i.EmailID = *value
			}
		case identity.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case identity.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryEmail queries the "email" edge of the Identity entity.
func (i *Identity) QueryEmail() *EmailQuery {
	return NewIdentityClient(i.config).QueryEmail(i)
}

// Update returns a builder for updating this Identity.
// Note that you need to call Identity.Unwrap() before calling this method if this Identity
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Identity) Update() *IdentityUpdateOne {
	return NewIdentityClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Identity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Identity) Unwrap() *Identity {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Identity is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Identity) String() string {
	var builder strings.Builder
	builder.WriteString("Identity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("provider_id=")
	builder.WriteString(i.ProviderID)
	builder.WriteString(", ")
	builder.WriteString("provider_name=")
	builder.WriteString(i.ProviderName)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(i.Data)
	builder.WriteString(", ")
	builder.WriteString("email_id=")
	builder.WriteString(fmt.Sprintf("%v", i.EmailID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Identities is a parsable slice of Identity.
type Identities []*Identity
