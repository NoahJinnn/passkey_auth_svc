// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NoahJinnn/passkey_auth_svc/ent/predicate"
	"github.com/NoahJinnn/passkey_auth_svc/ent/webauthncredentialtransport"
)

// WebauthnCredentialTransportDelete is the builder for deleting a WebauthnCredentialTransport entity.
type WebauthnCredentialTransportDelete struct {
	config
	hooks    []Hook
	mutation *WebauthnCredentialTransportMutation
}

// Where appends a list predicates to the WebauthnCredentialTransportDelete builder.
func (wctd *WebauthnCredentialTransportDelete) Where(ps ...predicate.WebauthnCredentialTransport) *WebauthnCredentialTransportDelete {
	wctd.mutation.Where(ps...)
	return wctd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wctd *WebauthnCredentialTransportDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wctd.sqlExec, wctd.mutation, wctd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wctd *WebauthnCredentialTransportDelete) ExecX(ctx context.Context) int {
	n, err := wctd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wctd *WebauthnCredentialTransportDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(webauthncredentialtransport.Table, sqlgraph.NewFieldSpec(webauthncredentialtransport.FieldID, field.TypeUUID))
	if ps := wctd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wctd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wctd.mutation.done = true
	return affected, err
}

// WebauthnCredentialTransportDeleteOne is the builder for deleting a single WebauthnCredentialTransport entity.
type WebauthnCredentialTransportDeleteOne struct {
	wctd *WebauthnCredentialTransportDelete
}

// Where appends a list predicates to the WebauthnCredentialTransportDelete builder.
func (wctdo *WebauthnCredentialTransportDeleteOne) Where(ps ...predicate.WebauthnCredentialTransport) *WebauthnCredentialTransportDeleteOne {
	wctdo.wctd.mutation.Where(ps...)
	return wctdo
}

// Exec executes the deletion query.
func (wctdo *WebauthnCredentialTransportDeleteOne) Exec(ctx context.Context) error {
	n, err := wctdo.wctd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{webauthncredentialtransport.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wctdo *WebauthnCredentialTransportDeleteOne) ExecX(ctx context.Context) {
	if err := wctdo.Exec(ctx); err != nil {
		panic(err)
	}
}
