// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/email"
	"github.com/hellohq/hqservice/ent/primaryemail"
	"github.com/hellohq/hqservice/ent/user"
)

// Email is the model entity for the Email schema.
type Email struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailQuery when eager-loading is set.
	Edges EmailEdges `json:"edges"`
}

// EmailEdges holds the relations/edges for other nodes in the graph.
type EmailEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Identities holds the value of the identities edge.
	Identities []*Identity `json:"identities,omitempty"`
	// Passcodes holds the value of the passcodes edge.
	Passcodes []*Passcode `json:"passcodes,omitempty"`
	// PrimaryEmail holds the value of the primary_email edge.
	PrimaryEmail *PrimaryEmail `json:"primary_email,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// IdentitiesOrErr returns the Identities value or an error if the edge
// was not loaded in eager-loading.
func (e EmailEdges) IdentitiesOrErr() ([]*Identity, error) {
	if e.loadedTypes[1] {
		return e.Identities, nil
	}
	return nil, &NotLoadedError{edge: "identities"}
}

// PasscodesOrErr returns the Passcodes value or an error if the edge
// was not loaded in eager-loading.
func (e EmailEdges) PasscodesOrErr() ([]*Passcode, error) {
	if e.loadedTypes[2] {
		return e.Passcodes, nil
	}
	return nil, &NotLoadedError{edge: "passcodes"}
}

// PrimaryEmailOrErr returns the PrimaryEmail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailEdges) PrimaryEmailOrErr() (*PrimaryEmail, error) {
	if e.loadedTypes[3] {
		if e.PrimaryEmail == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: primaryemail.Label}
		}
		return e.PrimaryEmail, nil
	}
	return nil, &NotLoadedError{edge: "primary_email"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Email) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case email.FieldVerified:
			values[i] = new(sql.NullBool)
		case email.FieldAddress:
			values[i] = new(sql.NullString)
		case email.FieldCreatedAt, email.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case email.FieldID, email.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Email", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Email fields.
func (e *Email) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case email.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case email.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				e.UserID = *value
			}
		case email.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				e.Address = value.String
			}
		case email.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				e.Verified = value.Bool
			}
		case email.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case email.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Email entity.
func (e *Email) QueryUser() *UserQuery {
	return NewEmailClient(e.config).QueryUser(e)
}

// QueryIdentities queries the "identities" edge of the Email entity.
func (e *Email) QueryIdentities() *IdentityQuery {
	return NewEmailClient(e.config).QueryIdentities(e)
}

// QueryPasscodes queries the "passcodes" edge of the Email entity.
func (e *Email) QueryPasscodes() *PasscodeQuery {
	return NewEmailClient(e.config).QueryPasscodes(e)
}

// QueryPrimaryEmail queries the "primary_email" edge of the Email entity.
func (e *Email) QueryPrimaryEmail() *PrimaryEmailQuery {
	return NewEmailClient(e.config).QueryPrimaryEmail(e)
}

// Update returns a builder for updating this Email.
// Note that you need to call Email.Unwrap() before calling this method if this Email
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Email) Update() *EmailUpdateOne {
	return NewEmailClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Email entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Email) Unwrap() *Email {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Email is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Email) String() string {
	var builder strings.Builder
	builder.WriteString("Email(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", e.UserID))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(e.Address)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", e.Verified))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Emails is a parsable slice of Email.
type Emails []*Email
