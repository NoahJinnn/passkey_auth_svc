// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/finitemtable"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/user"
)

// FinItemTableUpdate is the builder for updating FinItemTable entities.
type FinItemTableUpdate struct {
	config
	hooks    []Hook
	mutation *FinItemTableMutation
}

// Where appends a list predicates to the FinItemTableUpdate builder.
func (fitu *FinItemTableUpdate) Where(ps ...predicate.FinItemTable) *FinItemTableUpdate {
	fitu.mutation.Where(ps...)
	return fitu
}

// SetUserID sets the "user_id" field.
func (fitu *FinItemTableUpdate) SetUserID(u uuid.UUID) *FinItemTableUpdate {
	fitu.mutation.SetUserID(u)
	return fitu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fitu *FinItemTableUpdate) SetNillableUserID(u *uuid.UUID) *FinItemTableUpdate {
	if u != nil {
		fitu.SetUserID(*u)
	}
	return fitu
}

// ClearUserID clears the value of the "user_id" field.
func (fitu *FinItemTableUpdate) ClearUserID() *FinItemTableUpdate {
	fitu.mutation.ClearUserID()
	return fitu
}

// SetSheet sets the "sheet" field.
func (fitu *FinItemTableUpdate) SetSheet(i int32) *FinItemTableUpdate {
	fitu.mutation.ResetSheet()
	fitu.mutation.SetSheet(i)
	return fitu
}

// AddSheet adds i to the "sheet" field.
func (fitu *FinItemTableUpdate) AddSheet(i int32) *FinItemTableUpdate {
	fitu.mutation.AddSheet(i)
	return fitu
}

// SetSection sets the "section" field.
func (fitu *FinItemTableUpdate) SetSection(i int32) *FinItemTableUpdate {
	fitu.mutation.ResetSection()
	fitu.mutation.SetSection(i)
	return fitu
}

// AddSection adds i to the "section" field.
func (fitu *FinItemTableUpdate) AddSection(i int32) *FinItemTableUpdate {
	fitu.mutation.AddSection(i)
	return fitu
}

// SetCategory sets the "category" field.
func (fitu *FinItemTableUpdate) SetCategory(s string) *FinItemTableUpdate {
	fitu.mutation.SetCategory(s)
	return fitu
}

// SetDescription sets the "description" field.
func (fitu *FinItemTableUpdate) SetDescription(s string) *FinItemTableUpdate {
	fitu.mutation.SetDescription(s)
	return fitu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fitu *FinItemTableUpdate) SetNillableDescription(s *string) *FinItemTableUpdate {
	if s != nil {
		fitu.SetDescription(*s)
	}
	return fitu
}

// ClearDescription clears the value of the "description" field.
func (fitu *FinItemTableUpdate) ClearDescription() *FinItemTableUpdate {
	fitu.mutation.ClearDescription()
	return fitu
}

// SetUpdatedAt sets the "updated_at" field.
func (fitu *FinItemTableUpdate) SetUpdatedAt(t time.Time) *FinItemTableUpdate {
	fitu.mutation.SetUpdatedAt(t)
	return fitu
}

// SetUser sets the "user" edge to the User entity.
func (fitu *FinItemTableUpdate) SetUser(u *User) *FinItemTableUpdate {
	return fitu.SetUserID(u.ID)
}

// Mutation returns the FinItemTableMutation object of the builder.
func (fitu *FinItemTableUpdate) Mutation() *FinItemTableMutation {
	return fitu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fitu *FinItemTableUpdate) ClearUser() *FinItemTableUpdate {
	fitu.mutation.ClearUser()
	return fitu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fitu *FinItemTableUpdate) Save(ctx context.Context) (int, error) {
	fitu.defaults()
	return withHooks(ctx, fitu.sqlSave, fitu.mutation, fitu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fitu *FinItemTableUpdate) SaveX(ctx context.Context) int {
	affected, err := fitu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fitu *FinItemTableUpdate) Exec(ctx context.Context) error {
	_, err := fitu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fitu *FinItemTableUpdate) ExecX(ctx context.Context) {
	if err := fitu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fitu *FinItemTableUpdate) defaults() {
	if _, ok := fitu.mutation.UpdatedAt(); !ok {
		v := finitemtable.UpdateDefaultUpdatedAt()
		fitu.mutation.SetUpdatedAt(v)
	}
}

func (fitu *FinItemTableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(finitemtable.Table, finitemtable.Columns, sqlgraph.NewFieldSpec(finitemtable.FieldID, field.TypeUUID))
	if ps := fitu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fitu.mutation.Sheet(); ok {
		_spec.SetField(finitemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := fitu.mutation.AddedSheet(); ok {
		_spec.AddField(finitemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := fitu.mutation.Section(); ok {
		_spec.SetField(finitemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := fitu.mutation.AddedSection(); ok {
		_spec.AddField(finitemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := fitu.mutation.Category(); ok {
		_spec.SetField(finitemtable.FieldCategory, field.TypeString, value)
	}
	if value, ok := fitu.mutation.Description(); ok {
		_spec.SetField(finitemtable.FieldDescription, field.TypeString, value)
	}
	if fitu.mutation.DescriptionCleared() {
		_spec.ClearField(finitemtable.FieldDescription, field.TypeString)
	}
	if value, ok := fitu.mutation.UpdatedAt(); ok {
		_spec.SetField(finitemtable.FieldUpdatedAt, field.TypeTime, value)
	}
	if fitu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finitemtable.UserTable,
			Columns: []string{finitemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fitu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finitemtable.UserTable,
			Columns: []string{finitemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fitu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finitemtable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fitu.mutation.done = true
	return n, nil
}

// FinItemTableUpdateOne is the builder for updating a single FinItemTable entity.
type FinItemTableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinItemTableMutation
}

// SetUserID sets the "user_id" field.
func (fituo *FinItemTableUpdateOne) SetUserID(u uuid.UUID) *FinItemTableUpdateOne {
	fituo.mutation.SetUserID(u)
	return fituo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fituo *FinItemTableUpdateOne) SetNillableUserID(u *uuid.UUID) *FinItemTableUpdateOne {
	if u != nil {
		fituo.SetUserID(*u)
	}
	return fituo
}

// ClearUserID clears the value of the "user_id" field.
func (fituo *FinItemTableUpdateOne) ClearUserID() *FinItemTableUpdateOne {
	fituo.mutation.ClearUserID()
	return fituo
}

// SetSheet sets the "sheet" field.
func (fituo *FinItemTableUpdateOne) SetSheet(i int32) *FinItemTableUpdateOne {
	fituo.mutation.ResetSheet()
	fituo.mutation.SetSheet(i)
	return fituo
}

// AddSheet adds i to the "sheet" field.
func (fituo *FinItemTableUpdateOne) AddSheet(i int32) *FinItemTableUpdateOne {
	fituo.mutation.AddSheet(i)
	return fituo
}

// SetSection sets the "section" field.
func (fituo *FinItemTableUpdateOne) SetSection(i int32) *FinItemTableUpdateOne {
	fituo.mutation.ResetSection()
	fituo.mutation.SetSection(i)
	return fituo
}

// AddSection adds i to the "section" field.
func (fituo *FinItemTableUpdateOne) AddSection(i int32) *FinItemTableUpdateOne {
	fituo.mutation.AddSection(i)
	return fituo
}

// SetCategory sets the "category" field.
func (fituo *FinItemTableUpdateOne) SetCategory(s string) *FinItemTableUpdateOne {
	fituo.mutation.SetCategory(s)
	return fituo
}

// SetDescription sets the "description" field.
func (fituo *FinItemTableUpdateOne) SetDescription(s string) *FinItemTableUpdateOne {
	fituo.mutation.SetDescription(s)
	return fituo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fituo *FinItemTableUpdateOne) SetNillableDescription(s *string) *FinItemTableUpdateOne {
	if s != nil {
		fituo.SetDescription(*s)
	}
	return fituo
}

// ClearDescription clears the value of the "description" field.
func (fituo *FinItemTableUpdateOne) ClearDescription() *FinItemTableUpdateOne {
	fituo.mutation.ClearDescription()
	return fituo
}

// SetUpdatedAt sets the "updated_at" field.
func (fituo *FinItemTableUpdateOne) SetUpdatedAt(t time.Time) *FinItemTableUpdateOne {
	fituo.mutation.SetUpdatedAt(t)
	return fituo
}

// SetUser sets the "user" edge to the User entity.
func (fituo *FinItemTableUpdateOne) SetUser(u *User) *FinItemTableUpdateOne {
	return fituo.SetUserID(u.ID)
}

// Mutation returns the FinItemTableMutation object of the builder.
func (fituo *FinItemTableUpdateOne) Mutation() *FinItemTableMutation {
	return fituo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fituo *FinItemTableUpdateOne) ClearUser() *FinItemTableUpdateOne {
	fituo.mutation.ClearUser()
	return fituo
}

// Where appends a list predicates to the FinItemTableUpdate builder.
func (fituo *FinItemTableUpdateOne) Where(ps ...predicate.FinItemTable) *FinItemTableUpdateOne {
	fituo.mutation.Where(ps...)
	return fituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fituo *FinItemTableUpdateOne) Select(field string, fields ...string) *FinItemTableUpdateOne {
	fituo.fields = append([]string{field}, fields...)
	return fituo
}

// Save executes the query and returns the updated FinItemTable entity.
func (fituo *FinItemTableUpdateOne) Save(ctx context.Context) (*FinItemTable, error) {
	fituo.defaults()
	return withHooks(ctx, fituo.sqlSave, fituo.mutation, fituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fituo *FinItemTableUpdateOne) SaveX(ctx context.Context) *FinItemTable {
	node, err := fituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fituo *FinItemTableUpdateOne) Exec(ctx context.Context) error {
	_, err := fituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fituo *FinItemTableUpdateOne) ExecX(ctx context.Context) {
	if err := fituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fituo *FinItemTableUpdateOne) defaults() {
	if _, ok := fituo.mutation.UpdatedAt(); !ok {
		v := finitemtable.UpdateDefaultUpdatedAt()
		fituo.mutation.SetUpdatedAt(v)
	}
}

func (fituo *FinItemTableUpdateOne) sqlSave(ctx context.Context) (_node *FinItemTable, err error) {
	_spec := sqlgraph.NewUpdateSpec(finitemtable.Table, finitemtable.Columns, sqlgraph.NewFieldSpec(finitemtable.FieldID, field.TypeUUID))
	id, ok := fituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FinItemTable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, finitemtable.FieldID)
		for _, f := range fields {
			if !finitemtable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != finitemtable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fituo.mutation.Sheet(); ok {
		_spec.SetField(finitemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := fituo.mutation.AddedSheet(); ok {
		_spec.AddField(finitemtable.FieldSheet, field.TypeInt32, value)
	}
	if value, ok := fituo.mutation.Section(); ok {
		_spec.SetField(finitemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := fituo.mutation.AddedSection(); ok {
		_spec.AddField(finitemtable.FieldSection, field.TypeInt32, value)
	}
	if value, ok := fituo.mutation.Category(); ok {
		_spec.SetField(finitemtable.FieldCategory, field.TypeString, value)
	}
	if value, ok := fituo.mutation.Description(); ok {
		_spec.SetField(finitemtable.FieldDescription, field.TypeString, value)
	}
	if fituo.mutation.DescriptionCleared() {
		_spec.ClearField(finitemtable.FieldDescription, field.TypeString)
	}
	if value, ok := fituo.mutation.UpdatedAt(); ok {
		_spec.SetField(finitemtable.FieldUpdatedAt, field.TypeTime, value)
	}
	if fituo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finitemtable.UserTable,
			Columns: []string{finitemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fituo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   finitemtable.UserTable,
			Columns: []string{finitemtable.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FinItemTable{config: fituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finitemtable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fituo.mutation.done = true
	return _node, nil
}
