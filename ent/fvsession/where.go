// Code generated by ent, DO NOT EDIT.

package fvsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldUserID, v))
}

// AccessToken applies equality check predicate on the "access_token" field. It's identical to AccessTokenEQ.
func AccessToken(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldAccessToken, v))
}

// ExpiresIn applies equality check predicate on the "expires_in" field. It's identical to ExpiresInEQ.
func ExpiresIn(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldExpiresIn, v))
}

// IssuedAt applies equality check predicate on the "issued_at" field. It's identical to IssuedAtEQ.
func IssuedAt(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldIssuedAt, v))
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldTokenType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.FvSession {
	return predicate.FvSession(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.FvSession {
	return predicate.FvSession(sql.FieldNotNull(FieldUserID))
}

// AccessTokenEQ applies the EQ predicate on the "access_token" field.
func AccessTokenEQ(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldAccessToken, v))
}

// AccessTokenNEQ applies the NEQ predicate on the "access_token" field.
func AccessTokenNEQ(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldAccessToken, v))
}

// AccessTokenIn applies the In predicate on the "access_token" field.
func AccessTokenIn(vs ...string) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldAccessToken, vs...))
}

// AccessTokenNotIn applies the NotIn predicate on the "access_token" field.
func AccessTokenNotIn(vs ...string) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldAccessToken, vs...))
}

// AccessTokenGT applies the GT predicate on the "access_token" field.
func AccessTokenGT(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldAccessToken, v))
}

// AccessTokenGTE applies the GTE predicate on the "access_token" field.
func AccessTokenGTE(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldAccessToken, v))
}

// AccessTokenLT applies the LT predicate on the "access_token" field.
func AccessTokenLT(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldAccessToken, v))
}

// AccessTokenLTE applies the LTE predicate on the "access_token" field.
func AccessTokenLTE(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldAccessToken, v))
}

// AccessTokenContains applies the Contains predicate on the "access_token" field.
func AccessTokenContains(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldContains(FieldAccessToken, v))
}

// AccessTokenHasPrefix applies the HasPrefix predicate on the "access_token" field.
func AccessTokenHasPrefix(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldHasPrefix(FieldAccessToken, v))
}

// AccessTokenHasSuffix applies the HasSuffix predicate on the "access_token" field.
func AccessTokenHasSuffix(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldHasSuffix(FieldAccessToken, v))
}

// AccessTokenEqualFold applies the EqualFold predicate on the "access_token" field.
func AccessTokenEqualFold(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEqualFold(FieldAccessToken, v))
}

// AccessTokenContainsFold applies the ContainsFold predicate on the "access_token" field.
func AccessTokenContainsFold(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldContainsFold(FieldAccessToken, v))
}

// ExpiresInEQ applies the EQ predicate on the "expires_in" field.
func ExpiresInEQ(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldExpiresIn, v))
}

// ExpiresInNEQ applies the NEQ predicate on the "expires_in" field.
func ExpiresInNEQ(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldExpiresIn, v))
}

// ExpiresInIn applies the In predicate on the "expires_in" field.
func ExpiresInIn(vs ...int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldExpiresIn, vs...))
}

// ExpiresInNotIn applies the NotIn predicate on the "expires_in" field.
func ExpiresInNotIn(vs ...int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldExpiresIn, vs...))
}

// ExpiresInGT applies the GT predicate on the "expires_in" field.
func ExpiresInGT(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldExpiresIn, v))
}

// ExpiresInGTE applies the GTE predicate on the "expires_in" field.
func ExpiresInGTE(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldExpiresIn, v))
}

// ExpiresInLT applies the LT predicate on the "expires_in" field.
func ExpiresInLT(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldExpiresIn, v))
}

// ExpiresInLTE applies the LTE predicate on the "expires_in" field.
func ExpiresInLTE(v int32) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldExpiresIn, v))
}

// IssuedAtEQ applies the EQ predicate on the "issued_at" field.
func IssuedAtEQ(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldIssuedAt, v))
}

// IssuedAtNEQ applies the NEQ predicate on the "issued_at" field.
func IssuedAtNEQ(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldIssuedAt, v))
}

// IssuedAtIn applies the In predicate on the "issued_at" field.
func IssuedAtIn(vs ...string) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldIssuedAt, vs...))
}

// IssuedAtNotIn applies the NotIn predicate on the "issued_at" field.
func IssuedAtNotIn(vs ...string) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldIssuedAt, vs...))
}

// IssuedAtGT applies the GT predicate on the "issued_at" field.
func IssuedAtGT(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldIssuedAt, v))
}

// IssuedAtGTE applies the GTE predicate on the "issued_at" field.
func IssuedAtGTE(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldIssuedAt, v))
}

// IssuedAtLT applies the LT predicate on the "issued_at" field.
func IssuedAtLT(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldIssuedAt, v))
}

// IssuedAtLTE applies the LTE predicate on the "issued_at" field.
func IssuedAtLTE(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldIssuedAt, v))
}

// IssuedAtContains applies the Contains predicate on the "issued_at" field.
func IssuedAtContains(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldContains(FieldIssuedAt, v))
}

// IssuedAtHasPrefix applies the HasPrefix predicate on the "issued_at" field.
func IssuedAtHasPrefix(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldHasPrefix(FieldIssuedAt, v))
}

// IssuedAtHasSuffix applies the HasSuffix predicate on the "issued_at" field.
func IssuedAtHasSuffix(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldHasSuffix(FieldIssuedAt, v))
}

// IssuedAtEqualFold applies the EqualFold predicate on the "issued_at" field.
func IssuedAtEqualFold(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEqualFold(FieldIssuedAt, v))
}

// IssuedAtContainsFold applies the ContainsFold predicate on the "issued_at" field.
func IssuedAtContainsFold(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldContainsFold(FieldIssuedAt, v))
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldTokenType, v))
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldTokenType, v))
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldTokenType, vs...))
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldTokenType, vs...))
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldTokenType, v))
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldTokenType, v))
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldTokenType, v))
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldTokenType, v))
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldContains(FieldTokenType, v))
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldHasPrefix(FieldTokenType, v))
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldHasSuffix(FieldTokenType, v))
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldEqualFold(FieldTokenType, v))
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.FvSession {
	return predicate.FvSession(sql.FieldContainsFold(FieldTokenType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FvSession {
	return predicate.FvSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.FvSession {
	return predicate.FvSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.FvSession {
	return predicate.FvSession(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FvSession) predicate.FvSession {
	return predicate.FvSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FvSession) predicate.FvSession {
	return predicate.FvSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FvSession) predicate.FvSession {
	return predicate.FvSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
