// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/ent/predicate"
	"github.com/hellohq/hqservice/ent/webauthnsessiondataallowedcredential"
	"github.com/hellohq/hqservice/ent/webauthnsessiondatum"
)

// WebauthnSessionDatumQuery is the builder for querying WebauthnSessionDatum entities.
type WebauthnSessionDatumQuery struct {
	config
	ctx                                       *QueryContext
	order                                     []OrderFunc
	inters                                    []Interceptor
	predicates                                []predicate.WebauthnSessionDatum
	withWebauthnSessionDataAllowedCredentials *WebauthnSessionDataAllowedCredentialQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WebauthnSessionDatumQuery builder.
func (wsdq *WebauthnSessionDatumQuery) Where(ps ...predicate.WebauthnSessionDatum) *WebauthnSessionDatumQuery {
	wsdq.predicates = append(wsdq.predicates, ps...)
	return wsdq
}

// Limit the number of records to be returned by this query.
func (wsdq *WebauthnSessionDatumQuery) Limit(limit int) *WebauthnSessionDatumQuery {
	wsdq.ctx.Limit = &limit
	return wsdq
}

// Offset to start from.
func (wsdq *WebauthnSessionDatumQuery) Offset(offset int) *WebauthnSessionDatumQuery {
	wsdq.ctx.Offset = &offset
	return wsdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wsdq *WebauthnSessionDatumQuery) Unique(unique bool) *WebauthnSessionDatumQuery {
	wsdq.ctx.Unique = &unique
	return wsdq
}

// Order specifies how the records should be ordered.
func (wsdq *WebauthnSessionDatumQuery) Order(o ...OrderFunc) *WebauthnSessionDatumQuery {
	wsdq.order = append(wsdq.order, o...)
	return wsdq
}

// QueryWebauthnSessionDataAllowedCredentials chains the current query on the "webauthn_session_data_allowed_credentials" edge.
func (wsdq *WebauthnSessionDatumQuery) QueryWebauthnSessionDataAllowedCredentials() *WebauthnSessionDataAllowedCredentialQuery {
	query := (&WebauthnSessionDataAllowedCredentialClient{config: wsdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wsdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wsdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthnsessiondatum.Table, webauthnsessiondatum.FieldID, selector),
			sqlgraph.To(webauthnsessiondataallowedcredential.Table, webauthnsessiondataallowedcredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsTable, webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wsdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WebauthnSessionDatum entity from the query.
// Returns a *NotFoundError when no WebauthnSessionDatum was found.
func (wsdq *WebauthnSessionDatumQuery) First(ctx context.Context) (*WebauthnSessionDatum, error) {
	nodes, err := wsdq.Limit(1).All(setContextOp(ctx, wsdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{webauthnsessiondatum.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) FirstX(ctx context.Context) *WebauthnSessionDatum {
	node, err := wsdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WebauthnSessionDatum ID from the query.
// Returns a *NotFoundError when no WebauthnSessionDatum ID was found.
func (wsdq *WebauthnSessionDatumQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wsdq.Limit(1).IDs(setContextOp(ctx, wsdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{webauthnsessiondatum.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wsdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WebauthnSessionDatum entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WebauthnSessionDatum entity is found.
// Returns a *NotFoundError when no WebauthnSessionDatum entities are found.
func (wsdq *WebauthnSessionDatumQuery) Only(ctx context.Context) (*WebauthnSessionDatum, error) {
	nodes, err := wsdq.Limit(2).All(setContextOp(ctx, wsdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{webauthnsessiondatum.Label}
	default:
		return nil, &NotSingularError{webauthnsessiondatum.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) OnlyX(ctx context.Context) *WebauthnSessionDatum {
	node, err := wsdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WebauthnSessionDatum ID in the query.
// Returns a *NotSingularError when more than one WebauthnSessionDatum ID is found.
// Returns a *NotFoundError when no entities are found.
func (wsdq *WebauthnSessionDatumQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wsdq.Limit(2).IDs(setContextOp(ctx, wsdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{webauthnsessiondatum.Label}
	default:
		err = &NotSingularError{webauthnsessiondatum.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wsdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WebauthnSessionData.
func (wsdq *WebauthnSessionDatumQuery) All(ctx context.Context) ([]*WebauthnSessionDatum, error) {
	ctx = setContextOp(ctx, wsdq.ctx, "All")
	if err := wsdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WebauthnSessionDatum, *WebauthnSessionDatumQuery]()
	return withInterceptors[[]*WebauthnSessionDatum](ctx, wsdq, qr, wsdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) AllX(ctx context.Context) []*WebauthnSessionDatum {
	nodes, err := wsdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WebauthnSessionDatum IDs.
func (wsdq *WebauthnSessionDatumQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wsdq.ctx.Unique == nil && wsdq.path != nil {
		wsdq.Unique(true)
	}
	ctx = setContextOp(ctx, wsdq.ctx, "IDs")
	if err = wsdq.Select(webauthnsessiondatum.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wsdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wsdq *WebauthnSessionDatumQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wsdq.ctx, "Count")
	if err := wsdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wsdq, querierCount[*WebauthnSessionDatumQuery](), wsdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) CountX(ctx context.Context) int {
	count, err := wsdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wsdq *WebauthnSessionDatumQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wsdq.ctx, "Exist")
	switch _, err := wsdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wsdq *WebauthnSessionDatumQuery) ExistX(ctx context.Context) bool {
	exist, err := wsdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WebauthnSessionDatumQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wsdq *WebauthnSessionDatumQuery) Clone() *WebauthnSessionDatumQuery {
	if wsdq == nil {
		return nil
	}
	return &WebauthnSessionDatumQuery{
		config:     wsdq.config,
		ctx:        wsdq.ctx.Clone(),
		order:      append([]OrderFunc{}, wsdq.order...),
		inters:     append([]Interceptor{}, wsdq.inters...),
		predicates: append([]predicate.WebauthnSessionDatum{}, wsdq.predicates...),
		withWebauthnSessionDataAllowedCredentials: wsdq.withWebauthnSessionDataAllowedCredentials.Clone(),
		// clone intermediate query.
		sql:  wsdq.sql.Clone(),
		path: wsdq.path,
	}
}

// WithWebauthnSessionDataAllowedCredentials tells the query-builder to eager-load the nodes that are connected to
// the "webauthn_session_data_allowed_credentials" edge. The optional arguments are used to configure the query builder of the edge.
func (wsdq *WebauthnSessionDatumQuery) WithWebauthnSessionDataAllowedCredentials(opts ...func(*WebauthnSessionDataAllowedCredentialQuery)) *WebauthnSessionDatumQuery {
	query := (&WebauthnSessionDataAllowedCredentialClient{config: wsdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wsdq.withWebauthnSessionDataAllowedCredentials = query
	return wsdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Challenge string `json:"challenge,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WebauthnSessionDatum.Query().
//		GroupBy(webauthnsessiondatum.FieldChallenge).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wsdq *WebauthnSessionDatumQuery) GroupBy(field string, fields ...string) *WebauthnSessionDatumGroupBy {
	wsdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WebauthnSessionDatumGroupBy{build: wsdq}
	grbuild.flds = &wsdq.ctx.Fields
	grbuild.label = webauthnsessiondatum.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Challenge string `json:"challenge,omitempty"`
//	}
//
//	client.WebauthnSessionDatum.Query().
//		Select(webauthnsessiondatum.FieldChallenge).
//		Scan(ctx, &v)
func (wsdq *WebauthnSessionDatumQuery) Select(fields ...string) *WebauthnSessionDatumSelect {
	wsdq.ctx.Fields = append(wsdq.ctx.Fields, fields...)
	sbuild := &WebauthnSessionDatumSelect{WebauthnSessionDatumQuery: wsdq}
	sbuild.label = webauthnsessiondatum.Label
	sbuild.flds, sbuild.scan = &wsdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WebauthnSessionDatumSelect configured with the given aggregations.
func (wsdq *WebauthnSessionDatumQuery) Aggregate(fns ...AggregateFunc) *WebauthnSessionDatumSelect {
	return wsdq.Select().Aggregate(fns...)
}

func (wsdq *WebauthnSessionDatumQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wsdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wsdq); err != nil {
				return err
			}
		}
	}
	for _, f := range wsdq.ctx.Fields {
		if !webauthnsessiondatum.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wsdq.path != nil {
		prev, err := wsdq.path(ctx)
		if err != nil {
			return err
		}
		wsdq.sql = prev
	}
	return nil
}

func (wsdq *WebauthnSessionDatumQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WebauthnSessionDatum, error) {
	var (
		nodes       = []*WebauthnSessionDatum{}
		_spec       = wsdq.querySpec()
		loadedTypes = [1]bool{
			wsdq.withWebauthnSessionDataAllowedCredentials != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WebauthnSessionDatum).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WebauthnSessionDatum{config: wsdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wsdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wsdq.withWebauthnSessionDataAllowedCredentials; query != nil {
		if err := wsdq.loadWebauthnSessionDataAllowedCredentials(ctx, query, nodes,
			func(n *WebauthnSessionDatum) {
				n.Edges.WebauthnSessionDataAllowedCredentials = []*WebauthnSessionDataAllowedCredential{}
			},
			func(n *WebauthnSessionDatum, e *WebauthnSessionDataAllowedCredential) {
				n.Edges.WebauthnSessionDataAllowedCredentials = append(n.Edges.WebauthnSessionDataAllowedCredentials, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wsdq *WebauthnSessionDatumQuery) loadWebauthnSessionDataAllowedCredentials(ctx context.Context, query *WebauthnSessionDataAllowedCredentialQuery, nodes []*WebauthnSessionDatum, init func(*WebauthnSessionDatum), assign func(*WebauthnSessionDatum, *WebauthnSessionDataAllowedCredential)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*WebauthnSessionDatum)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.WebauthnSessionDataAllowedCredential(func(s *sql.Selector) {
		s.Where(sql.InValues(webauthnsessiondatum.WebauthnSessionDataAllowedCredentialsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WebauthnSessionDataID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "webauthn_session_data_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (wsdq *WebauthnSessionDatumQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wsdq.querySpec()
	_spec.Node.Columns = wsdq.ctx.Fields
	if len(wsdq.ctx.Fields) > 0 {
		_spec.Unique = wsdq.ctx.Unique != nil && *wsdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wsdq.driver, _spec)
}

func (wsdq *WebauthnSessionDatumQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(webauthnsessiondatum.Table, webauthnsessiondatum.Columns, sqlgraph.NewFieldSpec(webauthnsessiondatum.FieldID, field.TypeUUID))
	_spec.From = wsdq.sql
	if unique := wsdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wsdq.path != nil {
		_spec.Unique = true
	}
	if fields := wsdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webauthnsessiondatum.FieldID)
		for i := range fields {
			if fields[i] != webauthnsessiondatum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wsdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wsdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wsdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wsdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wsdq *WebauthnSessionDatumQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wsdq.driver.Dialect())
	t1 := builder.Table(webauthnsessiondatum.Table)
	columns := wsdq.ctx.Fields
	if len(columns) == 0 {
		columns = webauthnsessiondatum.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wsdq.sql != nil {
		selector = wsdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wsdq.ctx.Unique != nil && *wsdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wsdq.predicates {
		p(selector)
	}
	for _, p := range wsdq.order {
		p(selector)
	}
	if offset := wsdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wsdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WebauthnSessionDatumGroupBy is the group-by builder for WebauthnSessionDatum entities.
type WebauthnSessionDatumGroupBy struct {
	selector
	build *WebauthnSessionDatumQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wsdgb *WebauthnSessionDatumGroupBy) Aggregate(fns ...AggregateFunc) *WebauthnSessionDatumGroupBy {
	wsdgb.fns = append(wsdgb.fns, fns...)
	return wsdgb
}

// Scan applies the selector query and scans the result into the given value.
func (wsdgb *WebauthnSessionDatumGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wsdgb.build.ctx, "GroupBy")
	if err := wsdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WebauthnSessionDatumQuery, *WebauthnSessionDatumGroupBy](ctx, wsdgb.build, wsdgb, wsdgb.build.inters, v)
}

func (wsdgb *WebauthnSessionDatumGroupBy) sqlScan(ctx context.Context, root *WebauthnSessionDatumQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wsdgb.fns))
	for _, fn := range wsdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wsdgb.flds)+len(wsdgb.fns))
		for _, f := range *wsdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wsdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wsdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WebauthnSessionDatumSelect is the builder for selecting fields of WebauthnSessionDatum entities.
type WebauthnSessionDatumSelect struct {
	*WebauthnSessionDatumQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wsds *WebauthnSessionDatumSelect) Aggregate(fns ...AggregateFunc) *WebauthnSessionDatumSelect {
	wsds.fns = append(wsds.fns, fns...)
	return wsds
}

// Scan applies the selector query and scans the result into the given value.
func (wsds *WebauthnSessionDatumSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wsds.ctx, "Select")
	if err := wsds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WebauthnSessionDatumQuery, *WebauthnSessionDatumSelect](ctx, wsds.WebauthnSessionDatumQuery, wsds, wsds.inters, v)
}

func (wsds *WebauthnSessionDatumSelect) sqlScan(ctx context.Context, root *WebauthnSessionDatumQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wsds.fns))
	for _, fn := range wsds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wsds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wsds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
