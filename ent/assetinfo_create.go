// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/ent/assetinfo"
)

// AssetInfoCreate is the builder for creating a AssetInfo entity.
type AssetInfoCreate struct {
	config
	mutation *AssetInfoMutation
	hooks    []Hook
}

// SetAccountInfo sets the "account_info" field.
func (aic *AssetInfoCreate) SetAccountInfo(s struct{}) *AssetInfoCreate {
	aic.mutation.SetAccountInfo(s)
	return aic
}

// SetInstitutionInfo sets the "institution_info" field.
func (aic *AssetInfoCreate) SetInstitutionInfo(s struct{}) *AssetInfoCreate {
	aic.mutation.SetInstitutionInfo(s)
	return aic
}

// SetAssetInfo sets the "asset_info" field.
func (aic *AssetInfoCreate) SetAssetInfo(s struct{}) *AssetInfoCreate {
	aic.mutation.SetAssetInfo(s)
	return aic
}

// SetSensibleData sets the "sensible_data" field.
func (aic *AssetInfoCreate) SetSensibleData(s string) *AssetInfoCreate {
	aic.mutation.SetSensibleData(s)
	return aic
}

// SetDescriptions sets the "descriptions" field.
func (aic *AssetInfoCreate) SetDescriptions(s string) *AssetInfoCreate {
	aic.mutation.SetDescriptions(s)
	return aic
}

// SetCreatedAt sets the "created_at" field.
func (aic *AssetInfoCreate) SetCreatedAt(t time.Time) *AssetInfoCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetUpdatedAt sets the "updated_at" field.
func (aic *AssetInfoCreate) SetUpdatedAt(t time.Time) *AssetInfoCreate {
	aic.mutation.SetUpdatedAt(t)
	return aic
}

// SetID sets the "id" field.
func (aic *AssetInfoCreate) SetID(u uint) *AssetInfoCreate {
	aic.mutation.SetID(u)
	return aic
}

// Mutation returns the AssetInfoMutation object of the builder.
func (aic *AssetInfoCreate) Mutation() *AssetInfoMutation {
	return aic.mutation
}

// Save creates the AssetInfo in the database.
func (aic *AssetInfoCreate) Save(ctx context.Context) (*AssetInfo, error) {
	return withHooks[*AssetInfo, AssetInfoMutation](ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AssetInfoCreate) SaveX(ctx context.Context) *AssetInfo {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AssetInfoCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AssetInfoCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AssetInfoCreate) check() error {
	if _, ok := aic.mutation.AccountInfo(); !ok {
		return &ValidationError{Name: "account_info", err: errors.New(`ent: missing required field "AssetInfo.account_info"`)}
	}
	if _, ok := aic.mutation.InstitutionInfo(); !ok {
		return &ValidationError{Name: "institution_info", err: errors.New(`ent: missing required field "AssetInfo.institution_info"`)}
	}
	if _, ok := aic.mutation.AssetInfo(); !ok {
		return &ValidationError{Name: "asset_info", err: errors.New(`ent: missing required field "AssetInfo.asset_info"`)}
	}
	if _, ok := aic.mutation.SensibleData(); !ok {
		return &ValidationError{Name: "sensible_data", err: errors.New(`ent: missing required field "AssetInfo.sensible_data"`)}
	}
	if _, ok := aic.mutation.Descriptions(); !ok {
		return &ValidationError{Name: "descriptions", err: errors.New(`ent: missing required field "AssetInfo.descriptions"`)}
	}
	if _, ok := aic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetInfo.created_at"`)}
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetInfo.updated_at"`)}
	}
	return nil
}

func (aic *AssetInfoCreate) sqlSave(ctx context.Context) (*AssetInfo, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AssetInfoCreate) createSpec() (*AssetInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetInfo{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(assetinfo.Table, sqlgraph.NewFieldSpec(assetinfo.FieldID, field.TypeUint))
	)
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aic.mutation.AccountInfo(); ok {
		_spec.SetField(assetinfo.FieldAccountInfo, field.TypeJSON, value)
		_node.AccountInfo = value
	}
	if value, ok := aic.mutation.InstitutionInfo(); ok {
		_spec.SetField(assetinfo.FieldInstitutionInfo, field.TypeJSON, value)
		_node.InstitutionInfo = value
	}
	if value, ok := aic.mutation.AssetInfo(); ok {
		_spec.SetField(assetinfo.FieldAssetInfo, field.TypeJSON, value)
		_node.AssetInfo = value
	}
	if value, ok := aic.mutation.SensibleData(); ok {
		_spec.SetField(assetinfo.FieldSensibleData, field.TypeString, value)
		_node.SensibleData = value
	}
	if value, ok := aic.mutation.Descriptions(); ok {
		_spec.SetField(assetinfo.FieldDescriptions, field.TypeString, value)
		_node.Descriptions = value
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.SetField(assetinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aic.mutation.UpdatedAt(); ok {
		_spec.SetField(assetinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AssetInfoCreateBulk is the builder for creating many AssetInfo entities in bulk.
type AssetInfoCreateBulk struct {
	config
	builders []*AssetInfoCreate
}

// Save creates the AssetInfo entities in the database.
func (aicb *AssetInfoCreateBulk) Save(ctx context.Context) ([]*AssetInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AssetInfo, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AssetInfoCreateBulk) SaveX(ctx context.Context) []*AssetInfo {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AssetInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AssetInfoCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
