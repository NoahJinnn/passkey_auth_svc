// Code generated by ent, DO NOT EDIT.

package cryptoaccount

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hellohq/hqservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldName, v))
}

// CoinType applies equality check predicate on the "coin_type" field. It's identical to CoinTypeEQ.
func CoinType(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldCoinType, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldBalance, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotNull(FieldUserID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldContainsFold(FieldName, v))
}

// CoinTypeEQ applies the EQ predicate on the "coin_type" field.
func CoinTypeEQ(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldCoinType, v))
}

// CoinTypeNEQ applies the NEQ predicate on the "coin_type" field.
func CoinTypeNEQ(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldCoinType, v))
}

// CoinTypeIn applies the In predicate on the "coin_type" field.
func CoinTypeIn(vs ...string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldCoinType, vs...))
}

// CoinTypeNotIn applies the NotIn predicate on the "coin_type" field.
func CoinTypeNotIn(vs ...string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldCoinType, vs...))
}

// CoinTypeGT applies the GT predicate on the "coin_type" field.
func CoinTypeGT(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGT(FieldCoinType, v))
}

// CoinTypeGTE applies the GTE predicate on the "coin_type" field.
func CoinTypeGTE(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGTE(FieldCoinType, v))
}

// CoinTypeLT applies the LT predicate on the "coin_type" field.
func CoinTypeLT(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLT(FieldCoinType, v))
}

// CoinTypeLTE applies the LTE predicate on the "coin_type" field.
func CoinTypeLTE(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLTE(FieldCoinType, v))
}

// CoinTypeContains applies the Contains predicate on the "coin_type" field.
func CoinTypeContains(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldContains(FieldCoinType, v))
}

// CoinTypeHasPrefix applies the HasPrefix predicate on the "coin_type" field.
func CoinTypeHasPrefix(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldHasPrefix(FieldCoinType, v))
}

// CoinTypeHasSuffix applies the HasSuffix predicate on the "coin_type" field.
func CoinTypeHasSuffix(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldHasSuffix(FieldCoinType, v))
}

// CoinTypeEqualFold applies the EqualFold predicate on the "coin_type" field.
func CoinTypeEqualFold(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEqualFold(FieldCoinType, v))
}

// CoinTypeContainsFold applies the ContainsFold predicate on the "coin_type" field.
func CoinTypeContainsFold(v string) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldContainsFold(FieldCoinType, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLTE(FieldBalance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CryptoAccount {
	return predicate.CryptoAccount(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.CryptoAccount {
	return predicate.CryptoAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.CryptoAccount {
	return predicate.CryptoAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CryptoAccount) predicate.CryptoAccount {
	return predicate.CryptoAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CryptoAccount) predicate.CryptoAccount {
	return predicate.CryptoAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CryptoAccount) predicate.CryptoAccount {
	return predicate.CryptoAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
