// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialCreationOptions Options for credential creation with the WebAuthn API
//
// swagger:model CredentialCreationOptions
type CredentialCreationOptions struct {

	// public key
	PublicKey *CredentialCreationOptionsPublicKey `json:"publicKey,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialCreationOptions) UnmarshalJSON(data []byte) error {
	var props struct {

		// public key
		PublicKey *CredentialCreationOptionsPublicKey `json:"publicKey,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.PublicKey = props.PublicKey
	return nil
}

// Validate validates this credential creation options
func (m *CredentialCreationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialCreationOptions) validatePublicKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this credential creation options based on the context it is used
func (m *CredentialCreationOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialCreationOptions) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey != nil {
		if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptions) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialCreationOptionsPublicKey credential creation options public key
//
// swagger:model CredentialCreationOptionsPublicKey
type CredentialCreationOptionsPublicKey struct {

	// attestation
	// Example: none
	// Enum: [none indirect direct enterprise]
	Attestation string `json:"attestation,omitempty"`

	// authenticator selection
	AuthenticatorSelection *CredentialCreationOptionsPublicKeyAuthenticatorSelection `json:"authenticatorSelection,omitempty"`

	// challenge
	// Example: 7qmkJUXR0dOFnsW48evX3qKdCzlGjvvqAAvMDN+KTN0=
	Challenge string `json:"challenge,omitempty"`

	// pub key cred params
	// Example: [{"alg":-7,"type":"public-key"}]
	PubKeyCredParams []*CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0 `json:"pubKeyCredParams"`

	// rp
	Rp *CredentialCreationOptionsPublicKeyRp `json:"rp,omitempty"`

	// timeout
	// Example: 60000
	Timeout int64 `json:"timeout,omitempty"`

	// user
	User *CredentialCreationOptionsPublicKeyUser `json:"user,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialCreationOptionsPublicKey) UnmarshalJSON(data []byte) error {
	var props struct {

		// attestation
		// Example: none
		// Enum: [none indirect direct enterprise]
		Attestation string `json:"attestation,omitempty"`

		// authenticator selection
		AuthenticatorSelection *CredentialCreationOptionsPublicKeyAuthenticatorSelection `json:"authenticatorSelection,omitempty"`

		// challenge
		// Example: 7qmkJUXR0dOFnsW48evX3qKdCzlGjvvqAAvMDN+KTN0=
		Challenge string `json:"challenge,omitempty"`

		// pub key cred params
		// Example: [{"alg":-7,"type":"public-key"}]
		PubKeyCredParams []*CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0 `json:"pubKeyCredParams"`

		// rp
		Rp *CredentialCreationOptionsPublicKeyRp `json:"rp,omitempty"`

		// timeout
		// Example: 60000
		Timeout int64 `json:"timeout,omitempty"`

		// user
		User *CredentialCreationOptionsPublicKeyUser `json:"user,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Attestation = props.Attestation
	m.AuthenticatorSelection = props.AuthenticatorSelection
	m.Challenge = props.Challenge
	m.PubKeyCredParams = props.PubKeyCredParams
	m.Rp = props.Rp
	m.Timeout = props.Timeout
	m.User = props.User
	return nil
}

// Validate validates this credential creation options public key
func (m *CredentialCreationOptionsPublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticatorSelection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePubKeyCredParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var credentialCreationOptionsPublicKeyTypeAttestationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","indirect","direct","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialCreationOptionsPublicKeyTypeAttestationPropEnum = append(credentialCreationOptionsPublicKeyTypeAttestationPropEnum, v)
	}
}

const (

	// CredentialCreationOptionsPublicKeyAttestationNone captures enum value "none"
	CredentialCreationOptionsPublicKeyAttestationNone string = "none"

	// CredentialCreationOptionsPublicKeyAttestationIndirect captures enum value "indirect"
	CredentialCreationOptionsPublicKeyAttestationIndirect string = "indirect"

	// CredentialCreationOptionsPublicKeyAttestationDirect captures enum value "direct"
	CredentialCreationOptionsPublicKeyAttestationDirect string = "direct"

	// CredentialCreationOptionsPublicKeyAttestationEnterprise captures enum value "enterprise"
	CredentialCreationOptionsPublicKeyAttestationEnterprise string = "enterprise"
)

// prop value enum
func (m *CredentialCreationOptionsPublicKey) validateAttestationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialCreationOptionsPublicKeyTypeAttestationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialCreationOptionsPublicKey) validateAttestation(formats strfmt.Registry) error {
	if swag.IsZero(m.Attestation) { // not required
		return nil
	}

	// value enum
	if err := m.validateAttestationEnum("publicKey"+"."+"attestation", "body", m.Attestation); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) validateAuthenticatorSelection(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticatorSelection) { // not required
		return nil
	}

	if m.AuthenticatorSelection != nil {
		if err := m.AuthenticatorSelection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey" + "." + "authenticatorSelection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey" + "." + "authenticatorSelection")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) validatePubKeyCredParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PubKeyCredParams) { // not required
		return nil
	}

	for i := 0; i < len(m.PubKeyCredParams); i++ {
		if swag.IsZero(m.PubKeyCredParams[i]) { // not required
			continue
		}

		if m.PubKeyCredParams[i] != nil {
			if err := m.PubKeyCredParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publicKey" + "." + "pubKeyCredParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publicKey" + "." + "pubKeyCredParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) validateRp(formats strfmt.Registry) error {
	if swag.IsZero(m.Rp) { // not required
		return nil
	}

	if m.Rp != nil {
		if err := m.Rp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey" + "." + "rp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey" + "." + "rp")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this credential creation options public key based on the context it is used
func (m *CredentialCreationOptionsPublicKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthenticatorSelection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePubKeyCredParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialCreationOptionsPublicKey) contextValidateAuthenticatorSelection(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthenticatorSelection != nil {
		if err := m.AuthenticatorSelection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey" + "." + "authenticatorSelection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey" + "." + "authenticatorSelection")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) contextValidatePubKeyCredParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PubKeyCredParams); i++ {

		if m.PubKeyCredParams[i] != nil {
			if err := m.PubKeyCredParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publicKey" + "." + "pubKeyCredParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publicKey" + "." + "pubKeyCredParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) contextValidateRp(ctx context.Context, formats strfmt.Registry) error {

	if m.Rp != nil {
		if err := m.Rp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey" + "." + "rp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey" + "." + "rp")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialCreationOptionsPublicKey) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKey) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptionsPublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialCreationOptionsPublicKeyAuthenticatorSelection credential creation options public key authenticator selection
//
// swagger:model CredentialCreationOptionsPublicKeyAuthenticatorSelection
type CredentialCreationOptionsPublicKeyAuthenticatorSelection struct {

	// authenticator attachment
	// Example: platform
	// Enum: [platform cross-platform]
	AuthenticatorAttachment string `json:"authenticatorAttachment,omitempty"`

	// require resident key
	// Example: true
	RequireResidentKey bool `json:"requireResidentKey,omitempty"`

	// resident key
	// Example: preferred
	// Enum: [discouraged preferred required]
	ResidentKey string `json:"residentKey,omitempty"`

	// user verification
	// Example: required
	// Enum: [discouraged preferred required]
	UserVerification string `json:"userVerification,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) UnmarshalJSON(data []byte) error {
	var props struct {

		// authenticator attachment
		// Example: platform
		// Enum: [platform cross-platform]
		AuthenticatorAttachment string `json:"authenticatorAttachment,omitempty"`

		// require resident key
		// Example: true
		RequireResidentKey bool `json:"requireResidentKey,omitempty"`

		// resident key
		// Example: preferred
		// Enum: [discouraged preferred required]
		ResidentKey string `json:"residentKey,omitempty"`

		// user verification
		// Example: required
		// Enum: [discouraged preferred required]
		UserVerification string `json:"userVerification,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AuthenticatorAttachment = props.AuthenticatorAttachment
	m.RequireResidentKey = props.RequireResidentKey
	m.ResidentKey = props.ResidentKey
	m.UserVerification = props.UserVerification
	return nil
}

// Validate validates this credential creation options public key authenticator selection
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticatorAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResidentKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeAuthenticatorAttachmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["platform","cross-platform"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeAuthenticatorAttachmentPropEnum = append(credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeAuthenticatorAttachmentPropEnum, v)
	}
}

const (

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionAuthenticatorAttachmentPlatform captures enum value "platform"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionAuthenticatorAttachmentPlatform string = "platform"

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionAuthenticatorAttachmentCrossDashPlatform captures enum value "cross-platform"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionAuthenticatorAttachmentCrossDashPlatform string = "cross-platform"
)

// prop value enum
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) validateAuthenticatorAttachmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeAuthenticatorAttachmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) validateAuthenticatorAttachment(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticatorAttachment) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticatorAttachmentEnum("publicKey"+"."+"authenticatorSelection"+"."+"authenticatorAttachment", "body", m.AuthenticatorAttachment); err != nil {
		return err
	}

	return nil
}

var credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeResidentKeyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["discouraged","preferred","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeResidentKeyPropEnum = append(credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeResidentKeyPropEnum, v)
	}
}

const (

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionResidentKeyDiscouraged captures enum value "discouraged"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionResidentKeyDiscouraged string = "discouraged"

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionResidentKeyPreferred captures enum value "preferred"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionResidentKeyPreferred string = "preferred"

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionResidentKeyRequired captures enum value "required"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionResidentKeyRequired string = "required"
)

// prop value enum
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) validateResidentKeyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeResidentKeyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) validateResidentKey(formats strfmt.Registry) error {
	if swag.IsZero(m.ResidentKey) { // not required
		return nil
	}

	// value enum
	if err := m.validateResidentKeyEnum("publicKey"+"."+"authenticatorSelection"+"."+"residentKey", "body", m.ResidentKey); err != nil {
		return err
	}

	return nil
}

var credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeUserVerificationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["discouraged","preferred","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeUserVerificationPropEnum = append(credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeUserVerificationPropEnum, v)
	}
}

const (

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionUserVerificationDiscouraged captures enum value "discouraged"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionUserVerificationDiscouraged string = "discouraged"

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionUserVerificationPreferred captures enum value "preferred"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionUserVerificationPreferred string = "preferred"

	// CredentialCreationOptionsPublicKeyAuthenticatorSelectionUserVerificationRequired captures enum value "required"
	CredentialCreationOptionsPublicKeyAuthenticatorSelectionUserVerificationRequired string = "required"
)

// prop value enum
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) validateUserVerificationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialCreationOptionsPublicKeyAuthenticatorSelectionTypeUserVerificationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) validateUserVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.UserVerification) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserVerificationEnum("publicKey"+"."+"authenticatorSelection"+"."+"userVerification", "body", m.UserVerification); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credential creation options public key authenticator selection based on context it is used
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyAuthenticatorSelection) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptionsPublicKeyAuthenticatorSelection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0 credential creation options public key pub key cred params items0
//
// swagger:model CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0
type CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0 struct {

	// alg
	Alg float64 `json:"alg,omitempty"`

	// type
	// Enum: [public-key]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) UnmarshalJSON(data []byte) error {
	var props struct {

		// alg
		Alg float64 `json:"alg,omitempty"`

		// type
		// Enum: [public-key]
		Type string `json:"type,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Alg = props.Alg
	m.Type = props.Type
	return nil
}

// Validate validates this credential creation options public key pub key cred params items0
func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var credentialCreationOptionsPublicKeyPubKeyCredParamsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public-key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialCreationOptionsPublicKeyPubKeyCredParamsItems0TypeTypePropEnum = append(credentialCreationOptionsPublicKeyPubKeyCredParamsItems0TypeTypePropEnum, v)
	}
}

const (

	// CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0TypePublicDashKey captures enum value "public-key"
	CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0TypePublicDashKey string = "public-key"
)

// prop value enum
func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialCreationOptionsPublicKeyPubKeyCredParamsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credential creation options public key pub key cred params items0 based on context it is used
func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptionsPublicKeyPubKeyCredParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialCreationOptionsPublicKeyRp credential creation options public key rp
//
// swagger:model CredentialCreationOptionsPublicKeyRp
type CredentialCreationOptionsPublicKeyRp struct {

	// id
	// Example: localhost
	ID string `json:"id,omitempty"`

	// name
	// Example: Hanko Authentication Service
	Name string `json:"name,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialCreationOptionsPublicKeyRp) UnmarshalJSON(data []byte) error {
	var props struct {

		// id
		// Example: localhost
		ID string `json:"id,omitempty"`

		// name
		// Example: Hanko Authentication Service
		Name string `json:"name,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ID = props.ID
	m.Name = props.Name
	return nil
}

// Validate validates this credential creation options public key rp
func (m *CredentialCreationOptionsPublicKeyRp) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this credential creation options public key rp based on context it is used
func (m *CredentialCreationOptionsPublicKeyRp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyRp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyRp) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptionsPublicKeyRp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialCreationOptionsPublicKeyUser credential creation options public key user
//
// swagger:model CredentialCreationOptionsPublicKeyUser
type CredentialCreationOptionsPublicKeyUser struct {

	// display name
	// Example: user@example.com
	DisplayName string `json:"displayName,omitempty"`

	// id
	// Example: pPQT9rwJRD7gVncsnCDNyN
	ID string `json:"id,omitempty"`

	// name
	// Example: user@example.com
	Name string `json:"name,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialCreationOptionsPublicKeyUser) UnmarshalJSON(data []byte) error {
	var props struct {

		// display name
		// Example: user@example.com
		DisplayName string `json:"displayName,omitempty"`

		// id
		// Example: pPQT9rwJRD7gVncsnCDNyN
		ID string `json:"id,omitempty"`

		// name
		// Example: user@example.com
		Name string `json:"name,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.DisplayName = props.DisplayName
	m.ID = props.ID
	m.Name = props.Name
	return nil
}

// Validate validates this credential creation options public key user
func (m *CredentialCreationOptionsPublicKeyUser) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this credential creation options public key user based on context it is used
func (m *CredentialCreationOptionsPublicKeyUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptionsPublicKeyUser) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptionsPublicKeyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
