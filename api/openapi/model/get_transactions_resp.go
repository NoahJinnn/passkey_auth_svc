// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransactionsResp GetTransactionsResp
//
// swagger:model GetTransactionsResp
type GetTransactionsResp struct {

	// latest transactions
	// Required: true
	LatestTransactions []*Transaction `json:"latest_transactions"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *GetTransactionsResp) UnmarshalJSON(data []byte) error {
	var props struct {

		// latest transactions
		// Required: true
		LatestTransactions []*Transaction `json:"latest_transactions"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.LatestTransactions = props.LatestTransactions
	return nil
}

// Validate validates this get transactions resp
func (m *GetTransactionsResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTransactionsResp) validateLatestTransactions(formats strfmt.Registry) error {

	if err := validate.Required("latest_transactions", "body", m.LatestTransactions); err != nil {
		return err
	}

	for i := 0; i < len(m.LatestTransactions); i++ {
		if swag.IsZero(m.LatestTransactions[i]) { // not required
			continue
		}

		if m.LatestTransactions[i] != nil {
			if err := m.LatestTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latest_transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("latest_transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get transactions resp based on the context it is used
func (m *GetTransactionsResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLatestTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTransactionsResp) contextValidateLatestTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LatestTransactions); i++ {

		if m.LatestTransactions[i] != nil {
			if err := m.LatestTransactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("latest_transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("latest_transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTransactionsResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTransactionsResp) UnmarshalBinary(b []byte) error {
	var res GetTransactionsResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
