// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAuthAccountResp GetAuthAccountResp
//
// swagger:model GetAuthAccountResp
type GetAuthAccountResp struct {

	// accounts
	// Required: true
	Accounts []*AccountBase `json:"accounts"`

	// numbers
	// Required: true
	Numbers *AuthGetNumbers `json:"numbers"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *GetAuthAccountResp) UnmarshalJSON(data []byte) error {
	var props struct {

		// accounts
		// Required: true
		Accounts []*AccountBase `json:"accounts"`

		// numbers
		// Required: true
		Numbers *AuthGetNumbers `json:"numbers"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Accounts = props.Accounts
	m.Numbers = props.Numbers
	return nil
}

// Validate validates this get auth account resp
func (m *GetAuthAccountResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumbers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAuthAccountResp) validateAccounts(formats strfmt.Registry) error {

	if err := validate.Required("accounts", "body", m.Accounts); err != nil {
		return err
	}

	for i := 0; i < len(m.Accounts); i++ {
		if swag.IsZero(m.Accounts[i]) { // not required
			continue
		}

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetAuthAccountResp) validateNumbers(formats strfmt.Registry) error {

	if err := validate.Required("numbers", "body", m.Numbers); err != nil {
		return err
	}

	if m.Numbers != nil {
		if err := m.Numbers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numbers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("numbers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get auth account resp based on the context it is used
func (m *GetAuthAccountResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumbers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAuthAccountResp) contextValidateAccounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Accounts); i++ {

		if m.Accounts[i] != nil {
			if err := m.Accounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetAuthAccountResp) contextValidateNumbers(ctx context.Context, formats strfmt.Registry) error {

	if m.Numbers != nil {
		if err := m.Numbers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numbers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("numbers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAuthAccountResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAuthAccountResp) UnmarshalBinary(b []byte) error {
	var res GetAuthAccountResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
