// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User
//
// swagger:model User
type User struct {

	// address
	Address string `json:"Address,omitempty"`

	// email
	// Required: true
	Email *string `json:"Email"`

	// first name
	// Required: true
	FirstName *string `json:"FirstName"`

	// ID
	// Required: true
	ID *int64 `json:"ID"`

	// last name
	// Required: true
	LastName *string `json:"LastName"`

	// password
	Password string `json:"Password,omitempty"`

	// phone number
	PhoneNumber string `json:"PhoneNumber,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *User) UnmarshalJSON(data []byte) error {
	var props struct {

		// address
		Address string `json:"Address,omitempty"`

		// email
		// Required: true
		Email *string `json:"Email"`

		// first name
		// Required: true
		FirstName *string `json:"FirstName"`

		// ID
		// Required: true
		ID *int64 `json:"ID"`

		// last name
		// Required: true
		LastName *string `json:"LastName"`

		// password
		Password string `json:"Password,omitempty"`

		// phone number
		PhoneNumber string `json:"PhoneNumber,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Address = props.Address
	m.Email = props.Email
	m.FirstName = props.FirstName
	m.ID = props.ID
	m.LastName = props.LastName
	m.Password = props.Password
	m.PhoneNumber = props.PhoneNumber
	return nil
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("Email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("FirstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("LastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
