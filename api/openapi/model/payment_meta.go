// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentMeta PaymentMeta
//
// swagger:model PaymentMeta
type PaymentMeta struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// by order of
	// Required: true
	ByOrderOf *NullableString `json:"by_order_of"`

	// payee
	// Required: true
	Payee *NullableString `json:"payee"`

	// payer
	// Required: true
	Payer *NullableString `json:"payer"`

	// payment method
	// Required: true
	PaymentMethod *NullableString `json:"payment_method"`

	// payment processor
	// Required: true
	PaymentProcessor *NullableString `json:"payment_processor"`

	// ppd id
	// Required: true
	PpdID *NullableString `json:"ppd_id"`

	// reason
	// Required: true
	Reason *NullableString `json:"reason"`

	// reference number
	// Required: true
	ReferenceNumber *NullableString `json:"reference_number"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *PaymentMeta) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// by order of
		// Required: true
		ByOrderOf *NullableString `json:"by_order_of"`

		// payee
		// Required: true
		Payee *NullableString `json:"payee"`

		// payer
		// Required: true
		Payer *NullableString `json:"payer"`

		// payment method
		// Required: true
		PaymentMethod *NullableString `json:"payment_method"`

		// payment processor
		// Required: true
		PaymentProcessor *NullableString `json:"payment_processor"`

		// ppd id
		// Required: true
		PpdID *NullableString `json:"ppd_id"`

		// reason
		// Required: true
		Reason *NullableString `json:"reason"`

		// reference number
		// Required: true
		ReferenceNumber *NullableString `json:"reference_number"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.ByOrderOf = props.ByOrderOf
	m.Payee = props.Payee
	m.Payer = props.Payer
	m.PaymentMethod = props.PaymentMethod
	m.PaymentProcessor = props.PaymentProcessor
	m.PpdID = props.PpdID
	m.Reason = props.Reason
	m.ReferenceNumber = props.ReferenceNumber
	return nil
}

// Validate validates this payment meta
func (m *PaymentMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByOrderOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentProcessor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePpdID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMeta) validateByOrderOf(formats strfmt.Registry) error {

	if err := validate.Required("by_order_of", "body", m.ByOrderOf); err != nil {
		return err
	}

	if m.ByOrderOf != nil {
		if err := m.ByOrderOf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("by_order_of")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("by_order_of")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validatePayee(formats strfmt.Registry) error {

	if err := validate.Required("payee", "body", m.Payee); err != nil {
		return err
	}

	if m.Payee != nil {
		if err := m.Payee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payee")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validatePayer(formats strfmt.Registry) error {

	if err := validate.Required("payer", "body", m.Payer); err != nil {
		return err
	}

	if m.Payer != nil {
		if err := m.Payer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payer")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validatePaymentMethod(formats strfmt.Registry) error {

	if err := validate.Required("payment_method", "body", m.PaymentMethod); err != nil {
		return err
	}

	if m.PaymentMethod != nil {
		if err := m.PaymentMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payment_method")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validatePaymentProcessor(formats strfmt.Registry) error {

	if err := validate.Required("payment_processor", "body", m.PaymentProcessor); err != nil {
		return err
	}

	if m.PaymentProcessor != nil {
		if err := m.PaymentProcessor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_processor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payment_processor")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validatePpdID(formats strfmt.Registry) error {

	if err := validate.Required("ppd_id", "body", m.PpdID); err != nil {
		return err
	}

	if m.PpdID != nil {
		if err := m.PpdID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppd_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppd_id")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) validateReferenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("reference_number", "body", m.ReferenceNumber); err != nil {
		return err
	}

	if m.ReferenceNumber != nil {
		if err := m.ReferenceNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_number")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_number")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this payment meta based on the context it is used
func (m *PaymentMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateByOrderOf(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentProcessor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePpdID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferenceNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentMeta) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *PaymentMeta) contextValidateByOrderOf(ctx context.Context, formats strfmt.Registry) error {

	if m.ByOrderOf != nil {
		if err := m.ByOrderOf.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("by_order_of")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("by_order_of")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidatePayee(ctx context.Context, formats strfmt.Registry) error {

	if m.Payee != nil {
		if err := m.Payee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payee")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidatePayer(ctx context.Context, formats strfmt.Registry) error {

	if m.Payer != nil {
		if err := m.Payer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payer")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidatePaymentMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentMethod != nil {
		if err := m.PaymentMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payment_method")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidatePaymentProcessor(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentProcessor != nil {
		if err := m.PaymentProcessor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_processor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payment_processor")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidatePpdID(ctx context.Context, formats strfmt.Registry) error {

	if m.PpdID != nil {
		if err := m.PpdID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ppd_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ppd_id")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidateReason(ctx context.Context, formats strfmt.Registry) error {

	if m.Reason != nil {
		if err := m.Reason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentMeta) contextValidateReferenceNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.ReferenceNumber != nil {
		if err := m.ReferenceNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference_number")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reference_number")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentMeta) UnmarshalBinary(b []byte) error {
	var res PaymentMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
