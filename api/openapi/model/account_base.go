// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountBase AccountBase
//
// swagger:model AccountBase
type AccountBase struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// balances
	// Required: true
	Balances *AccountBalance `json:"balances"`

	// mask
	// Required: true
	Mask *NullableString `json:"mask"`

	// name
	// Required: true
	Name *string `json:"name"`

	// official name
	// Required: true
	OfficialName *NullableString `json:"official_name"`

	// subtype
	// Required: true
	Subtype *NullableAccountSubtype `json:"subtype"`

	// type
	// Required: true
	Type *string `json:"type"`

	// verification status
	// Required: true
	VerificationStatus *string `json:"verification_status"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *AccountBase) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// account id
		// Required: true
		AccountID *string `json:"account_id"`

		// balances
		// Required: true
		Balances *AccountBalance `json:"balances"`

		// mask
		// Required: true
		Mask *NullableString `json:"mask"`

		// name
		// Required: true
		Name *string `json:"name"`

		// official name
		// Required: true
		OfficialName *NullableString `json:"official_name"`

		// subtype
		// Required: true
		Subtype *NullableAccountSubtype `json:"subtype"`

		// type
		// Required: true
		Type *string `json:"type"`

		// verification status
		// Required: true
		VerificationStatus *string `json:"verification_status"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.AccountID = props.AccountID
	m.Balances = props.Balances
	m.Mask = props.Mask
	m.Name = props.Name
	m.OfficialName = props.OfficialName
	m.Subtype = props.Subtype
	m.Type = props.Type
	m.VerificationStatus = props.VerificationStatus
	return nil
}

// Validate validates this account base
func (m *AccountBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficialName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountBase) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *AccountBase) validateBalances(formats strfmt.Registry) error {

	if err := validate.Required("balances", "body", m.Balances); err != nil {
		return err
	}

	if m.Balances != nil {
		if err := m.Balances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balances")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) validateMask(formats strfmt.Registry) error {

	if err := validate.Required("mask", "body", m.Mask); err != nil {
		return err
	}

	if m.Mask != nil {
		if err := m.Mask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mask")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AccountBase) validateOfficialName(formats strfmt.Registry) error {

	if err := validate.Required("official_name", "body", m.OfficialName); err != nil {
		return err
	}

	if m.OfficialName != nil {
		if err := m.OfficialName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("official_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("official_name")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) validateSubtype(formats strfmt.Registry) error {

	if err := validate.Required("subtype", "body", m.Subtype); err != nil {
		return err
	}

	if m.Subtype != nil {
		if err := m.Subtype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subtype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subtype")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AccountBase) validateVerificationStatus(formats strfmt.Registry) error {

	if err := validate.Required("verification_status", "body", m.VerificationStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this account base based on the context it is used
func (m *AccountBase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBalances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfficialName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubtype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountBase) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *AccountBase) contextValidateBalances(ctx context.Context, formats strfmt.Registry) error {

	if m.Balances != nil {
		if err := m.Balances.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balances")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) contextValidateMask(ctx context.Context, formats strfmt.Registry) error {

	if m.Mask != nil {
		if err := m.Mask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mask")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mask")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) contextValidateOfficialName(ctx context.Context, formats strfmt.Registry) error {

	if m.OfficialName != nil {
		if err := m.OfficialName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("official_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("official_name")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBase) contextValidateSubtype(ctx context.Context, formats strfmt.Registry) error {

	if m.Subtype != nil {
		if err := m.Subtype.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subtype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subtype")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountBase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountBase) UnmarshalBinary(b []byte) error {
	var res AccountBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
