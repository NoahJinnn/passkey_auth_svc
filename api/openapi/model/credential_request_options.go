// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialRequestOptions Options for assertion generation with the WebAuthn API
//
// swagger:model CredentialRequestOptions
type CredentialRequestOptions struct {

	// public key
	PublicKey *CredentialRequestOptionsPublicKey `json:"publicKey,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialRequestOptions) UnmarshalJSON(data []byte) error {
	var props struct {

		// public key
		PublicKey *CredentialRequestOptionsPublicKey `json:"publicKey,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.PublicKey = props.PublicKey
	return nil
}

// Validate validates this credential request options
func (m *CredentialRequestOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialRequestOptions) validatePublicKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this credential request options based on the context it is used
func (m *CredentialRequestOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialRequestOptions) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey != nil {
		if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialRequestOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialRequestOptions) UnmarshalBinary(b []byte) error {
	var res CredentialRequestOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialRequestOptionsPublicKey credential request options public key
//
// swagger:model CredentialRequestOptionsPublicKey
type CredentialRequestOptionsPublicKey struct {

	// allow credentials
	AllowCredentials []*CredentialRequestOptionsPublicKeyAllowCredentialsItems0 `json:"allowCredentials"`

	// challenge
	// Example: qgOI+0KpGnl9NOqaT6dfsYvi96R87LgpErnvePeOgSU=
	Challenge string `json:"challenge,omitempty"`

	// rp Id
	// Example: localhost
	RpID string `json:"rpId,omitempty"`

	// timeout
	// Example: 60000
	Timeout int64 `json:"timeout,omitempty"`

	// user verification
	// Example: required
	// Enum: [required preferred discouraged]
	UserVerification string `json:"userVerification,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialRequestOptionsPublicKey) UnmarshalJSON(data []byte) error {
	var props struct {

		// allow credentials
		AllowCredentials []*CredentialRequestOptionsPublicKeyAllowCredentialsItems0 `json:"allowCredentials"`

		// challenge
		// Example: qgOI+0KpGnl9NOqaT6dfsYvi96R87LgpErnvePeOgSU=
		Challenge string `json:"challenge,omitempty"`

		// rp Id
		// Example: localhost
		RpID string `json:"rpId,omitempty"`

		// timeout
		// Example: 60000
		Timeout int64 `json:"timeout,omitempty"`

		// user verification
		// Example: required
		// Enum: [required preferred discouraged]
		UserVerification string `json:"userVerification,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AllowCredentials = props.AllowCredentials
	m.Challenge = props.Challenge
	m.RpID = props.RpID
	m.Timeout = props.Timeout
	m.UserVerification = props.UserVerification
	return nil
}

// Validate validates this credential request options public key
func (m *CredentialRequestOptionsPublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialRequestOptionsPublicKey) validateAllowCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowCredentials); i++ {
		if swag.IsZero(m.AllowCredentials[i]) { // not required
			continue
		}

		if m.AllowCredentials[i] != nil {
			if err := m.AllowCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publicKey" + "." + "allowCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publicKey" + "." + "allowCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var credentialRequestOptionsPublicKeyTypeUserVerificationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["required","preferred","discouraged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialRequestOptionsPublicKeyTypeUserVerificationPropEnum = append(credentialRequestOptionsPublicKeyTypeUserVerificationPropEnum, v)
	}
}

const (

	// CredentialRequestOptionsPublicKeyUserVerificationRequired captures enum value "required"
	CredentialRequestOptionsPublicKeyUserVerificationRequired string = "required"

	// CredentialRequestOptionsPublicKeyUserVerificationPreferred captures enum value "preferred"
	CredentialRequestOptionsPublicKeyUserVerificationPreferred string = "preferred"

	// CredentialRequestOptionsPublicKeyUserVerificationDiscouraged captures enum value "discouraged"
	CredentialRequestOptionsPublicKeyUserVerificationDiscouraged string = "discouraged"
)

// prop value enum
func (m *CredentialRequestOptionsPublicKey) validateUserVerificationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialRequestOptionsPublicKeyTypeUserVerificationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialRequestOptionsPublicKey) validateUserVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.UserVerification) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserVerificationEnum("publicKey"+"."+"userVerification", "body", m.UserVerification); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this credential request options public key based on the context it is used
func (m *CredentialRequestOptionsPublicKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialRequestOptionsPublicKey) contextValidateAllowCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllowCredentials); i++ {

		if m.AllowCredentials[i] != nil {
			if err := m.AllowCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publicKey" + "." + "allowCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publicKey" + "." + "allowCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialRequestOptionsPublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialRequestOptionsPublicKey) UnmarshalBinary(b []byte) error {
	var res CredentialRequestOptionsPublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CredentialRequestOptionsPublicKeyAllowCredentialsItems0 credential request options public key allow credentials items0
//
// swagger:model CredentialRequestOptionsPublicKeyAllowCredentialsItems0
type CredentialRequestOptionsPublicKeyAllowCredentialsItems0 struct {

	// id
	// Example: Mepptysj5ZZrTlg0qiLbsZ068OtQMeGVAikVy2n1hvvG...
	ID string `json:"id,omitempty"`

	// type
	// Example: public-key
	// Enum: [public-key]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) UnmarshalJSON(data []byte) error {
	var props struct {

		// id
		// Example: Mepptysj5ZZrTlg0qiLbsZ068OtQMeGVAikVy2n1hvvG...
		ID string `json:"id,omitempty"`

		// type
		// Example: public-key
		// Enum: [public-key]
		Type string `json:"type,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ID = props.ID
	m.Type = props.Type
	return nil
}

// Validate validates this credential request options public key allow credentials items0
func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var credentialRequestOptionsPublicKeyAllowCredentialsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public-key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialRequestOptionsPublicKeyAllowCredentialsItems0TypeTypePropEnum = append(credentialRequestOptionsPublicKeyAllowCredentialsItems0TypeTypePropEnum, v)
	}
}

const (

	// CredentialRequestOptionsPublicKeyAllowCredentialsItems0TypePublicDashKey captures enum value "public-key"
	CredentialRequestOptionsPublicKeyAllowCredentialsItems0TypePublicDashKey string = "public-key"
)

// prop value enum
func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialRequestOptionsPublicKeyAllowCredentialsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credential request options public key allow credentials items0 based on context it is used
func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialRequestOptionsPublicKeyAllowCredentialsItems0) UnmarshalBinary(b []byte) error {
	var res CredentialRequestOptionsPublicKeyAllowCredentialsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
