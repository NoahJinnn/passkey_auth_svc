// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInfoResp GetInfoResp
//
// swagger:model GetInfoResp
type GetInfoResp struct {

	// access token
	// Required: true
	AccessToken *string `json:"access_token"`

	// item id
	// Required: true
	ItemID *string `json:"item_id"`

	// products
	// Required: true
	Products *string `json:"products"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *GetInfoResp) UnmarshalJSON(data []byte) error {
	var props struct {

		// access token
		// Required: true
		AccessToken *string `json:"access_token"`

		// item id
		// Required: true
		ItemID *string `json:"item_id"`

		// products
		// Required: true
		Products *string `json:"products"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AccessToken = props.AccessToken
	m.ItemID = props.ItemID
	m.Products = props.Products
	return nil
}

// Validate validates this get info resp
func (m *GetInfoResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetInfoResp) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("access_token", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *GetInfoResp) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("item_id", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

func (m *GetInfoResp) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get info resp based on context it is used
func (m *GetInfoResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetInfoResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetInfoResp) UnmarshalBinary(b []byte) error {
	var res GetInfoResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
