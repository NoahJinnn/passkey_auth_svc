// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Owner Owner
//
// swagger:model Owner
type Owner struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// addresses
	// Required: true
	Addresses []*Address `json:"addresses"`

	// emails
	// Required: true
	Emails []*Email `json:"emails"`

	// names
	// Required: true
	Names []string `json:"names"`

	// phone numbers
	// Required: true
	PhoneNumbers []*PhoneNumber `json:"phone_numbers"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Owner) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// addresses
		// Required: true
		Addresses []*Address `json:"addresses"`

		// emails
		// Required: true
		Emails []*Email `json:"emails"`

		// names
		// Required: true
		Names []string `json:"names"`

		// phone numbers
		// Required: true
		PhoneNumbers []*PhoneNumber `json:"phone_numbers"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Addresses = props.Addresses
	m.Emails = props.Emails
	m.Names = props.Names
	m.PhoneNumbers = props.PhoneNumbers
	return nil
}

// Validate validates this owner
func (m *Owner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumbers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Owner) validateAddresses(formats strfmt.Registry) error {

	if err := validate.Required("addresses", "body", m.Addresses); err != nil {
		return err
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Owner) validateEmails(formats strfmt.Registry) error {

	if err := validate.Required("emails", "body", m.Emails); err != nil {
		return err
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Owner) validateNames(formats strfmt.Registry) error {

	if err := validate.Required("names", "body", m.Names); err != nil {
		return err
	}

	return nil
}

func (m *Owner) validatePhoneNumbers(formats strfmt.Registry) error {

	if err := validate.Required("phone_numbers", "body", m.PhoneNumbers); err != nil {
		return err
	}

	for i := 0; i < len(m.PhoneNumbers); i++ {
		if swag.IsZero(m.PhoneNumbers[i]) { // not required
			continue
		}

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this owner based on the context it is used
func (m *Owner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneNumbers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Owner) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *Owner) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Addresses); i++ {

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Owner) contextValidateEmails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Emails); i++ {

		if m.Emails[i] != nil {
			if err := m.Emails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Owner) contextValidatePhoneNumbers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhoneNumbers); i++ {

		if m.PhoneNumbers[i] != nil {
			if err := m.PhoneNumbers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phone_numbers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Owner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Owner) UnmarshalBinary(b []byte) error {
	var res Owner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
