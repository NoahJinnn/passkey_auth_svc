// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountBalance AccountBalance
//
// swagger:model AccountBalance
type AccountBalance struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// available
	// Required: true
	Available *NullableFloat64 `json:"available"`

	// current
	// Required: true
	Current *NullableFloat64 `json:"current"`

	// iso currency code
	// Required: true
	IsoCurrencyCode *NullableString `json:"iso_currency_code"`

	// last updated datetime
	// Required: true
	LastUpdatedDatetime *NullableTime `json:"last_updated_datetime"`

	// limit
	// Required: true
	Limit *NullableFloat64 `json:"limit"`

	// unofficial currency code
	// Required: true
	UnofficialCurrencyCode *NullableString `json:"unofficial_currency_code"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *AccountBalance) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// available
		// Required: true
		Available *NullableFloat64 `json:"available"`

		// current
		// Required: true
		Current *NullableFloat64 `json:"current"`

		// iso currency code
		// Required: true
		IsoCurrencyCode *NullableString `json:"iso_currency_code"`

		// last updated datetime
		// Required: true
		LastUpdatedDatetime *NullableTime `json:"last_updated_datetime"`

		// limit
		// Required: true
		Limit *NullableFloat64 `json:"limit"`

		// unofficial currency code
		// Required: true
		UnofficialCurrencyCode *NullableString `json:"unofficial_currency_code"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Available = props.Available
	m.Current = props.Current
	m.IsoCurrencyCode = props.IsoCurrencyCode
	m.LastUpdatedDatetime = props.LastUpdatedDatetime
	m.Limit = props.Limit
	m.UnofficialCurrencyCode = props.UnofficialCurrencyCode
	return nil
}

// Validate validates this account balance
func (m *AccountBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsoCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnofficialCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountBalance) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	if m.Available != nil {
		if err := m.Available.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("available")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("available")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) validateCurrent(formats strfmt.Registry) error {

	if err := validate.Required("current", "body", m.Current); err != nil {
		return err
	}

	if m.Current != nil {
		if err := m.Current.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) validateIsoCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("iso_currency_code", "body", m.IsoCurrencyCode); err != nil {
		return err
	}

	if m.IsoCurrencyCode != nil {
		if err := m.IsoCurrencyCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iso_currency_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iso_currency_code")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) validateLastUpdatedDatetime(formats strfmt.Registry) error {

	if err := validate.Required("last_updated_datetime", "body", m.LastUpdatedDatetime); err != nil {
		return err
	}

	if m.LastUpdatedDatetime != nil {
		if err := m.LastUpdatedDatetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_updated_datetime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_updated_datetime")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	if m.Limit != nil {
		if err := m.Limit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("limit")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) validateUnofficialCurrencyCode(formats strfmt.Registry) error {

	if err := validate.Required("unofficial_currency_code", "body", m.UnofficialCurrencyCode); err != nil {
		return err
	}

	if m.UnofficialCurrencyCode != nil {
		if err := m.UnofficialCurrencyCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unofficial_currency_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unofficial_currency_code")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this account balance based on the context it is used
func (m *AccountBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsoCurrencyCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedDatetime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnofficialCurrencyCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountBalance) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *AccountBalance) contextValidateAvailable(ctx context.Context, formats strfmt.Registry) error {

	if m.Available != nil {
		if err := m.Available.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("available")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("available")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) contextValidateCurrent(ctx context.Context, formats strfmt.Registry) error {

	if m.Current != nil {
		if err := m.Current.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) contextValidateIsoCurrencyCode(ctx context.Context, formats strfmt.Registry) error {

	if m.IsoCurrencyCode != nil {
		if err := m.IsoCurrencyCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iso_currency_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iso_currency_code")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) contextValidateLastUpdatedDatetime(ctx context.Context, formats strfmt.Registry) error {

	if m.LastUpdatedDatetime != nil {
		if err := m.LastUpdatedDatetime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_updated_datetime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_updated_datetime")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) contextValidateLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.Limit != nil {
		if err := m.Limit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("limit")
			}
			return err
		}
	}

	return nil
}

func (m *AccountBalance) contextValidateUnofficialCurrencyCode(ctx context.Context, formats strfmt.Registry) error {

	if m.UnofficialCurrencyCode != nil {
		if err := m.UnofficialCurrencyCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unofficial_currency_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unofficial_currency_code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountBalance) UnmarshalBinary(b []byte) error {
	var res AccountBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
