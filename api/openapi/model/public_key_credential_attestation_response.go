// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicKeyCredentialAttestationResponse WebAuthn API response to a navigator.credentials.create() call
//
// swagger:model PublicKeyCredentialAttestationResponse
type PublicKeyCredentialAttestationResponse struct {

	// id
	// Example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...
	ID string `json:"id,omitempty"`

	// raw Id
	// Example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...
	RawID string `json:"rawId,omitempty"`

	// response
	Response *PublicKeyCredentialAttestationResponseResponse `json:"response,omitempty"`

	// type
	// Example: public-key
	// Enum: [public-key]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *PublicKeyCredentialAttestationResponse) UnmarshalJSON(data []byte) error {
	var props struct {

		// id
		// Example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...
		ID string `json:"id,omitempty"`

		// raw Id
		// Example: _18q6IjW09tiM4NSbsZjocUtGx00Muv5mN6LZCelCMDD...
		RawID string `json:"rawId,omitempty"`

		// response
		Response *PublicKeyCredentialAttestationResponseResponse `json:"response,omitempty"`

		// type
		// Example: public-key
		// Enum: [public-key]
		Type string `json:"type,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.ID = props.ID
	m.RawID = props.RawID
	m.Response = props.Response
	m.Type = props.Type
	return nil
}

// Validate validates this public key credential attestation response
func (m *PublicKeyCredentialAttestationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicKeyCredentialAttestationResponse) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

var publicKeyCredentialAttestationResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public-key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicKeyCredentialAttestationResponseTypeTypePropEnum = append(publicKeyCredentialAttestationResponseTypeTypePropEnum, v)
	}
}

const (

	// PublicKeyCredentialAttestationResponseTypePublicDashKey captures enum value "public-key"
	PublicKeyCredentialAttestationResponseTypePublicDashKey string = "public-key"
)

// prop value enum
func (m *PublicKeyCredentialAttestationResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicKeyCredentialAttestationResponseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicKeyCredentialAttestationResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this public key credential attestation response based on the context it is used
func (m *PublicKeyCredentialAttestationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicKeyCredentialAttestationResponse) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if m.Response != nil {
		if err := m.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicKeyCredentialAttestationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicKeyCredentialAttestationResponse) UnmarshalBinary(b []byte) error {
	var res PublicKeyCredentialAttestationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublicKeyCredentialAttestationResponseResponse public key credential attestation response response
//
// swagger:model PublicKeyCredentialAttestationResponseResponse
type PublicKeyCredentialAttestationResponseResponse struct {

	// attestation object
	// Example: o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YVjfSZYN...
	AttestationObject string `json:"attestationObject,omitempty"`

	// client data Json
	// Example: eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdl...
	ClientDataJSON string `json:"clientDataJson,omitempty"`

	// transports
	// Example: internal
	// Enum: [usb nfc ble internal]
	Transports string `json:"transports,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *PublicKeyCredentialAttestationResponseResponse) UnmarshalJSON(data []byte) error {
	var props struct {

		// attestation object
		// Example: o2NmbXRkbm9uZWdhdHRTdG10oGhhdXRoRGF0YVjfSZYN...
		AttestationObject string `json:"attestationObject,omitempty"`

		// client data Json
		// Example: eyJ0eXBlIjoid2ViYXV0aG4uZ2V0IiwiY2hhbGxlbmdl...
		ClientDataJSON string `json:"clientDataJson,omitempty"`

		// transports
		// Example: internal
		// Enum: [usb nfc ble internal]
		Transports string `json:"transports,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.AttestationObject = props.AttestationObject
	m.ClientDataJSON = props.ClientDataJSON
	m.Transports = props.Transports
	return nil
}

// Validate validates this public key credential attestation response response
func (m *PublicKeyCredentialAttestationResponseResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var publicKeyCredentialAttestationResponseResponseTypeTransportsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["usb","nfc","ble","internal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicKeyCredentialAttestationResponseResponseTypeTransportsPropEnum = append(publicKeyCredentialAttestationResponseResponseTypeTransportsPropEnum, v)
	}
}

const (

	// PublicKeyCredentialAttestationResponseResponseTransportsUsb captures enum value "usb"
	PublicKeyCredentialAttestationResponseResponseTransportsUsb string = "usb"

	// PublicKeyCredentialAttestationResponseResponseTransportsNfc captures enum value "nfc"
	PublicKeyCredentialAttestationResponseResponseTransportsNfc string = "nfc"

	// PublicKeyCredentialAttestationResponseResponseTransportsBle captures enum value "ble"
	PublicKeyCredentialAttestationResponseResponseTransportsBle string = "ble"

	// PublicKeyCredentialAttestationResponseResponseTransportsInternal captures enum value "internal"
	PublicKeyCredentialAttestationResponseResponseTransportsInternal string = "internal"
)

// prop value enum
func (m *PublicKeyCredentialAttestationResponseResponse) validateTransportsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicKeyCredentialAttestationResponseResponseTypeTransportsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicKeyCredentialAttestationResponseResponse) validateTransports(formats strfmt.Registry) error {
	if swag.IsZero(m.Transports) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransportsEnum("response"+"."+"transports", "body", m.Transports); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this public key credential attestation response response based on context it is used
func (m *PublicKeyCredentialAttestationResponseResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublicKeyCredentialAttestationResponseResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicKeyCredentialAttestationResponseResponse) UnmarshalBinary(b []byte) error {
	var res PublicKeyCredentialAttestationResponseResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
