// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NumbersBACS NumbersBACS
//
// swagger:model NumbersBACS
type NumbersBACS struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// account
	// Required: true
	Account *string `json:"account"`

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// sort code
	// Required: true
	SortCode *string `json:"sort_code"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *NumbersBACS) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// account
		// Required: true
		Account *string `json:"account"`

		// account id
		// Required: true
		AccountID *string `json:"account_id"`

		// sort code
		// Required: true
		SortCode *string `json:"sort_code"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Account = props.Account
	m.AccountID = props.AccountID
	m.SortCode = props.SortCode
	return nil
}

// Validate validates this numbers b a c s
func (m *NumbersBACS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NumbersBACS) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	return nil
}

func (m *NumbersBACS) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *NumbersBACS) validateSortCode(formats strfmt.Registry) error {

	if err := validate.Required("sort_code", "body", m.SortCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this numbers b a c s based on the context it is used
func (m *NumbersBACS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NumbersBACS) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NumbersBACS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NumbersBACS) UnmarshalBinary(b []byte) error {
	var res NumbersBACS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
