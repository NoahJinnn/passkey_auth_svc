// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetIdentityResp GetIdentityResp
//
// swagger:model GetIdentityResp
type GetIdentityResp struct {

	// identity
	// Required: true
	Identity []*AccountIdentity `json:"identity"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *GetIdentityResp) UnmarshalJSON(data []byte) error {
	var props struct {

		// identity
		// Required: true
		Identity []*AccountIdentity `json:"identity"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Identity = props.Identity
	return nil
}

// Validate validates this get identity resp
func (m *GetIdentityResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetIdentityResp) validateIdentity(formats strfmt.Registry) error {

	if err := validate.Required("identity", "body", m.Identity); err != nil {
		return err
	}

	for i := 0; i < len(m.Identity); i++ {
		if swag.IsZero(m.Identity[i]) { // not required
			continue
		}

		if m.Identity[i] != nil {
			if err := m.Identity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get identity resp based on the context it is used
func (m *GetIdentityResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetIdentityResp) contextValidateIdentity(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Identity); i++ {

		if m.Identity[i] != nil {
			if err := m.Identity[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("identity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("identity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetIdentityResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetIdentityResp) UnmarshalBinary(b []byte) error {
	var res GetIdentityResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
