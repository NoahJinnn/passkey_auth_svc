// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NumbersACH NumbersACH
//
// swagger:model NumbersACH
type NumbersACH struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// account
	// Required: true
	Account *string `json:"account"`

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// routing
	// Required: true
	Routing *string `json:"routing"`

	// wire routing
	// Required: true
	WireRouting *NullableString `json:"wire_routing"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *NumbersACH) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// account
		// Required: true
		Account *string `json:"account"`

		// account id
		// Required: true
		AccountID *string `json:"account_id"`

		// routing
		// Required: true
		Routing *string `json:"routing"`

		// wire routing
		// Required: true
		WireRouting *NullableString `json:"wire_routing"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Account = props.Account
	m.AccountID = props.AccountID
	m.Routing = props.Routing
	m.WireRouting = props.WireRouting
	return nil
}

// Validate validates this numbers a c h
func (m *NumbersACH) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouting(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWireRouting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NumbersACH) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	return nil
}

func (m *NumbersACH) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *NumbersACH) validateRouting(formats strfmt.Registry) error {

	if err := validate.Required("routing", "body", m.Routing); err != nil {
		return err
	}

	return nil
}

func (m *NumbersACH) validateWireRouting(formats strfmt.Registry) error {

	if err := validate.Required("wire_routing", "body", m.WireRouting); err != nil {
		return err
	}

	if m.WireRouting != nil {
		if err := m.WireRouting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wire_routing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wire_routing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this numbers a c h based on the context it is used
func (m *NumbersACH) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWireRouting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NumbersACH) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *NumbersACH) contextValidateWireRouting(ctx context.Context, formats strfmt.Registry) error {

	if m.WireRouting != nil {
		if err := m.WireRouting.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wire_routing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wire_routing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NumbersACH) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NumbersACH) UnmarshalBinary(b []byte) error {
	var res NumbersACH
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
