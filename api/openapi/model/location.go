// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Location Location
//
// swagger:model Location
type Location struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// address
	// Required: true
	Address *NullableString `json:"address"`

	// city
	// Required: true
	City *NullableString `json:"city"`

	// country
	// Required: true
	Country *NullableString `json:"country"`

	// lat
	// Required: true
	Lat *NullableFloat64 `json:"lat"`

	// lon
	// Required: true
	Lon *NullableFloat64 `json:"lon"`

	// postal code
	// Required: true
	PostalCode *NullableString `json:"postal_code"`

	// region
	// Required: true
	Region *NullableString `json:"region"`

	// store number
	// Required: true
	StoreNumber *NullableString `json:"store_number"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *Location) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// address
		// Required: true
		Address *NullableString `json:"address"`

		// city
		// Required: true
		City *NullableString `json:"city"`

		// country
		// Required: true
		Country *NullableString `json:"country"`

		// lat
		// Required: true
		Lat *NullableFloat64 `json:"lat"`

		// lon
		// Required: true
		Lon *NullableFloat64 `json:"lon"`

		// postal code
		// Required: true
		PostalCode *NullableString `json:"postal_code"`

		// region
		// Required: true
		Region *NullableString `json:"region"`

		// store number
		// Required: true
		StoreNumber *NullableString `json:"store_number"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Address = props.Address
	m.City = props.City
	m.Country = props.Country
	m.Lat = props.Lat
	m.Lon = props.Lon
	m.PostalCode = props.PostalCode
	m.Region = props.Region
	m.StoreNumber = props.StoreNumber
	return nil
}

// Validate validates this location
func (m *Location) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	if m.City != nil {
		if err := m.City.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("city")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("city")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	if m.Country != nil {
		if err := m.Country.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateLat(formats strfmt.Registry) error {

	if err := validate.Required("lat", "body", m.Lat); err != nil {
		return err
	}

	if m.Lat != nil {
		if err := m.Lat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lat")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateLon(formats strfmt.Registry) error {

	if err := validate.Required("lon", "body", m.Lon); err != nil {
		return err
	}

	if m.Lon != nil {
		if err := m.Lon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lon")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postal_code", "body", m.PostalCode); err != nil {
		return err
	}

	if m.PostalCode != nil {
		if err := m.PostalCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postal_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postal_code")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *Location) validateStoreNumber(formats strfmt.Registry) error {

	if err := validate.Required("store_number", "body", m.StoreNumber); err != nil {
		return err
	}

	if m.StoreNumber != nil {
		if err := m.StoreNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("store_number")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("store_number")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this location based on the context it is used
func (m *Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoreNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *Location) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateCity(ctx context.Context, formats strfmt.Registry) error {

	if m.City != nil {
		if err := m.City.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("city")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("city")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateCountry(ctx context.Context, formats strfmt.Registry) error {

	if m.Country != nil {
		if err := m.Country.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("country")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("country")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateLat(ctx context.Context, formats strfmt.Registry) error {

	if m.Lat != nil {
		if err := m.Lat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lat")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateLon(ctx context.Context, formats strfmt.Registry) error {

	if m.Lon != nil {
		if err := m.Lon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lon")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidatePostalCode(ctx context.Context, formats strfmt.Registry) error {

	if m.PostalCode != nil {
		if err := m.PostalCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postal_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postal_code")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {
		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *Location) contextValidateStoreNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.StoreNumber != nil {
		if err := m.StoreNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("store_number")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("store_number")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Location) UnmarshalBinary(b []byte) error {
	var res Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
