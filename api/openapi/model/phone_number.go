// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhoneNumber PhoneNumber
//
// swagger:model PhoneNumber
type PhoneNumber struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// data
	// Required: true
	Data *string `json:"data"`

	// primary
	// Required: true
	Primary bool `json:"primary"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *PhoneNumber) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// data
		// Required: true
		Data *string `json:"data"`

		// primary
		// Required: true
		Primary bool `json:"primary"`

		// type
		// Required: true
		Type *string `json:"type"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Data = props.Data
	m.Primary = props.Primary
	m.Type = props.Type
	return nil
}

// Validate validates this phone number
func (m *PhoneNumber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhoneNumber) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *PhoneNumber) validatePrimary(formats strfmt.Registry) error {

	if err := validate.Required("primary", "body", bool(m.Primary)); err != nil {
		return err
	}

	return nil
}

func (m *PhoneNumber) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this phone number based on the context it is used
func (m *PhoneNumber) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhoneNumber) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhoneNumber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhoneNumber) UnmarshalBinary(b []byte) error {
	var res PhoneNumber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
