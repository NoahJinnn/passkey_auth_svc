// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthGetNumbers AuthGetNumbers
//
// swagger:model AuthGetNumbers
type AuthGetNumbers struct {

	//
	Empty AdditionalProperties `json:",omitempty"`

	// ach
	// Required: true
	Ach []*NumbersACH `json:"ach"`

	// bacs
	// Required: true
	Bacs []*NumbersBACS `json:"bacs"`

	// eft
	// Required: true
	Eft []*NumbersEFT `json:"eft"`

	// international
	// Required: true
	International []*NumbersInternational `json:"international"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (m *AuthGetNumbers) UnmarshalJSON(data []byte) error {
	var props struct {

		//
		Empty AdditionalProperties `json:",omitempty"`

		// ach
		// Required: true
		Ach []*NumbersACH `json:"ach"`

		// bacs
		// Required: true
		Bacs []*NumbersBACS `json:"bacs"`

		// eft
		// Required: true
		Eft []*NumbersEFT `json:"eft"`

		// international
		// Required: true
		International []*NumbersInternational `json:"international"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	m.Empty = props.Empty
	m.Ach = props.Ach
	m.Bacs = props.Bacs
	m.Eft = props.Eft
	m.International = props.International
	return nil
}

// Validate validates this auth get numbers
func (m *AuthGetNumbers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBacs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternational(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthGetNumbers) validateAch(formats strfmt.Registry) error {

	if err := validate.Required("ach", "body", m.Ach); err != nil {
		return err
	}

	for i := 0; i < len(m.Ach); i++ {
		if swag.IsZero(m.Ach[i]) { // not required
			continue
		}

		if m.Ach[i] != nil {
			if err := m.Ach[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ach" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGetNumbers) validateBacs(formats strfmt.Registry) error {

	if err := validate.Required("bacs", "body", m.Bacs); err != nil {
		return err
	}

	for i := 0; i < len(m.Bacs); i++ {
		if swag.IsZero(m.Bacs[i]) { // not required
			continue
		}

		if m.Bacs[i] != nil {
			if err := m.Bacs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bacs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bacs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGetNumbers) validateEft(formats strfmt.Registry) error {

	if err := validate.Required("eft", "body", m.Eft); err != nil {
		return err
	}

	for i := 0; i < len(m.Eft); i++ {
		if swag.IsZero(m.Eft[i]) { // not required
			continue
		}

		if m.Eft[i] != nil {
			if err := m.Eft[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eft" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eft" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGetNumbers) validateInternational(formats strfmt.Registry) error {

	if err := validate.Required("international", "body", m.International); err != nil {
		return err
	}

	for i := 0; i < len(m.International); i++ {
		if swag.IsZero(m.International[i]) { // not required
			continue
		}

		if m.International[i] != nil {
			if err := m.International[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("international" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("international" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this auth get numbers based on the context it is used
func (m *AuthGetNumbers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmpty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBacs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInternational(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthGetNumbers) contextValidateEmpty(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Empty.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("")
		}
		return err
	}

	return nil
}

func (m *AuthGetNumbers) contextValidateAch(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ach); i++ {

		if m.Ach[i] != nil {
			if err := m.Ach[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ach" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGetNumbers) contextValidateBacs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bacs); i++ {

		if m.Bacs[i] != nil {
			if err := m.Bacs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bacs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bacs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGetNumbers) contextValidateEft(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Eft); i++ {

		if m.Eft[i] != nil {
			if err := m.Eft[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eft" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eft" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGetNumbers) contextValidateInternational(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.International); i++ {

		if m.International[i] != nil {
			if err := m.International[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("international" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("international" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthGetNumbers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthGetNumbers) UnmarshalBinary(b []byte) error {
	var res AuthGetNumbers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
