// Code generated by go-swagger; DO NOT EDIT.

package web_authn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WebauthnLoginFinalHandlerFunc turns a function with the right signature into a webauthn login final handler
type WebauthnLoginFinalHandlerFunc func(WebauthnLoginFinalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebauthnLoginFinalHandlerFunc) Handle(params WebauthnLoginFinalParams) middleware.Responder {
	return fn(params)
}

// WebauthnLoginFinalHandler interface for that can handle valid webauthn login final params
type WebauthnLoginFinalHandler interface {
	Handle(WebauthnLoginFinalParams) middleware.Responder
}

// NewWebauthnLoginFinal creates a new http.Handler for the webauthn login final operation
func NewWebauthnLoginFinal(ctx *middleware.Context, handler WebauthnLoginFinalHandler) *WebauthnLoginFinal {
	return &WebauthnLoginFinal{Context: ctx, Handler: handler}
}

/*
	WebauthnLoginFinal swagger:route POST /webauthn/login/finalize WebAuthn webauthnLoginFinal

# Finalize WebAuthn login

Finalize a login with Webauthn using the WebAuthn API response to a `navigator.credentials.get()` call.
*/
type WebauthnLoginFinal struct {
	Context *middleware.Context
	Handler WebauthnLoginFinalHandler
}

func (o *WebauthnLoginFinal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebauthnLoginFinalParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
