// Code generated by go-swagger; DO NOT EDIT.

package web_authn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/hellohq/hqservice/api/openapi/model"
)

// WebauthnLoginFinalOKCode is the HTTP code returned for type WebauthnLoginFinalOK
const WebauthnLoginFinalOKCode int = 200

/*
WebauthnLoginFinalOK Successful login

swagger:response webauthnLoginFinalOK
*/
type WebauthnLoginFinalOK struct {
	/*Contains the JSON Web Token (JWT) that must be provided to protected endpoints.
	Cookie attributes (e.g. domain) can be set via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.cookie`.
	Value `<JWT>` is a [JSON Web Token](https://www.rfc-editor.org/rfc/rfc7519.html)


	*/
	SetCookie string `json:"Set-Cookie"`
	/*Present only when enabled via [configuration](https://github.com/teamhanko/hanko/blob/main/backend/docs/Config.md#hanko-backend-config) option `session.enable_auth_token_header`
	for purposes of cross-domain communication between client and Hanko API.


	*/
	XAuthToken string `json:"X-Auth-Token"`

	/*
	  In: Body
	*/
	Payload *model.WebauthnLoginResponse `json:"body,omitempty"`
}

// NewWebauthnLoginFinalOK creates WebauthnLoginFinalOK with default headers values
func NewWebauthnLoginFinalOK() *WebauthnLoginFinalOK {

	return &WebauthnLoginFinalOK{}
}

// WithSetCookie adds the setCookie to the webauthn login final o k response
func (o *WebauthnLoginFinalOK) WithSetCookie(setCookie string) *WebauthnLoginFinalOK {
	o.SetCookie = setCookie
	return o
}

// SetSetCookie sets the setCookie to the webauthn login final o k response
func (o *WebauthnLoginFinalOK) SetSetCookie(setCookie string) {
	o.SetCookie = setCookie
}

// WithXAuthToken adds the xAuthToken to the webauthn login final o k response
func (o *WebauthnLoginFinalOK) WithXAuthToken(xAuthToken string) *WebauthnLoginFinalOK {
	o.XAuthToken = xAuthToken
	return o
}

// SetXAuthToken sets the xAuthToken to the webauthn login final o k response
func (o *WebauthnLoginFinalOK) SetXAuthToken(xAuthToken string) {
	o.XAuthToken = xAuthToken
}

// WithPayload adds the payload to the webauthn login final o k response
func (o *WebauthnLoginFinalOK) WithPayload(payload *model.WebauthnLoginResponse) *WebauthnLoginFinalOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the webauthn login final o k response
func (o *WebauthnLoginFinalOK) SetPayload(payload *model.WebauthnLoginResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WebauthnLoginFinalOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Set-Cookie

	setCookie := o.SetCookie
	if setCookie != "" {
		rw.Header().Set("Set-Cookie", setCookie)
	}

	// response header X-Auth-Token

	xAuthToken := o.XAuthToken
	if xAuthToken != "" {
		rw.Header().Set("X-Auth-Token", xAuthToken)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
