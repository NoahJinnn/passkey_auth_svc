// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hellohq/hqservice/api/openapi/model"
)

// WebauthnLoginInitHandlerFunc turns a function with the right signature into a webauthn login init handler
type WebauthnLoginInitHandlerFunc func(WebauthnLoginInitParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WebauthnLoginInitHandlerFunc) Handle(params WebauthnLoginInitParams) middleware.Responder {
	return fn(params)
}

// WebauthnLoginInitHandler interface for that can handle valid webauthn login init params
type WebauthnLoginInitHandler interface {
	Handle(WebauthnLoginInitParams) middleware.Responder
}

// NewWebauthnLoginInit creates a new http.Handler for the webauthn login init operation
func NewWebauthnLoginInit(ctx *middleware.Context, handler WebauthnLoginInitHandler) *WebauthnLoginInit {
	return &WebauthnLoginInit{Context: ctx, Handler: handler}
}

/*
	WebauthnLoginInit swagger:route POST /webauthn/login/initialize webauthnLoginInit

# Initialize WebAuthn login

Initialize a login with Webauthn. Returns a JSON representation of CredentialRequestOptions for use
with the Webauthn API's `navigator.credentials.get()`.

Omitting the optional request body or using an empty JSON object results in generation of request options for a
login using a [discoverable credential](https://www.w3.org/TR/webauthn-2/#client-side-discoverable-public-key-credential-source)
(i.e. they will not contain
[allowCredentials](https://www.w3.org/TR/webauthn-2/#dom-publickeycredentialrequestoptions-allowcredentials)).
*/
type WebauthnLoginInit struct {
	Context *middleware.Context
	Handler WebauthnLoginInitHandler
}

func (o *WebauthnLoginInit) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebauthnLoginInitParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WebauthnLoginInitBody webauthn login init body
//
// swagger:model WebauthnLoginInitBody
type WebauthnLoginInitBody struct {

	// The ID of the user on whose behalf WebAuthn login should be performed
	UserID struct {
		model.UUID4
	} `json:"user_id,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *WebauthnLoginInitBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// The ID of the user on whose behalf WebAuthn login should be performed
		UserID struct {
			model.UUID4
		} `json:"user_id,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.UserID = props.UserID
	return nil
}

// Validate validates this webauthn login init body
func (o *WebauthnLoginInitBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WebauthnLoginInitBody) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(o.UserID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this webauthn login init body based on the context it is used
func (o *WebauthnLoginInitBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WebauthnLoginInitBody) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (o *WebauthnLoginInitBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WebauthnLoginInitBody) UnmarshalBinary(b []byte) error {
	var res WebauthnLoginInitBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
