// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hellohq/hqservice/api/openapi/model"
)

// WebauthnRegFinalHandlerFunc turns a function with the right signature into a webauthn reg final handler
type WebauthnRegFinalHandlerFunc func(WebauthnRegFinalParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn WebauthnRegFinalHandlerFunc) Handle(params WebauthnRegFinalParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// WebauthnRegFinalHandler interface for that can handle valid webauthn reg final params
type WebauthnRegFinalHandler interface {
	Handle(WebauthnRegFinalParams, interface{}) middleware.Responder
}

// NewWebauthnRegFinal creates a new http.Handler for the webauthn reg final operation
func NewWebauthnRegFinal(ctx *middleware.Context, handler WebauthnRegFinalHandler) *WebauthnRegFinal {
	return &WebauthnRegFinal{Context: ctx, Handler: handler}
}

/*
	WebauthnRegFinal swagger:route POST /webauthn/registration/finalize webauthnRegFinal

# Finalize WebAuthn registration

Finalize a registration with Webauthn using the WebAuthn API response to a `navigator.credentials.create()` call.
*/
type WebauthnRegFinal struct {
	Context *middleware.Context
	Handler WebauthnRegFinalHandler
}

func (o *WebauthnRegFinal) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewWebauthnRegFinalParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WebauthnRegFinalOKBody webauthn reg final o k body
//
// swagger:model WebauthnRegFinalOKBody
type WebauthnRegFinalOKBody struct {

	// The ID of the created credential
	CredentialID string `json:"credential_id,omitempty"`

	// The ID of the user on whose behalf a credential was created
	UserID struct {
		model.UUID4
	} `json:"user_id,omitempty"`
}

// UnmarshalJSON unmarshals this object while disallowing additional properties from JSON
func (o *WebauthnRegFinalOKBody) UnmarshalJSON(data []byte) error {
	var props struct {

		// The ID of the created credential
		CredentialID string `json:"credential_id,omitempty"`

		// The ID of the user on whose behalf a credential was created
		UserID struct {
			model.UUID4
		} `json:"user_id,omitempty"`
	}

	dec := json.NewDecoder(bytes.NewReader(data))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&props); err != nil {
		return err
	}

	o.CredentialID = props.CredentialID
	o.UserID = props.UserID
	return nil
}

// Validate validates this webauthn reg final o k body
func (o *WebauthnRegFinalOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WebauthnRegFinalOKBody) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(o.UserID) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this webauthn reg final o k body based on the context it is used
func (o *WebauthnRegFinalOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WebauthnRegFinalOKBody) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (o *WebauthnRegFinalOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WebauthnRegFinalOKBody) UnmarshalBinary(b []byte) error {
	var res WebauthnRegFinalOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
