// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LinkTokenCreateHandlerFunc turns a function with the right signature into a link token create handler
type LinkTokenCreateHandlerFunc func(LinkTokenCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LinkTokenCreateHandlerFunc) Handle(params LinkTokenCreateParams) middleware.Responder {
	return fn(params)
}

// LinkTokenCreateHandler interface for that can handle valid link token create params
type LinkTokenCreateHandler interface {
	Handle(LinkTokenCreateParams) middleware.Responder
}

// NewLinkTokenCreate creates a new http.Handler for the link token create operation
func NewLinkTokenCreate(ctx *middleware.Context, handler LinkTokenCreateHandler) *LinkTokenCreate {
	return &LinkTokenCreate{Context: ctx, Handler: handler}
}

/*
	LinkTokenCreate swagger:route POST /create_link_token linkTokenCreate

LinkTokenCreate link token create API
*/
type LinkTokenCreate struct {
	Context *middleware.Context
	Handler LinkTokenCreateHandler
}

func (o *LinkTokenCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewLinkTokenCreateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
