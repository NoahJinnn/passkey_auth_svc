// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package app is a generated GoMock package.
package app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	plaid "github.com/plaid/plaid-go/v3/plaid"
)

// MockAppl is a mock of Appl interface.
type MockAppl struct {
	ctrl     *gomock.Controller
	recorder *MockApplMockRecorder
}

// MockApplMockRecorder is the mock recorder for MockAppl.
type MockApplMockRecorder struct {
	mock *MockAppl
}

// NewMockAppl creates a new mock instance.
func NewMockAppl(ctrl *gomock.Controller) *MockAppl {
	mock := &MockAppl{ctrl: ctrl}
	mock.recorder = &MockApplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppl) EXPECT() *MockApplMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAppl) CreateUser(ctx Ctx, u *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockApplMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAppl)(nil).CreateUser), ctx, u)
}

// GetAccessToken mocks base method.
func (m *MockAppl) GetAccessToken(ctx Ctx, publicToken string) (*GetAccessTokenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx, publicToken)
	ret0, _ := ret[0].(*GetAccessTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockApplMockRecorder) GetAccessToken(ctx, publicToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockAppl)(nil).GetAccessToken), ctx, publicToken)
}

// GetAccounts mocks base method.
func (m *MockAppl) GetAccounts(ctx Ctx) (*GetAccountsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx)
	ret0, _ := ret[0].(*GetAccountsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockApplMockRecorder) GetAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockAppl)(nil).GetAccounts), ctx)
}

// GetAllUsers mocks base method.
func (m *MockAppl) GetAllUsers(ctx Ctx) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockApplMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockAppl)(nil).GetAllUsers), ctx)
}

// GetAuthAccount mocks base method.
func (m *MockAppl) GetAuthAccount(ctx Ctx) (*GetAuthAccountResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthAccount", ctx)
	ret0, _ := ret[0].(*GetAuthAccountResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthAccount indicates an expected call of GetAuthAccount.
func (mr *MockApplMockRecorder) GetAuthAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthAccount", reflect.TypeOf((*MockAppl)(nil).GetAuthAccount), ctx)
}

// GetBalance mocks base method.
func (m *MockAppl) GetBalance(ctx Ctx) (*GetAccountsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx)
	ret0, _ := ret[0].(*GetAccountsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockApplMockRecorder) GetBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAppl)(nil).GetBalance), ctx)
}

// GetIdentity mocks base method.
func (m *MockAppl) GetIdentity(ctx Ctx) (*GetIdentityResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", ctx)
	ret0, _ := ret[0].(*GetIdentityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockApplMockRecorder) GetIdentity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockAppl)(nil).GetIdentity), ctx)
}

// GetSandboxAccessToken mocks base method.
func (m *MockAppl) GetSandboxAccessToken(ctx Ctx, institutionID string) (*GetAccessTokenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSandboxAccessToken", ctx, institutionID)
	ret0, _ := ret[0].(*GetAccessTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSandboxAccessToken indicates an expected call of GetSandboxAccessToken.
func (mr *MockApplMockRecorder) GetSandboxAccessToken(ctx, institutionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSandboxAccessToken", reflect.TypeOf((*MockAppl)(nil).GetSandboxAccessToken), ctx, institutionID)
}

// GetTransactions mocks base method.
func (m *MockAppl) GetTransactions(ctx Ctx) (*GetTransactionsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx)
	ret0, _ := ret[0].(*GetTransactionsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockApplMockRecorder) GetTransactions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockAppl)(nil).GetTransactions), ctx)
}

// GetUserById mocks base method.
func (m *MockAppl) GetUserById(ctx Ctx, id uint) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockApplMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAppl)(nil).GetUserById), ctx, id)
}

// HealthCheck mocks base method.
func (m *MockAppl) HealthCheck(arg0 Ctx) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockApplMockRecorder) HealthCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAppl)(nil).HealthCheck), arg0)
}

// Info mocks base method.
func (m *MockAppl) Info() *GetInfoResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*GetInfoResp)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockApplMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAppl)(nil).Info))
}

// LinkTokenCreate mocks base method.
func (m *MockAppl) LinkTokenCreate(ctx Ctx, paymentInitiation *plaid.LinkTokenCreateRequestPaymentInitiation) (*LinkTokenCreateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkTokenCreate", ctx, paymentInitiation)
	ret0, _ := ret[0].(*LinkTokenCreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkTokenCreate indicates an expected call of LinkTokenCreate.
func (mr *MockApplMockRecorder) LinkTokenCreate(ctx, paymentInitiation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkTokenCreate", reflect.TypeOf((*MockAppl)(nil).LinkTokenCreate), ctx, paymentInitiation)
}

// UpdateUser mocks base method.
func (m *MockAppl) UpdateUser(ctx Ctx, u *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockApplMockRecorder) UpdateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAppl)(nil).UpdateUser), ctx, u)
}

// MockIPlaidSvc is a mock of IPlaidSvc interface.
type MockIPlaidSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIPlaidSvcMockRecorder
}

// MockIPlaidSvcMockRecorder is the mock recorder for MockIPlaidSvc.
type MockIPlaidSvcMockRecorder struct {
	mock *MockIPlaidSvc
}

// NewMockIPlaidSvc creates a new mock instance.
func NewMockIPlaidSvc(ctrl *gomock.Controller) *MockIPlaidSvc {
	mock := &MockIPlaidSvc{ctrl: ctrl}
	mock.recorder = &MockIPlaidSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlaidSvc) EXPECT() *MockIPlaidSvcMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockIPlaidSvc) GetAccessToken(ctx Ctx, publicToken string) (*GetAccessTokenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx, publicToken)
	ret0, _ := ret[0].(*GetAccessTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockIPlaidSvcMockRecorder) GetAccessToken(ctx, publicToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockIPlaidSvc)(nil).GetAccessToken), ctx, publicToken)
}

// GetAccounts mocks base method.
func (m *MockIPlaidSvc) GetAccounts(ctx Ctx) (*GetAccountsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx)
	ret0, _ := ret[0].(*GetAccountsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockIPlaidSvcMockRecorder) GetAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockIPlaidSvc)(nil).GetAccounts), ctx)
}

// GetAuthAccount mocks base method.
func (m *MockIPlaidSvc) GetAuthAccount(ctx Ctx) (*GetAuthAccountResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthAccount", ctx)
	ret0, _ := ret[0].(*GetAuthAccountResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthAccount indicates an expected call of GetAuthAccount.
func (mr *MockIPlaidSvcMockRecorder) GetAuthAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthAccount", reflect.TypeOf((*MockIPlaidSvc)(nil).GetAuthAccount), ctx)
}

// GetBalance mocks base method.
func (m *MockIPlaidSvc) GetBalance(ctx Ctx) (*GetAccountsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx)
	ret0, _ := ret[0].(*GetAccountsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIPlaidSvcMockRecorder) GetBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIPlaidSvc)(nil).GetBalance), ctx)
}

// GetIdentity mocks base method.
func (m *MockIPlaidSvc) GetIdentity(ctx Ctx) (*GetIdentityResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", ctx)
	ret0, _ := ret[0].(*GetIdentityResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockIPlaidSvcMockRecorder) GetIdentity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockIPlaidSvc)(nil).GetIdentity), ctx)
}

// GetSandboxAccessToken mocks base method.
func (m *MockIPlaidSvc) GetSandboxAccessToken(ctx Ctx, institutionID string) (*GetAccessTokenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSandboxAccessToken", ctx, institutionID)
	ret0, _ := ret[0].(*GetAccessTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSandboxAccessToken indicates an expected call of GetSandboxAccessToken.
func (mr *MockIPlaidSvcMockRecorder) GetSandboxAccessToken(ctx, institutionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSandboxAccessToken", reflect.TypeOf((*MockIPlaidSvc)(nil).GetSandboxAccessToken), ctx, institutionID)
}

// GetTransactions mocks base method.
func (m *MockIPlaidSvc) GetTransactions(ctx Ctx) (*GetTransactionsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx)
	ret0, _ := ret[0].(*GetTransactionsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockIPlaidSvcMockRecorder) GetTransactions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockIPlaidSvc)(nil).GetTransactions), ctx)
}

// Info mocks base method.
func (m *MockIPlaidSvc) Info() *GetInfoResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*GetInfoResp)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockIPlaidSvcMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockIPlaidSvc)(nil).Info))
}

// LinkTokenCreate mocks base method.
func (m *MockIPlaidSvc) LinkTokenCreate(ctx Ctx, paymentInitiation *plaid.LinkTokenCreateRequestPaymentInitiation) (*LinkTokenCreateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkTokenCreate", ctx, paymentInitiation)
	ret0, _ := ret[0].(*LinkTokenCreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkTokenCreate indicates an expected call of LinkTokenCreate.
func (mr *MockIPlaidSvcMockRecorder) LinkTokenCreate(ctx, paymentInitiation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkTokenCreate", reflect.TypeOf((*MockIPlaidSvc)(nil).LinkTokenCreate), ctx, paymentInitiation)
}

// MockIUserSvc is a mock of IUserSvc interface.
type MockIUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockIUserSvcMockRecorder
}

// MockIUserSvcMockRecorder is the mock recorder for MockIUserSvc.
type MockIUserSvcMockRecorder struct {
	mock *MockIUserSvc
}

// NewMockIUserSvc creates a new mock instance.
func NewMockIUserSvc(ctrl *gomock.Controller) *MockIUserSvc {
	mock := &MockIUserSvc{ctrl: ctrl}
	mock.recorder = &MockIUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserSvc) EXPECT() *MockIUserSvcMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserSvc) CreateUser(ctx Ctx, u *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserSvcMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserSvc)(nil).CreateUser), ctx, u)
}

// GetAllUsers mocks base method.
func (m *MockIUserSvc) GetAllUsers(ctx Ctx) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIUserSvcMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIUserSvc)(nil).GetAllUsers), ctx)
}

// GetUserById mocks base method.
func (m *MockIUserSvc) GetUserById(ctx Ctx, id uint) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserSvcMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserSvc)(nil).GetUserById), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockIUserSvc) UpdateUser(ctx Ctx, u *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserSvcMockRecorder) UpdateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserSvc)(nil).UpdateUser), ctx, u)
}

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepo) CreateUser(ctx Ctx, u *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepoMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepo)(nil).CreateUser), ctx, u)
}

// GetAllUsers mocks base method.
func (m *MockRepo) GetAllUsers(ctx Ctx) ([]*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepoMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepo)(nil).GetAllUsers), ctx)
}

// GetUserById mocks base method.
func (m *MockRepo) GetUserById(ctx Ctx, id uint) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockRepoMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockRepo)(nil).GetUserById), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockRepo) UpdateUser(ctx Ctx, u *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, u)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepoMockRecorder) UpdateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepo)(nil).UpdateUser), ctx, u)
}
