// Code generated by ent, DO NOT EDIT.

package manualitem

import (
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
)

const (
	// Label holds the string label denoting the manualitem type in the database.
	Label = "manual_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProviderName holds the string denoting the provider_name field in the database.
	FieldProviderName = "provider_name"
	// FieldItemTableID holds the string denoting the item_table_id field in the database.
	FieldItemTableID = "item_table_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// Table holds the table name of the manualitem in the database.
	Table = "manual_items"
)

// Columns holds all SQL columns for manualitem fields.
var Columns = []string{
	FieldID,
	FieldProviderName,
	FieldItemTableID,
	FieldType,
	FieldCategory,
	FieldDescription,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultProviderName holds the default value on creation for the "provider_name" field.
	DefaultProviderName string
	// ProviderNameValidator is a validator for the "provider_name" field. It is called by the builders before save.
	ProviderNameValidator func(string) error
	// DefaultItemTableID holds the default value on creation for the "item_table_id" field.
	DefaultItemTableID string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultCategory holds the default value on creation for the "category" field.
	DefaultCategory string
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultValue holds the default value on creation for the "value" field.
	DefaultValue float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ManualItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProviderName orders the results by the provider_name field.
func ByProviderName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderName, opts...).ToFunc()
}

// ByItemTableID orders the results by the item_table_id field.
func ByItemTableID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemTableID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}
