// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/manualasset"
)

// ManualAssetCreate is the builder for creating a ManualAsset entity.
type ManualAssetCreate struct {
	config
	mutation *ManualAssetMutation
	hooks    []Hook
}

// SetProviderName sets the "provider_name" field.
func (mac *ManualAssetCreate) SetProviderName(s string) *ManualAssetCreate {
	mac.mutation.SetProviderName(s)
	return mac
}

// SetAssetTableID sets the "asset_table_id" field.
func (mac *ManualAssetCreate) SetAssetTableID(s string) *ManualAssetCreate {
	mac.mutation.SetAssetTableID(s)
	return mac
}

// SetAssetType sets the "asset_type" field.
func (mac *ManualAssetCreate) SetAssetType(s string) *ManualAssetCreate {
	mac.mutation.SetAssetType(s)
	return mac
}

// SetValue sets the "value" field.
func (mac *ManualAssetCreate) SetValue(f float64) *ManualAssetCreate {
	mac.mutation.SetValue(f)
	return mac
}

// SetCreatedAt sets the "created_at" field.
func (mac *ManualAssetCreate) SetCreatedAt(t time.Time) *ManualAssetCreate {
	mac.mutation.SetCreatedAt(t)
	return mac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mac *ManualAssetCreate) SetNillableCreatedAt(t *time.Time) *ManualAssetCreate {
	if t != nil {
		mac.SetCreatedAt(*t)
	}
	return mac
}

// SetUpdatedAt sets the "updated_at" field.
func (mac *ManualAssetCreate) SetUpdatedAt(t time.Time) *ManualAssetCreate {
	mac.mutation.SetUpdatedAt(t)
	return mac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mac *ManualAssetCreate) SetNillableUpdatedAt(t *time.Time) *ManualAssetCreate {
	if t != nil {
		mac.SetUpdatedAt(*t)
	}
	return mac
}

// SetID sets the "id" field.
func (mac *ManualAssetCreate) SetID(u uuid.UUID) *ManualAssetCreate {
	mac.mutation.SetID(u)
	return mac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mac *ManualAssetCreate) SetNillableID(u *uuid.UUID) *ManualAssetCreate {
	if u != nil {
		mac.SetID(*u)
	}
	return mac
}

// Mutation returns the ManualAssetMutation object of the builder.
func (mac *ManualAssetCreate) Mutation() *ManualAssetMutation {
	return mac.mutation
}

// Save creates the ManualAsset in the database.
func (mac *ManualAssetCreate) Save(ctx context.Context) (*ManualAsset, error) {
	mac.defaults()
	return withHooks(ctx, mac.sqlSave, mac.mutation, mac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mac *ManualAssetCreate) SaveX(ctx context.Context) *ManualAsset {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *ManualAssetCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *ManualAssetCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *ManualAssetCreate) defaults() {
	if _, ok := mac.mutation.CreatedAt(); !ok {
		v := manualasset.DefaultCreatedAt()
		mac.mutation.SetCreatedAt(v)
	}
	if _, ok := mac.mutation.UpdatedAt(); !ok {
		v := manualasset.DefaultUpdatedAt()
		mac.mutation.SetUpdatedAt(v)
	}
	if _, ok := mac.mutation.ID(); !ok {
		v := manualasset.DefaultID()
		mac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *ManualAssetCreate) check() error {
	if _, ok := mac.mutation.ProviderName(); !ok {
		return &ValidationError{Name: "provider_name", err: errors.New(`ent: missing required field "ManualAsset.provider_name"`)}
	}
	if _, ok := mac.mutation.AssetTableID(); !ok {
		return &ValidationError{Name: "asset_table_id", err: errors.New(`ent: missing required field "ManualAsset.asset_table_id"`)}
	}
	if _, ok := mac.mutation.AssetType(); !ok {
		return &ValidationError{Name: "asset_type", err: errors.New(`ent: missing required field "ManualAsset.asset_type"`)}
	}
	if _, ok := mac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "ManualAsset.value"`)}
	}
	if _, ok := mac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ManualAsset.created_at"`)}
	}
	if _, ok := mac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ManualAsset.updated_at"`)}
	}
	return nil
}

func (mac *ManualAssetCreate) sqlSave(ctx context.Context) (*ManualAsset, error) {
	if err := mac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mac.mutation.id = &_node.ID
	mac.mutation.done = true
	return _node, nil
}

func (mac *ManualAssetCreate) createSpec() (*ManualAsset, *sqlgraph.CreateSpec) {
	var (
		_node = &ManualAsset{config: mac.config}
		_spec = sqlgraph.NewCreateSpec(manualasset.Table, sqlgraph.NewFieldSpec(manualasset.FieldID, field.TypeUUID))
	)
	if id, ok := mac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mac.mutation.ProviderName(); ok {
		_spec.SetField(manualasset.FieldProviderName, field.TypeString, value)
		_node.ProviderName = value
	}
	if value, ok := mac.mutation.AssetTableID(); ok {
		_spec.SetField(manualasset.FieldAssetTableID, field.TypeString, value)
		_node.AssetTableID = value
	}
	if value, ok := mac.mutation.AssetType(); ok {
		_spec.SetField(manualasset.FieldAssetType, field.TypeString, value)
		_node.AssetType = value
	}
	if value, ok := mac.mutation.Value(); ok {
		_spec.SetField(manualasset.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := mac.mutation.CreatedAt(); ok {
		_spec.SetField(manualasset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mac.mutation.UpdatedAt(); ok {
		_spec.SetField(manualasset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ManualAssetCreateBulk is the builder for creating many ManualAsset entities in bulk.
type ManualAssetCreateBulk struct {
	config
	builders []*ManualAssetCreate
}

// Save creates the ManualAsset entities in the database.
func (macb *ManualAssetCreateBulk) Save(ctx context.Context) ([]*ManualAsset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*ManualAsset, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManualAssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *ManualAssetCreateBulk) SaveX(ctx context.Context) []*ManualAsset {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *ManualAssetCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *ManualAssetCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}
