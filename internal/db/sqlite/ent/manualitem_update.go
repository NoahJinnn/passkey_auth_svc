// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/manualitem"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/predicate"
)

// ManualItemUpdate is the builder for updating ManualItem entities.
type ManualItemUpdate struct {
	config
	hooks    []Hook
	mutation *ManualItemMutation
}

// Where appends a list predicates to the ManualItemUpdate builder.
func (miu *ManualItemUpdate) Where(ps ...predicate.ManualItem) *ManualItemUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetProviderName sets the "provider_name" field.
func (miu *ManualItemUpdate) SetProviderName(s string) *ManualItemUpdate {
	miu.mutation.SetProviderName(s)
	return miu
}

// SetItemTableID sets the "item_table_id" field.
func (miu *ManualItemUpdate) SetItemTableID(s string) *ManualItemUpdate {
	miu.mutation.SetItemTableID(s)
	return miu
}

// SetType sets the "type" field.
func (miu *ManualItemUpdate) SetType(s string) *ManualItemUpdate {
	miu.mutation.SetType(s)
	return miu
}

// SetCategory sets the "category" field.
func (miu *ManualItemUpdate) SetCategory(s string) *ManualItemUpdate {
	miu.mutation.SetCategory(s)
	return miu
}

// SetDescription sets the "description" field.
func (miu *ManualItemUpdate) SetDescription(s string) *ManualItemUpdate {
	miu.mutation.SetDescription(s)
	return miu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (miu *ManualItemUpdate) SetNillableDescription(s *string) *ManualItemUpdate {
	if s != nil {
		miu.SetDescription(*s)
	}
	return miu
}

// ClearDescription clears the value of the "description" field.
func (miu *ManualItemUpdate) ClearDescription() *ManualItemUpdate {
	miu.mutation.ClearDescription()
	return miu
}

// SetValue sets the "value" field.
func (miu *ManualItemUpdate) SetValue(f float64) *ManualItemUpdate {
	miu.mutation.ResetValue()
	miu.mutation.SetValue(f)
	return miu
}

// AddValue adds f to the "value" field.
func (miu *ManualItemUpdate) AddValue(f float64) *ManualItemUpdate {
	miu.mutation.AddValue(f)
	return miu
}

// SetUpdatedAt sets the "updated_at" field.
func (miu *ManualItemUpdate) SetUpdatedAt(t time.Time) *ManualItemUpdate {
	miu.mutation.SetUpdatedAt(t)
	return miu
}

// Mutation returns the ManualItemMutation object of the builder.
func (miu *ManualItemUpdate) Mutation() *ManualItemMutation {
	return miu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *ManualItemUpdate) Save(ctx context.Context) (int, error) {
	miu.defaults()
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *ManualItemUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *ManualItemUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *ManualItemUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miu *ManualItemUpdate) defaults() {
	if _, ok := miu.mutation.UpdatedAt(); !ok {
		v := manualitem.UpdateDefaultUpdatedAt()
		miu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *ManualItemUpdate) check() error {
	if v, ok := miu.mutation.ProviderName(); ok {
		if err := manualitem.ProviderNameValidator(v); err != nil {
			return &ValidationError{Name: "provider_name", err: fmt.Errorf(`ent: validator failed for field "ManualItem.provider_name": %w`, err)}
		}
	}
	if v, ok := miu.mutation.Category(); ok {
		if err := manualitem.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ManualItem.category": %w`, err)}
		}
	}
	return nil
}

func (miu *ManualItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := miu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(manualitem.Table, manualitem.Columns, sqlgraph.NewFieldSpec(manualitem.FieldID, field.TypeUUID))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.ProviderName(); ok {
		_spec.SetField(manualitem.FieldProviderName, field.TypeString, value)
	}
	if value, ok := miu.mutation.ItemTableID(); ok {
		_spec.SetField(manualitem.FieldItemTableID, field.TypeString, value)
	}
	if value, ok := miu.mutation.GetType(); ok {
		_spec.SetField(manualitem.FieldType, field.TypeString, value)
	}
	if value, ok := miu.mutation.Category(); ok {
		_spec.SetField(manualitem.FieldCategory, field.TypeString, value)
	}
	if value, ok := miu.mutation.Description(); ok {
		_spec.SetField(manualitem.FieldDescription, field.TypeString, value)
	}
	if miu.mutation.DescriptionCleared() {
		_spec.ClearField(manualitem.FieldDescription, field.TypeString)
	}
	if value, ok := miu.mutation.Value(); ok {
		_spec.SetField(manualitem.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := miu.mutation.AddedValue(); ok {
		_spec.AddField(manualitem.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := miu.mutation.UpdatedAt(); ok {
		_spec.SetField(manualitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manualitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// ManualItemUpdateOne is the builder for updating a single ManualItem entity.
type ManualItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManualItemMutation
}

// SetProviderName sets the "provider_name" field.
func (miuo *ManualItemUpdateOne) SetProviderName(s string) *ManualItemUpdateOne {
	miuo.mutation.SetProviderName(s)
	return miuo
}

// SetItemTableID sets the "item_table_id" field.
func (miuo *ManualItemUpdateOne) SetItemTableID(s string) *ManualItemUpdateOne {
	miuo.mutation.SetItemTableID(s)
	return miuo
}

// SetType sets the "type" field.
func (miuo *ManualItemUpdateOne) SetType(s string) *ManualItemUpdateOne {
	miuo.mutation.SetType(s)
	return miuo
}

// SetCategory sets the "category" field.
func (miuo *ManualItemUpdateOne) SetCategory(s string) *ManualItemUpdateOne {
	miuo.mutation.SetCategory(s)
	return miuo
}

// SetDescription sets the "description" field.
func (miuo *ManualItemUpdateOne) SetDescription(s string) *ManualItemUpdateOne {
	miuo.mutation.SetDescription(s)
	return miuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (miuo *ManualItemUpdateOne) SetNillableDescription(s *string) *ManualItemUpdateOne {
	if s != nil {
		miuo.SetDescription(*s)
	}
	return miuo
}

// ClearDescription clears the value of the "description" field.
func (miuo *ManualItemUpdateOne) ClearDescription() *ManualItemUpdateOne {
	miuo.mutation.ClearDescription()
	return miuo
}

// SetValue sets the "value" field.
func (miuo *ManualItemUpdateOne) SetValue(f float64) *ManualItemUpdateOne {
	miuo.mutation.ResetValue()
	miuo.mutation.SetValue(f)
	return miuo
}

// AddValue adds f to the "value" field.
func (miuo *ManualItemUpdateOne) AddValue(f float64) *ManualItemUpdateOne {
	miuo.mutation.AddValue(f)
	return miuo
}

// SetUpdatedAt sets the "updated_at" field.
func (miuo *ManualItemUpdateOne) SetUpdatedAt(t time.Time) *ManualItemUpdateOne {
	miuo.mutation.SetUpdatedAt(t)
	return miuo
}

// Mutation returns the ManualItemMutation object of the builder.
func (miuo *ManualItemUpdateOne) Mutation() *ManualItemMutation {
	return miuo.mutation
}

// Where appends a list predicates to the ManualItemUpdate builder.
func (miuo *ManualItemUpdateOne) Where(ps ...predicate.ManualItem) *ManualItemUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *ManualItemUpdateOne) Select(field string, fields ...string) *ManualItemUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated ManualItem entity.
func (miuo *ManualItemUpdateOne) Save(ctx context.Context) (*ManualItem, error) {
	miuo.defaults()
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *ManualItemUpdateOne) SaveX(ctx context.Context) *ManualItem {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *ManualItemUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *ManualItemUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miuo *ManualItemUpdateOne) defaults() {
	if _, ok := miuo.mutation.UpdatedAt(); !ok {
		v := manualitem.UpdateDefaultUpdatedAt()
		miuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *ManualItemUpdateOne) check() error {
	if v, ok := miuo.mutation.ProviderName(); ok {
		if err := manualitem.ProviderNameValidator(v); err != nil {
			return &ValidationError{Name: "provider_name", err: fmt.Errorf(`ent: validator failed for field "ManualItem.provider_name": %w`, err)}
		}
	}
	if v, ok := miuo.mutation.Category(); ok {
		if err := manualitem.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ManualItem.category": %w`, err)}
		}
	}
	return nil
}

func (miuo *ManualItemUpdateOne) sqlSave(ctx context.Context) (_node *ManualItem, err error) {
	if err := miuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(manualitem.Table, manualitem.Columns, sqlgraph.NewFieldSpec(manualitem.FieldID, field.TypeUUID))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ManualItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manualitem.FieldID)
		for _, f := range fields {
			if !manualitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manualitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.ProviderName(); ok {
		_spec.SetField(manualitem.FieldProviderName, field.TypeString, value)
	}
	if value, ok := miuo.mutation.ItemTableID(); ok {
		_spec.SetField(manualitem.FieldItemTableID, field.TypeString, value)
	}
	if value, ok := miuo.mutation.GetType(); ok {
		_spec.SetField(manualitem.FieldType, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Category(); ok {
		_spec.SetField(manualitem.FieldCategory, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Description(); ok {
		_spec.SetField(manualitem.FieldDescription, field.TypeString, value)
	}
	if miuo.mutation.DescriptionCleared() {
		_spec.ClearField(manualitem.FieldDescription, field.TypeString)
	}
	if value, ok := miuo.mutation.Value(); ok {
		_spec.SetField(manualitem.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := miuo.mutation.AddedValue(); ok {
		_spec.AddField(manualitem.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := miuo.mutation.UpdatedAt(); ok {
		_spec.SetField(manualitem.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ManualItem{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manualitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
