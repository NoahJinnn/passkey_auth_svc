// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/income"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/institution"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/predicate"
)

// IncomeUpdate is the builder for updating Income entities.
type IncomeUpdate struct {
	config
	hooks    []Hook
	mutation *IncomeMutation
}

// Where appends a list predicates to the IncomeUpdate builder.
func (iu *IncomeUpdate) Where(ps ...predicate.Income) *IncomeUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetInstitutionID sets the "institution_id" field.
func (iu *IncomeUpdate) SetInstitutionID(u uuid.UUID) *IncomeUpdate {
	iu.mutation.SetInstitutionID(u)
	return iu
}

// SetNillableInstitutionID sets the "institution_id" field if the given value is not nil.
func (iu *IncomeUpdate) SetNillableInstitutionID(u *uuid.UUID) *IncomeUpdate {
	if u != nil {
		iu.SetInstitutionID(*u)
	}
	return iu
}

// ClearInstitutionID clears the value of the "institution_id" field.
func (iu *IncomeUpdate) ClearInstitutionID() *IncomeUpdate {
	iu.mutation.ClearInstitutionID()
	return iu
}

// SetData sets the "data" field.
func (iu *IncomeUpdate) SetData(s string) *IncomeUpdate {
	iu.mutation.SetData(s)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IncomeUpdate) SetUpdatedAt(t time.Time) *IncomeUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (iu *IncomeUpdate) SetInstitution(i *Institution) *IncomeUpdate {
	return iu.SetInstitutionID(i.ID)
}

// Mutation returns the IncomeMutation object of the builder.
func (iu *IncomeUpdate) Mutation() *IncomeMutation {
	return iu.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (iu *IncomeUpdate) ClearInstitution() *IncomeUpdate {
	iu.mutation.ClearInstitution()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IncomeUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IncomeUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IncomeUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IncomeUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IncomeUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := income.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

func (iu *IncomeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(income.Table, income.Columns, sqlgraph.NewFieldSpec(income.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Data(); ok {
		_spec.SetField(income.FieldData, field.TypeString, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(income.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   income.InstitutionTable,
			Columns: []string{income.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   income.InstitutionTable,
			Columns: []string{income.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{income.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IncomeUpdateOne is the builder for updating a single Income entity.
type IncomeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IncomeMutation
}

// SetInstitutionID sets the "institution_id" field.
func (iuo *IncomeUpdateOne) SetInstitutionID(u uuid.UUID) *IncomeUpdateOne {
	iuo.mutation.SetInstitutionID(u)
	return iuo
}

// SetNillableInstitutionID sets the "institution_id" field if the given value is not nil.
func (iuo *IncomeUpdateOne) SetNillableInstitutionID(u *uuid.UUID) *IncomeUpdateOne {
	if u != nil {
		iuo.SetInstitutionID(*u)
	}
	return iuo
}

// ClearInstitutionID clears the value of the "institution_id" field.
func (iuo *IncomeUpdateOne) ClearInstitutionID() *IncomeUpdateOne {
	iuo.mutation.ClearInstitutionID()
	return iuo
}

// SetData sets the "data" field.
func (iuo *IncomeUpdateOne) SetData(s string) *IncomeUpdateOne {
	iuo.mutation.SetData(s)
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IncomeUpdateOne) SetUpdatedAt(t time.Time) *IncomeUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetInstitution sets the "institution" edge to the Institution entity.
func (iuo *IncomeUpdateOne) SetInstitution(i *Institution) *IncomeUpdateOne {
	return iuo.SetInstitutionID(i.ID)
}

// Mutation returns the IncomeMutation object of the builder.
func (iuo *IncomeUpdateOne) Mutation() *IncomeMutation {
	return iuo.mutation
}

// ClearInstitution clears the "institution" edge to the Institution entity.
func (iuo *IncomeUpdateOne) ClearInstitution() *IncomeUpdateOne {
	iuo.mutation.ClearInstitution()
	return iuo
}

// Where appends a list predicates to the IncomeUpdate builder.
func (iuo *IncomeUpdateOne) Where(ps ...predicate.Income) *IncomeUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IncomeUpdateOne) Select(field string, fields ...string) *IncomeUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Income entity.
func (iuo *IncomeUpdateOne) Save(ctx context.Context) (*Income, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IncomeUpdateOne) SaveX(ctx context.Context) *Income {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IncomeUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IncomeUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IncomeUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := income.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

func (iuo *IncomeUpdateOne) sqlSave(ctx context.Context) (_node *Income, err error) {
	_spec := sqlgraph.NewUpdateSpec(income.Table, income.Columns, sqlgraph.NewFieldSpec(income.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Income.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, income.FieldID)
		for _, f := range fields {
			if !income.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != income.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Data(); ok {
		_spec.SetField(income.FieldData, field.TypeString, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(income.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.InstitutionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   income.InstitutionTable,
			Columns: []string{income.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InstitutionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   income.InstitutionTable,
			Columns: []string{income.InstitutionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(institution.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Income{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{income.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
