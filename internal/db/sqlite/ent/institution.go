// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/connection"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/institution"
)

// Institution is the model entity for the Institution schema.
type Institution struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProviderName holds the value of the "provider_name" field.
	ProviderName string `json:"provider_name,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstitutionQuery when eager-loading is set.
	Edges        InstitutionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InstitutionEdges holds the relations/edges for other nodes in the graph.
type InstitutionEdges struct {
	// Connection holds the value of the connection edge.
	Connection *Connection `json:"connection,omitempty"`
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// Incomes holds the value of the incomes edge.
	Incomes []*Income `json:"incomes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstitutionEdges) ConnectionOrErr() (*Connection, error) {
	if e.loadedTypes[0] {
		if e.Connection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: connection.Label}
		}
		return e.Connection, nil
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e InstitutionEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[1] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// IncomesOrErr returns the Incomes value or an error if the edge
// was not loaded in eager-loading.
func (e InstitutionEdges) IncomesOrErr() ([]*Income, error) {
	if e.loadedTypes[2] {
		return e.Incomes, nil
	}
	return nil, &NotLoadedError{edge: "incomes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Institution) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case institution.FieldProviderName, institution.FieldData:
			values[i] = new(sql.NullString)
		case institution.FieldCreatedAt, institution.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case institution.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Institution fields.
func (i *Institution) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case institution.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case institution.FieldProviderName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_name", values[j])
			} else if value.Valid {
				i.ProviderName = value.String
			}
		case institution.FieldData:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[j])
			} else if value.Valid {
				i.Data = value.String
			}
		case institution.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case institution.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Institution.
// This includes values selected through modifiers, order, etc.
func (i *Institution) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryConnection queries the "connection" edge of the Institution entity.
func (i *Institution) QueryConnection() *ConnectionQuery {
	return NewInstitutionClient(i.config).QueryConnection(i)
}

// QueryAccounts queries the "accounts" edge of the Institution entity.
func (i *Institution) QueryAccounts() *AccountQuery {
	return NewInstitutionClient(i.config).QueryAccounts(i)
}

// QueryIncomes queries the "incomes" edge of the Institution entity.
func (i *Institution) QueryIncomes() *IncomeQuery {
	return NewInstitutionClient(i.config).QueryIncomes(i)
}

// Update returns a builder for updating this Institution.
// Note that you need to call Institution.Unwrap() before calling this method if this Institution
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Institution) Update() *InstitutionUpdateOne {
	return NewInstitutionClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Institution entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Institution) Unwrap() *Institution {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Institution is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Institution) String() string {
	var builder strings.Builder
	builder.WriteString("Institution(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("provider_name=")
	builder.WriteString(i.ProviderName)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(i.Data)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Institutions is a parsable slice of Institution.
type Institutions []*Institution
