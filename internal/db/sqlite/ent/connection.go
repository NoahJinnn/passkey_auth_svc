// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/connection"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/institution"
)

// Connection is the model entity for the Connection schema.
type Connection struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// InstitutionID holds the value of the "institution_id" field.
	InstitutionID *uuid.UUID `json:"institution_id,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionQuery when eager-loading is set.
	Edges        ConnectionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConnectionEdges holds the relations/edges for other nodes in the graph.
type ConnectionEdges struct {
	// Institution holds the value of the institution edge.
	Institution *Institution `json:"institution,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstitutionOrErr returns the Institution value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionEdges) InstitutionOrErr() (*Institution, error) {
	if e.loadedTypes[0] {
		if e.Institution == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: institution.Label}
		}
		return e.Institution, nil
	}
	return nil, &NotLoadedError{edge: "institution"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Connection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connection.FieldInstitutionID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case connection.FieldData:
			values[i] = new(sql.NullString)
		case connection.FieldCreatedAt, connection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case connection.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Connection fields.
func (c *Connection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connection.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case connection.FieldInstitutionID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field institution_id", values[i])
			} else if value.Valid {
				c.InstitutionID = new(uuid.UUID)
				*c.InstitutionID = *value.S.(*uuid.UUID)
			}
		case connection.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				c.Data = value.String
			}
		case connection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case connection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Connection.
// This includes values selected through modifiers, order, etc.
func (c *Connection) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryInstitution queries the "institution" edge of the Connection entity.
func (c *Connection) QueryInstitution() *InstitutionQuery {
	return NewConnectionClient(c.config).QueryInstitution(c)
}

// Update returns a builder for updating this Connection.
// Note that you need to call Connection.Unwrap() before calling this method if this Connection
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Connection) Update() *ConnectionUpdateOne {
	return NewConnectionClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Connection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Connection) Unwrap() *Connection {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Connection is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Connection) String() string {
	var builder strings.Builder
	builder.WriteString("Connection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.InstitutionID; v != nil {
		builder.WriteString("institution_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(c.Data)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Connections is a parsable slice of Connection.
type Connections []*Connection
