// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/manualitem"
)

// ManualItem is the model entity for the ManualItem schema.
type ManualItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ProviderName holds the value of the "provider_name" field.
	ProviderName string `json:"provider_name,omitempty"`
	// ItemTableID holds the value of the "item_table_id" field.
	ItemTableID string `json:"item_table_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Value holds the value of the "value" field.
	Value        float64 `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ManualItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case manualitem.FieldValue:
			values[i] = new(sql.NullFloat64)
		case manualitem.FieldProviderName, manualitem.FieldItemTableID, manualitem.FieldType, manualitem.FieldCategory, manualitem.FieldDescription:
			values[i] = new(sql.NullString)
		case manualitem.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ManualItem fields.
func (mi *ManualItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case manualitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mi.ID = *value
			}
		case manualitem.FieldProviderName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_name", values[i])
			} else if value.Valid {
				mi.ProviderName = value.String
			}
		case manualitem.FieldItemTableID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_table_id", values[i])
			} else if value.Valid {
				mi.ItemTableID = value.String
			}
		case manualitem.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				mi.Type = value.String
			}
		case manualitem.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				mi.Category = value.String
			}
		case manualitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mi.Description = value.String
			}
		case manualitem.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				mi.Value = value.Float64
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the ManualItem.
// This includes values selected through modifiers, order, etc.
func (mi *ManualItem) GetValue(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// Update returns a builder for updating this ManualItem.
// Note that you need to call ManualItem.Unwrap() before calling this method if this ManualItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *ManualItem) Update() *ManualItemUpdateOne {
	return NewManualItemClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the ManualItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *ManualItem) Unwrap() *ManualItem {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ManualItem is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *ManualItem) String() string {
	var builder strings.Builder
	builder.WriteString("ManualItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("provider_name=")
	builder.WriteString(mi.ProviderName)
	builder.WriteString(", ")
	builder.WriteString("item_table_id=")
	builder.WriteString(mi.ItemTableID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(mi.Type)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(mi.Category)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mi.Description)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", mi.Value))
	builder.WriteByte(')')
	return builder.String()
}

// ManualItems is a parsable slice of ManualItem.
type ManualItems []*ManualItem
