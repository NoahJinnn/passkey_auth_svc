// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/manualasset"
	"github.com/hellohq/hqservice/internal/db/sqlite/ent/predicate"
)

// ManualAssetUpdate is the builder for updating ManualAsset entities.
type ManualAssetUpdate struct {
	config
	hooks    []Hook
	mutation *ManualAssetMutation
}

// Where appends a list predicates to the ManualAssetUpdate builder.
func (mau *ManualAssetUpdate) Where(ps ...predicate.ManualAsset) *ManualAssetUpdate {
	mau.mutation.Where(ps...)
	return mau
}

// SetProviderName sets the "provider_name" field.
func (mau *ManualAssetUpdate) SetProviderName(s string) *ManualAssetUpdate {
	mau.mutation.SetProviderName(s)
	return mau
}

// SetAssetTableID sets the "asset_table_id" field.
func (mau *ManualAssetUpdate) SetAssetTableID(s string) *ManualAssetUpdate {
	mau.mutation.SetAssetTableID(s)
	return mau
}

// SetAssetType sets the "asset_type" field.
func (mau *ManualAssetUpdate) SetAssetType(s string) *ManualAssetUpdate {
	mau.mutation.SetAssetType(s)
	return mau
}

// SetDescription sets the "description" field.
func (mau *ManualAssetUpdate) SetDescription(s string) *ManualAssetUpdate {
	mau.mutation.SetDescription(s)
	return mau
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mau *ManualAssetUpdate) SetNillableDescription(s *string) *ManualAssetUpdate {
	if s != nil {
		mau.SetDescription(*s)
	}
	return mau
}

// ClearDescription clears the value of the "description" field.
func (mau *ManualAssetUpdate) ClearDescription() *ManualAssetUpdate {
	mau.mutation.ClearDescription()
	return mau
}

// SetValue sets the "value" field.
func (mau *ManualAssetUpdate) SetValue(f float64) *ManualAssetUpdate {
	mau.mutation.ResetValue()
	mau.mutation.SetValue(f)
	return mau
}

// AddValue adds f to the "value" field.
func (mau *ManualAssetUpdate) AddValue(f float64) *ManualAssetUpdate {
	mau.mutation.AddValue(f)
	return mau
}

// SetUpdatedAt sets the "updated_at" field.
func (mau *ManualAssetUpdate) SetUpdatedAt(t time.Time) *ManualAssetUpdate {
	mau.mutation.SetUpdatedAt(t)
	return mau
}

// Mutation returns the ManualAssetMutation object of the builder.
func (mau *ManualAssetUpdate) Mutation() *ManualAssetMutation {
	return mau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mau *ManualAssetUpdate) Save(ctx context.Context) (int, error) {
	mau.defaults()
	return withHooks(ctx, mau.sqlSave, mau.mutation, mau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mau *ManualAssetUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *ManualAssetUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *ManualAssetUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mau *ManualAssetUpdate) defaults() {
	if _, ok := mau.mutation.UpdatedAt(); !ok {
		v := manualasset.UpdateDefaultUpdatedAt()
		mau.mutation.SetUpdatedAt(v)
	}
}

func (mau *ManualAssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manualasset.Table, manualasset.Columns, sqlgraph.NewFieldSpec(manualasset.FieldID, field.TypeUUID))
	if ps := mau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.ProviderName(); ok {
		_spec.SetField(manualasset.FieldProviderName, field.TypeString, value)
	}
	if value, ok := mau.mutation.AssetTableID(); ok {
		_spec.SetField(manualasset.FieldAssetTableID, field.TypeString, value)
	}
	if value, ok := mau.mutation.AssetType(); ok {
		_spec.SetField(manualasset.FieldAssetType, field.TypeString, value)
	}
	if value, ok := mau.mutation.Description(); ok {
		_spec.SetField(manualasset.FieldDescription, field.TypeString, value)
	}
	if mau.mutation.DescriptionCleared() {
		_spec.ClearField(manualasset.FieldDescription, field.TypeString)
	}
	if value, ok := mau.mutation.Value(); ok {
		_spec.SetField(manualasset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mau.mutation.AddedValue(); ok {
		_spec.AddField(manualasset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mau.mutation.UpdatedAt(); ok {
		_spec.SetField(manualasset.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manualasset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mau.mutation.done = true
	return n, nil
}

// ManualAssetUpdateOne is the builder for updating a single ManualAsset entity.
type ManualAssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManualAssetMutation
}

// SetProviderName sets the "provider_name" field.
func (mauo *ManualAssetUpdateOne) SetProviderName(s string) *ManualAssetUpdateOne {
	mauo.mutation.SetProviderName(s)
	return mauo
}

// SetAssetTableID sets the "asset_table_id" field.
func (mauo *ManualAssetUpdateOne) SetAssetTableID(s string) *ManualAssetUpdateOne {
	mauo.mutation.SetAssetTableID(s)
	return mauo
}

// SetAssetType sets the "asset_type" field.
func (mauo *ManualAssetUpdateOne) SetAssetType(s string) *ManualAssetUpdateOne {
	mauo.mutation.SetAssetType(s)
	return mauo
}

// SetDescription sets the "description" field.
func (mauo *ManualAssetUpdateOne) SetDescription(s string) *ManualAssetUpdateOne {
	mauo.mutation.SetDescription(s)
	return mauo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mauo *ManualAssetUpdateOne) SetNillableDescription(s *string) *ManualAssetUpdateOne {
	if s != nil {
		mauo.SetDescription(*s)
	}
	return mauo
}

// ClearDescription clears the value of the "description" field.
func (mauo *ManualAssetUpdateOne) ClearDescription() *ManualAssetUpdateOne {
	mauo.mutation.ClearDescription()
	return mauo
}

// SetValue sets the "value" field.
func (mauo *ManualAssetUpdateOne) SetValue(f float64) *ManualAssetUpdateOne {
	mauo.mutation.ResetValue()
	mauo.mutation.SetValue(f)
	return mauo
}

// AddValue adds f to the "value" field.
func (mauo *ManualAssetUpdateOne) AddValue(f float64) *ManualAssetUpdateOne {
	mauo.mutation.AddValue(f)
	return mauo
}

// SetUpdatedAt sets the "updated_at" field.
func (mauo *ManualAssetUpdateOne) SetUpdatedAt(t time.Time) *ManualAssetUpdateOne {
	mauo.mutation.SetUpdatedAt(t)
	return mauo
}

// Mutation returns the ManualAssetMutation object of the builder.
func (mauo *ManualAssetUpdateOne) Mutation() *ManualAssetMutation {
	return mauo.mutation
}

// Where appends a list predicates to the ManualAssetUpdate builder.
func (mauo *ManualAssetUpdateOne) Where(ps ...predicate.ManualAsset) *ManualAssetUpdateOne {
	mauo.mutation.Where(ps...)
	return mauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mauo *ManualAssetUpdateOne) Select(field string, fields ...string) *ManualAssetUpdateOne {
	mauo.fields = append([]string{field}, fields...)
	return mauo
}

// Save executes the query and returns the updated ManualAsset entity.
func (mauo *ManualAssetUpdateOne) Save(ctx context.Context) (*ManualAsset, error) {
	mauo.defaults()
	return withHooks(ctx, mauo.sqlSave, mauo.mutation, mauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *ManualAssetUpdateOne) SaveX(ctx context.Context) *ManualAsset {
	node, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mauo *ManualAssetUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *ManualAssetUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mauo *ManualAssetUpdateOne) defaults() {
	if _, ok := mauo.mutation.UpdatedAt(); !ok {
		v := manualasset.UpdateDefaultUpdatedAt()
		mauo.mutation.SetUpdatedAt(v)
	}
}

func (mauo *ManualAssetUpdateOne) sqlSave(ctx context.Context) (_node *ManualAsset, err error) {
	_spec := sqlgraph.NewUpdateSpec(manualasset.Table, manualasset.Columns, sqlgraph.NewFieldSpec(manualasset.FieldID, field.TypeUUID))
	id, ok := mauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ManualAsset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manualasset.FieldID)
		for _, f := range fields {
			if !manualasset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manualasset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mauo.mutation.ProviderName(); ok {
		_spec.SetField(manualasset.FieldProviderName, field.TypeString, value)
	}
	if value, ok := mauo.mutation.AssetTableID(); ok {
		_spec.SetField(manualasset.FieldAssetTableID, field.TypeString, value)
	}
	if value, ok := mauo.mutation.AssetType(); ok {
		_spec.SetField(manualasset.FieldAssetType, field.TypeString, value)
	}
	if value, ok := mauo.mutation.Description(); ok {
		_spec.SetField(manualasset.FieldDescription, field.TypeString, value)
	}
	if mauo.mutation.DescriptionCleared() {
		_spec.ClearField(manualasset.FieldDescription, field.TypeString)
	}
	if value, ok := mauo.mutation.Value(); ok {
		_spec.SetField(manualasset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mauo.mutation.AddedValue(); ok {
		_spec.AddField(manualasset.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := mauo.mutation.UpdatedAt(); ok {
		_spec.SetField(manualasset.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ManualAsset{config: mauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manualasset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mauo.mutation.done = true
	return _node, nil
}
